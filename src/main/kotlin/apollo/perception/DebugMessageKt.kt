// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/perception/proto/perception_obstacle.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.perception;

@kotlin.jvm.JvmName("-initializedebugMessage")
public inline fun debugMessage(block: apollo.perception.DebugMessageKt.Dsl.() -> kotlin.Unit): apollo.perception.PerceptionObstacleOuterClass.DebugMessage =
  apollo.perception.DebugMessageKt.Dsl._create(apollo.perception.PerceptionObstacleOuterClass.DebugMessage.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.perception.DebugMessage`
 */
public object DebugMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.perception.PerceptionObstacleOuterClass.DebugMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.perception.PerceptionObstacleOuterClass.DebugMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.perception.PerceptionObstacleOuterClass.DebugMessage = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TrajectoryProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * ```
     * can have multiple trajectories per obstacle
     * ```
     *
     * `repeated .apollo.perception.Trajectory trajectory = 1;`
     */
     public val trajectory: com.google.protobuf.kotlin.DslList<apollo.perception.PerceptionObstacleOuterClass.Trajectory, TrajectoryProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getTrajectoryList()
      )
    /**
     * ```
     * can have multiple trajectories per obstacle
     * ```
     *
     * `repeated .apollo.perception.Trajectory trajectory = 1;`
     * @param value The trajectory to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addTrajectory")
    public fun com.google.protobuf.kotlin.DslList<apollo.perception.PerceptionObstacleOuterClass.Trajectory, TrajectoryProxy>.add(value: apollo.perception.PerceptionObstacleOuterClass.Trajectory) {
      _builder.addTrajectory(value)
    }
    /**
     * ```
     * can have multiple trajectories per obstacle
     * ```
     *
     * `repeated .apollo.perception.Trajectory trajectory = 1;`
     * @param value The trajectory to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignTrajectory")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<apollo.perception.PerceptionObstacleOuterClass.Trajectory, TrajectoryProxy>.plusAssign(value: apollo.perception.PerceptionObstacleOuterClass.Trajectory) {
      add(value)
    }
    /**
     * ```
     * can have multiple trajectories per obstacle
     * ```
     *
     * `repeated .apollo.perception.Trajectory trajectory = 1;`
     * @param values The trajectory to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllTrajectory")
    public fun com.google.protobuf.kotlin.DslList<apollo.perception.PerceptionObstacleOuterClass.Trajectory, TrajectoryProxy>.addAll(values: kotlin.collections.Iterable<apollo.perception.PerceptionObstacleOuterClass.Trajectory>) {
      _builder.addAllTrajectory(values)
    }
    /**
     * ```
     * can have multiple trajectories per obstacle
     * ```
     *
     * `repeated .apollo.perception.Trajectory trajectory = 1;`
     * @param values The trajectory to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllTrajectory")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<apollo.perception.PerceptionObstacleOuterClass.Trajectory, TrajectoryProxy>.plusAssign(values: kotlin.collections.Iterable<apollo.perception.PerceptionObstacleOuterClass.Trajectory>) {
      addAll(values)
    }
    /**
     * ```
     * can have multiple trajectories per obstacle
     * ```
     *
     * `repeated .apollo.perception.Trajectory trajectory = 1;`
     * @param index The index to set the value at.
     * @param value The trajectory to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setTrajectory")
    public operator fun com.google.protobuf.kotlin.DslList<apollo.perception.PerceptionObstacleOuterClass.Trajectory, TrajectoryProxy>.set(index: kotlin.Int, value: apollo.perception.PerceptionObstacleOuterClass.Trajectory) {
      _builder.setTrajectory(index, value)
    }
    /**
     * ```
     * can have multiple trajectories per obstacle
     * ```
     *
     * `repeated .apollo.perception.Trajectory trajectory = 1;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearTrajectory")
    public fun com.google.protobuf.kotlin.DslList<apollo.perception.PerceptionObstacleOuterClass.Trajectory, TrajectoryProxy>.clear() {
      _builder.clearTrajectory()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.perception.PerceptionObstacleOuterClass.DebugMessage.copy(block: `apollo.perception`.DebugMessageKt.Dsl.() -> kotlin.Unit): apollo.perception.PerceptionObstacleOuterClass.DebugMessage =
  `apollo.perception`.DebugMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

