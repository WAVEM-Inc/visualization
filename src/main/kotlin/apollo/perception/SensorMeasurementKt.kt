// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/perception/proto/perception_obstacle.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.perception;

@kotlin.jvm.JvmName("-initializesensorMeasurement")
public inline fun sensorMeasurement(block: apollo.perception.SensorMeasurementKt.Dsl.() -> kotlin.Unit): apollo.perception.PerceptionObstacleOuterClass.SensorMeasurement =
  apollo.perception.SensorMeasurementKt.Dsl._create(apollo.perception.PerceptionObstacleOuterClass.SensorMeasurement.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.perception.SensorMeasurement`
 */
public object SensorMeasurementKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.perception.PerceptionObstacleOuterClass.SensorMeasurement.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.perception.PerceptionObstacleOuterClass.SensorMeasurement.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.perception.PerceptionObstacleOuterClass.SensorMeasurement = _builder.build()

    /**
     * `optional string sensor_id = 1;`
     */
    public var sensorId: kotlin.String
      @JvmName("getSensorId")
      get() = _builder.getSensorId()
      @JvmName("setSensorId")
      set(value) {
        _builder.setSensorId(value)
      }
    /**
     * `optional string sensor_id = 1;`
     */
    public fun clearSensorId() {
      _builder.clearSensorId()
    }
    /**
     * `optional string sensor_id = 1;`
     * @return Whether the sensorId field is set.
     */
    public fun hasSensorId(): kotlin.Boolean {
      return _builder.hasSensorId()
    }

    /**
     * `optional int32 id = 2;`
     */
    public var id: kotlin.Int
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * `optional int32 id = 2;`
     */
    public fun clearId() {
      _builder.clearId()
    }
    /**
     * `optional int32 id = 2;`
     * @return Whether the id field is set.
     */
    public fun hasId(): kotlin.Boolean {
      return _builder.hasId()
    }

    /**
     * `optional .apollo.common.Point3D position = 3;`
     */
    public var position: apollo.common.Geometry.Point3D
      @JvmName("getPosition")
      get() = _builder.getPosition()
      @JvmName("setPosition")
      set(value) {
        _builder.setPosition(value)
      }
    /**
     * `optional .apollo.common.Point3D position = 3;`
     */
    public fun clearPosition() {
      _builder.clearPosition()
    }
    /**
     * `optional .apollo.common.Point3D position = 3;`
     * @return Whether the position field is set.
     */
    public fun hasPosition(): kotlin.Boolean {
      return _builder.hasPosition()
    }
    public val SensorMeasurementKt.Dsl.positionOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.positionOrNull

    /**
     * `optional double theta = 4;`
     */
    public var theta: kotlin.Double
      @JvmName("getTheta")
      get() = _builder.getTheta()
      @JvmName("setTheta")
      set(value) {
        _builder.setTheta(value)
      }
    /**
     * `optional double theta = 4;`
     */
    public fun clearTheta() {
      _builder.clearTheta()
    }
    /**
     * `optional double theta = 4;`
     * @return Whether the theta field is set.
     */
    public fun hasTheta(): kotlin.Boolean {
      return _builder.hasTheta()
    }

    /**
     * `optional double length = 5;`
     */
    public var length: kotlin.Double
      @JvmName("getLength")
      get() = _builder.getLength()
      @JvmName("setLength")
      set(value) {
        _builder.setLength(value)
      }
    /**
     * `optional double length = 5;`
     */
    public fun clearLength() {
      _builder.clearLength()
    }
    /**
     * `optional double length = 5;`
     * @return Whether the length field is set.
     */
    public fun hasLength(): kotlin.Boolean {
      return _builder.hasLength()
    }

    /**
     * `optional double width = 6;`
     */
    public var width: kotlin.Double
      @JvmName("getWidth")
      get() = _builder.getWidth()
      @JvmName("setWidth")
      set(value) {
        _builder.setWidth(value)
      }
    /**
     * `optional double width = 6;`
     */
    public fun clearWidth() {
      _builder.clearWidth()
    }
    /**
     * `optional double width = 6;`
     * @return Whether the width field is set.
     */
    public fun hasWidth(): kotlin.Boolean {
      return _builder.hasWidth()
    }

    /**
     * `optional double height = 7;`
     */
    public var height: kotlin.Double
      @JvmName("getHeight")
      get() = _builder.getHeight()
      @JvmName("setHeight")
      set(value) {
        _builder.setHeight(value)
      }
    /**
     * `optional double height = 7;`
     */
    public fun clearHeight() {
      _builder.clearHeight()
    }
    /**
     * `optional double height = 7;`
     * @return Whether the height field is set.
     */
    public fun hasHeight(): kotlin.Boolean {
      return _builder.hasHeight()
    }

    /**
     * `optional .apollo.common.Point3D velocity = 8;`
     */
    public var velocity: apollo.common.Geometry.Point3D
      @JvmName("getVelocity")
      get() = _builder.getVelocity()
      @JvmName("setVelocity")
      set(value) {
        _builder.setVelocity(value)
      }
    /**
     * `optional .apollo.common.Point3D velocity = 8;`
     */
    public fun clearVelocity() {
      _builder.clearVelocity()
    }
    /**
     * `optional .apollo.common.Point3D velocity = 8;`
     * @return Whether the velocity field is set.
     */
    public fun hasVelocity(): kotlin.Boolean {
      return _builder.hasVelocity()
    }
    public val SensorMeasurementKt.Dsl.velocityOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.velocityOrNull

    /**
     * `optional .apollo.perception.PerceptionObstacle.Type type = 9;`
     */
    public var type: apollo.perception.PerceptionObstacleOuterClass.PerceptionObstacle.Type
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * `optional .apollo.perception.PerceptionObstacle.Type type = 9;`
     */
    public fun clearType() {
      _builder.clearType()
    }
    /**
     * `optional .apollo.perception.PerceptionObstacle.Type type = 9;`
     * @return Whether the type field is set.
     */
    public fun hasType(): kotlin.Boolean {
      return _builder.hasType()
    }

    /**
     * `optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;`
     */
    public var subType: apollo.perception.PerceptionObstacleOuterClass.PerceptionObstacle.SubType
      @JvmName("getSubType")
      get() = _builder.getSubType()
      @JvmName("setSubType")
      set(value) {
        _builder.setSubType(value)
      }
    /**
     * `optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;`
     */
    public fun clearSubType() {
      _builder.clearSubType()
    }
    /**
     * `optional .apollo.perception.PerceptionObstacle.SubType sub_type = 10;`
     * @return Whether the subType field is set.
     */
    public fun hasSubType(): kotlin.Boolean {
      return _builder.hasSubType()
    }

    /**
     * `optional double timestamp = 11;`
     */
    public var timestamp: kotlin.Double
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * `optional double timestamp = 11;`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
    /**
     * `optional double timestamp = 11;`
     * @return Whether the timestamp field is set.
     */
    public fun hasTimestamp(): kotlin.Boolean {
      return _builder.hasTimestamp()
    }

    /**
     * ```
     * only for camera measurements
     * ```
     *
     * `optional .apollo.perception.BBox2D box = 12;`
     */
    public var box: apollo.perception.PerceptionObstacleOuterClass.BBox2D
      @JvmName("getBox")
      get() = _builder.getBox()
      @JvmName("setBox")
      set(value) {
        _builder.setBox(value)
      }
    /**
     * ```
     * only for camera measurements
     * ```
     *
     * `optional .apollo.perception.BBox2D box = 12;`
     */
    public fun clearBox() {
      _builder.clearBox()
    }
    /**
     * ```
     * only for camera measurements
     * ```
     *
     * `optional .apollo.perception.BBox2D box = 12;`
     * @return Whether the box field is set.
     */
    public fun hasBox(): kotlin.Boolean {
      return _builder.hasBox()
    }
    public val SensorMeasurementKt.Dsl.boxOrNull: apollo.perception.PerceptionObstacleOuterClass.BBox2D?
      get() = _builder.boxOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.perception.PerceptionObstacleOuterClass.SensorMeasurement.copy(block: `apollo.perception`.SensorMeasurementKt.Dsl.() -> kotlin.Unit): apollo.perception.PerceptionObstacleOuterClass.SensorMeasurement =
  `apollo.perception`.SensorMeasurementKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val apollo.perception.PerceptionObstacleOuterClass.SensorMeasurementOrBuilder.positionOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasPosition()) getPosition() else null

public val apollo.perception.PerceptionObstacleOuterClass.SensorMeasurementOrBuilder.velocityOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasVelocity()) getVelocity() else null

public val apollo.perception.PerceptionObstacleOuterClass.SensorMeasurementOrBuilder.boxOrNull: apollo.perception.PerceptionObstacleOuterClass.BBox2D?
  get() = if (hasBox()) getBox() else null

