// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/perception/proto/perception_obstacle.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.perception;

@kotlin.jvm.JvmName("-initializelightStatus")
public inline fun lightStatus(block: apollo.perception.LightStatusKt.Dsl.() -> kotlin.Unit): apollo.perception.PerceptionObstacleOuterClass.LightStatus =
  apollo.perception.LightStatusKt.Dsl._create(apollo.perception.PerceptionObstacleOuterClass.LightStatus.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.perception.LightStatus`
 */
public object LightStatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.perception.PerceptionObstacleOuterClass.LightStatus.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.perception.PerceptionObstacleOuterClass.LightStatus.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.perception.PerceptionObstacleOuterClass.LightStatus = _builder.build()

    /**
     * `optional double brake_visible = 1;`
     */
    public var brakeVisible: kotlin.Double
      @JvmName("getBrakeVisible")
      get() = _builder.getBrakeVisible()
      @JvmName("setBrakeVisible")
      set(value) {
        _builder.setBrakeVisible(value)
      }
    /**
     * `optional double brake_visible = 1;`
     */
    public fun clearBrakeVisible() {
      _builder.clearBrakeVisible()
    }
    /**
     * `optional double brake_visible = 1;`
     * @return Whether the brakeVisible field is set.
     */
    public fun hasBrakeVisible(): kotlin.Boolean {
      return _builder.hasBrakeVisible()
    }

    /**
     * `optional double brake_switch_on = 2;`
     */
    public var brakeSwitchOn: kotlin.Double
      @JvmName("getBrakeSwitchOn")
      get() = _builder.getBrakeSwitchOn()
      @JvmName("setBrakeSwitchOn")
      set(value) {
        _builder.setBrakeSwitchOn(value)
      }
    /**
     * `optional double brake_switch_on = 2;`
     */
    public fun clearBrakeSwitchOn() {
      _builder.clearBrakeSwitchOn()
    }
    /**
     * `optional double brake_switch_on = 2;`
     * @return Whether the brakeSwitchOn field is set.
     */
    public fun hasBrakeSwitchOn(): kotlin.Boolean {
      return _builder.hasBrakeSwitchOn()
    }

    /**
     * `optional double left_turn_visible = 3;`
     */
    public var leftTurnVisible: kotlin.Double
      @JvmName("getLeftTurnVisible")
      get() = _builder.getLeftTurnVisible()
      @JvmName("setLeftTurnVisible")
      set(value) {
        _builder.setLeftTurnVisible(value)
      }
    /**
     * `optional double left_turn_visible = 3;`
     */
    public fun clearLeftTurnVisible() {
      _builder.clearLeftTurnVisible()
    }
    /**
     * `optional double left_turn_visible = 3;`
     * @return Whether the leftTurnVisible field is set.
     */
    public fun hasLeftTurnVisible(): kotlin.Boolean {
      return _builder.hasLeftTurnVisible()
    }

    /**
     * `optional double left_turn_switch_on = 4;`
     */
    public var leftTurnSwitchOn: kotlin.Double
      @JvmName("getLeftTurnSwitchOn")
      get() = _builder.getLeftTurnSwitchOn()
      @JvmName("setLeftTurnSwitchOn")
      set(value) {
        _builder.setLeftTurnSwitchOn(value)
      }
    /**
     * `optional double left_turn_switch_on = 4;`
     */
    public fun clearLeftTurnSwitchOn() {
      _builder.clearLeftTurnSwitchOn()
    }
    /**
     * `optional double left_turn_switch_on = 4;`
     * @return Whether the leftTurnSwitchOn field is set.
     */
    public fun hasLeftTurnSwitchOn(): kotlin.Boolean {
      return _builder.hasLeftTurnSwitchOn()
    }

    /**
     * `optional double right_turn_visible = 5;`
     */
    public var rightTurnVisible: kotlin.Double
      @JvmName("getRightTurnVisible")
      get() = _builder.getRightTurnVisible()
      @JvmName("setRightTurnVisible")
      set(value) {
        _builder.setRightTurnVisible(value)
      }
    /**
     * `optional double right_turn_visible = 5;`
     */
    public fun clearRightTurnVisible() {
      _builder.clearRightTurnVisible()
    }
    /**
     * `optional double right_turn_visible = 5;`
     * @return Whether the rightTurnVisible field is set.
     */
    public fun hasRightTurnVisible(): kotlin.Boolean {
      return _builder.hasRightTurnVisible()
    }

    /**
     * `optional double right_turn_switch_on = 6;`
     */
    public var rightTurnSwitchOn: kotlin.Double
      @JvmName("getRightTurnSwitchOn")
      get() = _builder.getRightTurnSwitchOn()
      @JvmName("setRightTurnSwitchOn")
      set(value) {
        _builder.setRightTurnSwitchOn(value)
      }
    /**
     * `optional double right_turn_switch_on = 6;`
     */
    public fun clearRightTurnSwitchOn() {
      _builder.clearRightTurnSwitchOn()
    }
    /**
     * `optional double right_turn_switch_on = 6;`
     * @return Whether the rightTurnSwitchOn field is set.
     */
    public fun hasRightTurnSwitchOn(): kotlin.Boolean {
      return _builder.hasRightTurnSwitchOn()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.perception.PerceptionObstacleOuterClass.LightStatus.copy(block: `apollo.perception`.LightStatusKt.Dsl.() -> kotlin.Unit): apollo.perception.PerceptionObstacleOuterClass.LightStatus =
  `apollo.perception`.LightStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

