// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/drive_state.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializeengageAdvice")
public inline fun engageAdvice(block: apollo.common.EngageAdviceKt.Dsl.() -> kotlin.Unit): apollo.common.DriveState.EngageAdvice =
  apollo.common.EngageAdviceKt.Dsl._create(apollo.common.DriveState.EngageAdvice.newBuilder()).apply { block() }._build()
/**
 * ```
 * This is the engage advice that published by critical runtime modules.
 * ```
 *
 * Protobuf type `apollo.common.EngageAdvice`
 */
public object EngageAdviceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.DriveState.EngageAdvice.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.DriveState.EngageAdvice.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.DriveState.EngageAdvice = _builder.build()

    /**
     * `optional .apollo.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];`
     */
    public var advice: apollo.common.DriveState.EngageAdvice.Advice
      @JvmName("getAdvice")
      get() = _builder.getAdvice()
      @JvmName("setAdvice")
      set(value) {
        _builder.setAdvice(value)
      }
    /**
     * `optional .apollo.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];`
     */
    public fun clearAdvice() {
      _builder.clearAdvice()
    }
    /**
     * `optional .apollo.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];`
     * @return Whether the advice field is set.
     */
    public fun hasAdvice(): kotlin.Boolean {
      return _builder.hasAdvice()
    }

    /**
     * `optional string reason = 2;`
     */
    public var reason: kotlin.String
      @JvmName("getReason")
      get() = _builder.getReason()
      @JvmName("setReason")
      set(value) {
        _builder.setReason(value)
      }
    /**
     * `optional string reason = 2;`
     */
    public fun clearReason() {
      _builder.clearReason()
    }
    /**
     * `optional string reason = 2;`
     * @return Whether the reason field is set.
     */
    public fun hasReason(): kotlin.Boolean {
      return _builder.hasReason()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.DriveState.EngageAdvice.copy(block: `apollo.common`.EngageAdviceKt.Dsl.() -> kotlin.Unit): apollo.common.DriveState.EngageAdvice =
  `apollo.common`.EngageAdviceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

