// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializepathPoint")
public inline fun pathPoint(block: apollo.common.PathPointKt.Dsl.() -> kotlin.Unit): apollo.common.PncPoint.PathPoint =
  apollo.common.PathPointKt.Dsl._create(apollo.common.PncPoint.PathPoint.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.common.PathPoint`
 */
public object PathPointKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.PncPoint.PathPoint.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.PncPoint.PathPoint.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.PncPoint.PathPoint = _builder.build()

    /**
     * ```
     * coordinates
     * ```
     *
     * `optional double x = 1;`
     */
    public var x: kotlin.Double
      @JvmName("getX")
      get() = _builder.getX()
      @JvmName("setX")
      set(value) {
        _builder.setX(value)
      }
    /**
     * ```
     * coordinates
     * ```
     *
     * `optional double x = 1;`
     */
    public fun clearX() {
      _builder.clearX()
    }
    /**
     * ```
     * coordinates
     * ```
     *
     * `optional double x = 1;`
     * @return Whether the x field is set.
     */
    public fun hasX(): kotlin.Boolean {
      return _builder.hasX()
    }

    /**
     * `optional double y = 2;`
     */
    public var y: kotlin.Double
      @JvmName("getY")
      get() = _builder.getY()
      @JvmName("setY")
      set(value) {
        _builder.setY(value)
      }
    /**
     * `optional double y = 2;`
     */
    public fun clearY() {
      _builder.clearY()
    }
    /**
     * `optional double y = 2;`
     * @return Whether the y field is set.
     */
    public fun hasY(): kotlin.Boolean {
      return _builder.hasY()
    }

    /**
     * `optional double z = 3;`
     */
    public var z: kotlin.Double
      @JvmName("getZ")
      get() = _builder.getZ()
      @JvmName("setZ")
      set(value) {
        _builder.setZ(value)
      }
    /**
     * `optional double z = 3;`
     */
    public fun clearZ() {
      _builder.clearZ()
    }
    /**
     * `optional double z = 3;`
     * @return Whether the z field is set.
     */
    public fun hasZ(): kotlin.Boolean {
      return _builder.hasZ()
    }

    /**
     * ```
     * direction on the x-y plane
     * ```
     *
     * `optional double theta = 4;`
     */
    public var theta: kotlin.Double
      @JvmName("getTheta")
      get() = _builder.getTheta()
      @JvmName("setTheta")
      set(value) {
        _builder.setTheta(value)
      }
    /**
     * ```
     * direction on the x-y plane
     * ```
     *
     * `optional double theta = 4;`
     */
    public fun clearTheta() {
      _builder.clearTheta()
    }
    /**
     * ```
     * direction on the x-y plane
     * ```
     *
     * `optional double theta = 4;`
     * @return Whether the theta field is set.
     */
    public fun hasTheta(): kotlin.Boolean {
      return _builder.hasTheta()
    }

    /**
     * ```
     * curvature on the x-y planning
     * ```
     *
     * `optional double kappa = 5;`
     */
    public var kappa: kotlin.Double
      @JvmName("getKappa")
      get() = _builder.getKappa()
      @JvmName("setKappa")
      set(value) {
        _builder.setKappa(value)
      }
    /**
     * ```
     * curvature on the x-y planning
     * ```
     *
     * `optional double kappa = 5;`
     */
    public fun clearKappa() {
      _builder.clearKappa()
    }
    /**
     * ```
     * curvature on the x-y planning
     * ```
     *
     * `optional double kappa = 5;`
     * @return Whether the kappa field is set.
     */
    public fun hasKappa(): kotlin.Boolean {
      return _builder.hasKappa()
    }

    /**
     * ```
     * accumulated distance from beginning of the path
     * ```
     *
     * `optional double s = 6;`
     */
    public var s: kotlin.Double
      @JvmName("getS")
      get() = _builder.getS()
      @JvmName("setS")
      set(value) {
        _builder.setS(value)
      }
    /**
     * ```
     * accumulated distance from beginning of the path
     * ```
     *
     * `optional double s = 6;`
     */
    public fun clearS() {
      _builder.clearS()
    }
    /**
     * ```
     * accumulated distance from beginning of the path
     * ```
     *
     * `optional double s = 6;`
     * @return Whether the s field is set.
     */
    public fun hasS(): kotlin.Boolean {
      return _builder.hasS()
    }

    /**
     * ```
     * derivative of kappa w.r.t s.
     * ```
     *
     * `optional double dkappa = 7;`
     */
    public var dkappa: kotlin.Double
      @JvmName("getDkappa")
      get() = _builder.getDkappa()
      @JvmName("setDkappa")
      set(value) {
        _builder.setDkappa(value)
      }
    /**
     * ```
     * derivative of kappa w.r.t s.
     * ```
     *
     * `optional double dkappa = 7;`
     */
    public fun clearDkappa() {
      _builder.clearDkappa()
    }
    /**
     * ```
     * derivative of kappa w.r.t s.
     * ```
     *
     * `optional double dkappa = 7;`
     * @return Whether the dkappa field is set.
     */
    public fun hasDkappa(): kotlin.Boolean {
      return _builder.hasDkappa()
    }

    /**
     * ```
     * derivative of derivative of kappa w.r.t s.
     * ```
     *
     * `optional double ddkappa = 8;`
     */
    public var ddkappa: kotlin.Double
      @JvmName("getDdkappa")
      get() = _builder.getDdkappa()
      @JvmName("setDdkappa")
      set(value) {
        _builder.setDdkappa(value)
      }
    /**
     * ```
     * derivative of derivative of kappa w.r.t s.
     * ```
     *
     * `optional double ddkappa = 8;`
     */
    public fun clearDdkappa() {
      _builder.clearDdkappa()
    }
    /**
     * ```
     * derivative of derivative of kappa w.r.t s.
     * ```
     *
     * `optional double ddkappa = 8;`
     * @return Whether the ddkappa field is set.
     */
    public fun hasDdkappa(): kotlin.Boolean {
      return _builder.hasDdkappa()
    }

    /**
     * ```
     * The lane ID where the path point is on
     * ```
     *
     * `optional string lane_id = 9;`
     */
    public var laneId: kotlin.String
      @JvmName("getLaneId")
      get() = _builder.getLaneId()
      @JvmName("setLaneId")
      set(value) {
        _builder.setLaneId(value)
      }
    /**
     * ```
     * The lane ID where the path point is on
     * ```
     *
     * `optional string lane_id = 9;`
     */
    public fun clearLaneId() {
      _builder.clearLaneId()
    }
    /**
     * ```
     * The lane ID where the path point is on
     * ```
     *
     * `optional string lane_id = 9;`
     * @return Whether the laneId field is set.
     */
    public fun hasLaneId(): kotlin.Boolean {
      return _builder.hasLaneId()
    }

    /**
     * ```
     * derivative of x and y w.r.t parametric parameter t in CosThetareferenceline
     * ```
     *
     * `optional double x_derivative = 10;`
     */
    public var xDerivative: kotlin.Double
      @JvmName("getXDerivative")
      get() = _builder.getXDerivative()
      @JvmName("setXDerivative")
      set(value) {
        _builder.setXDerivative(value)
      }
    /**
     * ```
     * derivative of x and y w.r.t parametric parameter t in CosThetareferenceline
     * ```
     *
     * `optional double x_derivative = 10;`
     */
    public fun clearXDerivative() {
      _builder.clearXDerivative()
    }
    /**
     * ```
     * derivative of x and y w.r.t parametric parameter t in CosThetareferenceline
     * ```
     *
     * `optional double x_derivative = 10;`
     * @return Whether the xDerivative field is set.
     */
    public fun hasXDerivative(): kotlin.Boolean {
      return _builder.hasXDerivative()
    }

    /**
     * `optional double y_derivative = 11;`
     */
    public var yDerivative: kotlin.Double
      @JvmName("getYDerivative")
      get() = _builder.getYDerivative()
      @JvmName("setYDerivative")
      set(value) {
        _builder.setYDerivative(value)
      }
    /**
     * `optional double y_derivative = 11;`
     */
    public fun clearYDerivative() {
      _builder.clearYDerivative()
    }
    /**
     * `optional double y_derivative = 11;`
     * @return Whether the yDerivative field is set.
     */
    public fun hasYDerivative(): kotlin.Boolean {
      return _builder.hasYDerivative()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.PncPoint.PathPoint.copy(block: `apollo.common`.PathPointKt.Dsl.() -> kotlin.Unit): apollo.common.PncPoint.PathPoint =
  `apollo.common`.PathPointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

