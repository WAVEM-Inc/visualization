// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/geometry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializepoint2D")
public inline fun point2D(block: apollo.common.Point2DKt.Dsl.() -> kotlin.Unit): apollo.common.Geometry.Point2D =
  apollo.common.Point2DKt.Dsl._create(apollo.common.Geometry.Point2D.newBuilder()).apply { block() }._build()
/**
 * ```
 * A general 2D point. Its meaning and units depend on context, and must be
 * explained in comments.
 * ```
 *
 * Protobuf type `apollo.common.Point2D`
 */
public object Point2DKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.Geometry.Point2D.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.Geometry.Point2D.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.Geometry.Point2D = _builder.build()

    /**
     * `optional double x = 1 [default = nan];`
     */
    public var x: kotlin.Double
      @JvmName("getX")
      get() = _builder.getX()
      @JvmName("setX")
      set(value) {
        _builder.setX(value)
      }
    /**
     * `optional double x = 1 [default = nan];`
     */
    public fun clearX() {
      _builder.clearX()
    }
    /**
     * `optional double x = 1 [default = nan];`
     * @return Whether the x field is set.
     */
    public fun hasX(): kotlin.Boolean {
      return _builder.hasX()
    }

    /**
     * `optional double y = 2 [default = nan];`
     */
    public var y: kotlin.Double
      @JvmName("getY")
      get() = _builder.getY()
      @JvmName("setY")
      set(value) {
        _builder.setY(value)
      }
    /**
     * `optional double y = 2 [default = nan];`
     */
    public fun clearY() {
      _builder.clearY()
    }
    /**
     * `optional double y = 2 [default = nan];`
     * @return Whether the y field is set.
     */
    public fun hasY(): kotlin.Boolean {
      return _builder.hasY()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.Geometry.Point2D.copy(block: `apollo.common`.Point2DKt.Dsl.() -> kotlin.Unit): apollo.common.Geometry.Point2D =
  `apollo.common`.Point2DKt.Dsl._create(this.toBuilder()).apply { block() }._build()

