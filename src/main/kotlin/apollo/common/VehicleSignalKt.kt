// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/vehicle_signal.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializevehicleSignal")
public inline fun vehicleSignal(block: apollo.common.VehicleSignalKt.Dsl.() -> kotlin.Unit): apollo.common.VehicleSignalOuterClass.VehicleSignal =
  apollo.common.VehicleSignalKt.Dsl._create(apollo.common.VehicleSignalOuterClass.VehicleSignal.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.common.VehicleSignal`
 */
public object VehicleSignalKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.VehicleSignalOuterClass.VehicleSignal.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.VehicleSignalOuterClass.VehicleSignal.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.VehicleSignalOuterClass.VehicleSignal = _builder.build()

    /**
     * `optional .apollo.common.VehicleSignal.TurnSignal turn_signal = 1;`
     */
    public var turnSignal: apollo.common.VehicleSignalOuterClass.VehicleSignal.TurnSignal
      @JvmName("getTurnSignal")
      get() = _builder.getTurnSignal()
      @JvmName("setTurnSignal")
      set(value) {
        _builder.setTurnSignal(value)
      }
    /**
     * `optional .apollo.common.VehicleSignal.TurnSignal turn_signal = 1;`
     */
    public fun clearTurnSignal() {
      _builder.clearTurnSignal()
    }
    /**
     * `optional .apollo.common.VehicleSignal.TurnSignal turn_signal = 1;`
     * @return Whether the turnSignal field is set.
     */
    public fun hasTurnSignal(): kotlin.Boolean {
      return _builder.hasTurnSignal()
    }

    /**
     * ```
     * lights enable command
     * ```
     *
     * `optional bool high_beam = 2;`
     */
    public var highBeam: kotlin.Boolean
      @JvmName("getHighBeam")
      get() = _builder.getHighBeam()
      @JvmName("setHighBeam")
      set(value) {
        _builder.setHighBeam(value)
      }
    /**
     * ```
     * lights enable command
     * ```
     *
     * `optional bool high_beam = 2;`
     */
    public fun clearHighBeam() {
      _builder.clearHighBeam()
    }
    /**
     * ```
     * lights enable command
     * ```
     *
     * `optional bool high_beam = 2;`
     * @return Whether the highBeam field is set.
     */
    public fun hasHighBeam(): kotlin.Boolean {
      return _builder.hasHighBeam()
    }

    /**
     * `optional bool low_beam = 3;`
     */
    public var lowBeam: kotlin.Boolean
      @JvmName("getLowBeam")
      get() = _builder.getLowBeam()
      @JvmName("setLowBeam")
      set(value) {
        _builder.setLowBeam(value)
      }
    /**
     * `optional bool low_beam = 3;`
     */
    public fun clearLowBeam() {
      _builder.clearLowBeam()
    }
    /**
     * `optional bool low_beam = 3;`
     * @return Whether the lowBeam field is set.
     */
    public fun hasLowBeam(): kotlin.Boolean {
      return _builder.hasLowBeam()
    }

    /**
     * `optional bool horn = 4;`
     */
    public var horn: kotlin.Boolean
      @JvmName("getHorn")
      get() = _builder.getHorn()
      @JvmName("setHorn")
      set(value) {
        _builder.setHorn(value)
      }
    /**
     * `optional bool horn = 4;`
     */
    public fun clearHorn() {
      _builder.clearHorn()
    }
    /**
     * `optional bool horn = 4;`
     * @return Whether the horn field is set.
     */
    public fun hasHorn(): kotlin.Boolean {
      return _builder.hasHorn()
    }

    /**
     * `optional bool emergency_light = 5;`
     */
    public var emergencyLight: kotlin.Boolean
      @JvmName("getEmergencyLight")
      get() = _builder.getEmergencyLight()
      @JvmName("setEmergencyLight")
      set(value) {
        _builder.setEmergencyLight(value)
      }
    /**
     * `optional bool emergency_light = 5;`
     */
    public fun clearEmergencyLight() {
      _builder.clearEmergencyLight()
    }
    /**
     * `optional bool emergency_light = 5;`
     * @return Whether the emergencyLight field is set.
     */
    public fun hasEmergencyLight(): kotlin.Boolean {
      return _builder.hasEmergencyLight()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.VehicleSignalOuterClass.VehicleSignal.copy(block: `apollo.common`.VehicleSignalKt.Dsl.() -> kotlin.Unit): apollo.common.VehicleSignalOuterClass.VehicleSignal =
  `apollo.common`.VehicleSignalKt.Dsl._create(this.toBuilder()).apply { block() }._build()

