// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/drive_event.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializedriveEvent")
public inline fun driveEvent(block: apollo.common.DriveEventKt.Dsl.() -> kotlin.Unit): apollo.common.DriveEventOuterClass.DriveEvent =
  apollo.common.DriveEventKt.Dsl._create(apollo.common.DriveEventOuterClass.DriveEvent.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.common.DriveEvent`
 */
public object DriveEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.DriveEventOuterClass.DriveEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.DriveEventOuterClass.DriveEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.DriveEventOuterClass.DriveEvent = _builder.build()

    /**
     * `optional .apollo.common.Header header = 1;`
     */
    public var header: apollo.common.HeaderOuterClass.Header
      @JvmName("getHeader")
      get() = _builder.getHeader()
      @JvmName("setHeader")
      set(value) {
        _builder.setHeader(value)
      }
    /**
     * `optional .apollo.common.Header header = 1;`
     */
    public fun clearHeader() {
      _builder.clearHeader()
    }
    /**
     * `optional .apollo.common.Header header = 1;`
     * @return Whether the header field is set.
     */
    public fun hasHeader(): kotlin.Boolean {
      return _builder.hasHeader()
    }
    public val DriveEventKt.Dsl.headerOrNull: apollo.common.HeaderOuterClass.Header?
      get() = _builder.headerOrNull

    /**
     * `optional string event = 2;`
     */
    public var event: kotlin.String
      @JvmName("getEvent")
      get() = _builder.getEvent()
      @JvmName("setEvent")
      set(value) {
        _builder.setEvent(value)
      }
    /**
     * `optional string event = 2;`
     */
    public fun clearEvent() {
      _builder.clearEvent()
    }
    /**
     * `optional string event = 2;`
     * @return Whether the event field is set.
     */
    public fun hasEvent(): kotlin.Boolean {
      return _builder.hasEvent()
    }

    /**
     * `optional .apollo.localization.Pose location = 3;`
     */
    public var location: apollo.localization.PoseOuterClass.Pose
      @JvmName("getLocation")
      get() = _builder.getLocation()
      @JvmName("setLocation")
      set(value) {
        _builder.setLocation(value)
      }
    /**
     * `optional .apollo.localization.Pose location = 3;`
     */
    public fun clearLocation() {
      _builder.clearLocation()
    }
    /**
     * `optional .apollo.localization.Pose location = 3;`
     * @return Whether the location field is set.
     */
    public fun hasLocation(): kotlin.Boolean {
      return _builder.hasLocation()
    }
    public val DriveEventKt.Dsl.locationOrNull: apollo.localization.PoseOuterClass.Pose?
      get() = _builder.locationOrNull

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class TypeProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .apollo.common.DriveEvent.Type type = 4;`
     */
    public val type: com.google.protobuf.kotlin.DslList<apollo.common.DriveEventOuterClass.DriveEvent.Type, TypeProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getTypeList()
      )
    /**
     * `repeated .apollo.common.DriveEvent.Type type = 4;`
     * @param value The type to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addType")
    public fun com.google.protobuf.kotlin.DslList<apollo.common.DriveEventOuterClass.DriveEvent.Type, TypeProxy>.add(value: apollo.common.DriveEventOuterClass.DriveEvent.Type) {
      _builder.addType(value)
    }/**
     * `repeated .apollo.common.DriveEvent.Type type = 4;`
     * @param value The type to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignType")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<apollo.common.DriveEventOuterClass.DriveEvent.Type, TypeProxy>.plusAssign(value: apollo.common.DriveEventOuterClass.DriveEvent.Type) {
      add(value)
    }/**
     * `repeated .apollo.common.DriveEvent.Type type = 4;`
     * @param values The type to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllType")
    public fun com.google.protobuf.kotlin.DslList<apollo.common.DriveEventOuterClass.DriveEvent.Type, TypeProxy>.addAll(values: kotlin.collections.Iterable<apollo.common.DriveEventOuterClass.DriveEvent.Type>) {
      _builder.addAllType(values)
    }/**
     * `repeated .apollo.common.DriveEvent.Type type = 4;`
     * @param values The type to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllType")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<apollo.common.DriveEventOuterClass.DriveEvent.Type, TypeProxy>.plusAssign(values: kotlin.collections.Iterable<apollo.common.DriveEventOuterClass.DriveEvent.Type>) {
      addAll(values)
    }/**
     * `repeated .apollo.common.DriveEvent.Type type = 4;`
     * @param index The index to set the value at.
     * @param value The type to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setType")
    public operator fun com.google.protobuf.kotlin.DslList<apollo.common.DriveEventOuterClass.DriveEvent.Type, TypeProxy>.set(index: kotlin.Int, value: apollo.common.DriveEventOuterClass.DriveEvent.Type) {
      _builder.setType(index, value)
    }/**
     * `repeated .apollo.common.DriveEvent.Type type = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearType")
    public fun com.google.protobuf.kotlin.DslList<apollo.common.DriveEventOuterClass.DriveEvent.Type, TypeProxy>.clear() {
      _builder.clearType()
    }
    /**
     * `optional bool is_reportable = 5;`
     */
    public var isReportable: kotlin.Boolean
      @JvmName("getIsReportable")
      get() = _builder.getIsReportable()
      @JvmName("setIsReportable")
      set(value) {
        _builder.setIsReportable(value)
      }
    /**
     * `optional bool is_reportable = 5;`
     */
    public fun clearIsReportable() {
      _builder.clearIsReportable()
    }
    /**
     * `optional bool is_reportable = 5;`
     * @return Whether the isReportable field is set.
     */
    public fun hasIsReportable(): kotlin.Boolean {
      return _builder.hasIsReportable()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.DriveEventOuterClass.DriveEvent.copy(block: `apollo.common`.DriveEventKt.Dsl.() -> kotlin.Unit): apollo.common.DriveEventOuterClass.DriveEvent =
  `apollo.common`.DriveEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val apollo.common.DriveEventOuterClass.DriveEventOrBuilder.headerOrNull: apollo.common.HeaderOuterClass.Header?
  get() = if (hasHeader()) getHeader() else null

public val apollo.common.DriveEventOuterClass.DriveEventOrBuilder.locationOrNull: apollo.localization.PoseOuterClass.Pose?
  get() = if (hasLocation()) getLocation() else null

