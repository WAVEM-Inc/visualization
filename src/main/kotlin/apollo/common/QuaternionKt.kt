// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/geometry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializequaternion")
public inline fun quaternion(block: apollo.common.QuaternionKt.Dsl.() -> kotlin.Unit): apollo.common.Geometry.Quaternion =
  apollo.common.QuaternionKt.Dsl._create(apollo.common.Geometry.Quaternion.newBuilder()).apply { block() }._build()
/**
 * ```
 * A unit quaternion that represents a spatial rotation. See the link below for
 * details.
 * https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation
 * The scalar part qw can be omitted. In this case, qw should be calculated by
 * qw = sqrt(1 - qx * qx - qy * qy - qz * qz).
 * ```
 *
 * Protobuf type `apollo.common.Quaternion`
 */
public object QuaternionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.Geometry.Quaternion.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.Geometry.Quaternion.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.Geometry.Quaternion = _builder.build()

    /**
     * `optional double qx = 1 [default = nan];`
     */
    public var qx: kotlin.Double
      @JvmName("getQx")
      get() = _builder.getQx()
      @JvmName("setQx")
      set(value) {
        _builder.setQx(value)
      }
    /**
     * `optional double qx = 1 [default = nan];`
     */
    public fun clearQx() {
      _builder.clearQx()
    }
    /**
     * `optional double qx = 1 [default = nan];`
     * @return Whether the qx field is set.
     */
    public fun hasQx(): kotlin.Boolean {
      return _builder.hasQx()
    }

    /**
     * `optional double qy = 2 [default = nan];`
     */
    public var qy: kotlin.Double
      @JvmName("getQy")
      get() = _builder.getQy()
      @JvmName("setQy")
      set(value) {
        _builder.setQy(value)
      }
    /**
     * `optional double qy = 2 [default = nan];`
     */
    public fun clearQy() {
      _builder.clearQy()
    }
    /**
     * `optional double qy = 2 [default = nan];`
     * @return Whether the qy field is set.
     */
    public fun hasQy(): kotlin.Boolean {
      return _builder.hasQy()
    }

    /**
     * `optional double qz = 3 [default = nan];`
     */
    public var qz: kotlin.Double
      @JvmName("getQz")
      get() = _builder.getQz()
      @JvmName("setQz")
      set(value) {
        _builder.setQz(value)
      }
    /**
     * `optional double qz = 3 [default = nan];`
     */
    public fun clearQz() {
      _builder.clearQz()
    }
    /**
     * `optional double qz = 3 [default = nan];`
     * @return Whether the qz field is set.
     */
    public fun hasQz(): kotlin.Boolean {
      return _builder.hasQz()
    }

    /**
     * `optional double qw = 4 [default = nan];`
     */
    public var qw: kotlin.Double
      @JvmName("getQw")
      get() = _builder.getQw()
      @JvmName("setQw")
      set(value) {
        _builder.setQw(value)
      }
    /**
     * `optional double qw = 4 [default = nan];`
     */
    public fun clearQw() {
      _builder.clearQw()
    }
    /**
     * `optional double qw = 4 [default = nan];`
     * @return Whether the qw field is set.
     */
    public fun hasQw(): kotlin.Boolean {
      return _builder.hasQw()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.Geometry.Quaternion.copy(block: `apollo.common`.QuaternionKt.Dsl.() -> kotlin.Unit): apollo.common.Geometry.Quaternion =
  `apollo.common`.QuaternionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

