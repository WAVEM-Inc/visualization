// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/geometry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializepointLLH")
public inline fun pointLLH(block: apollo.common.PointLLHKt.Dsl.() -> kotlin.Unit): apollo.common.Geometry.PointLLH =
  apollo.common.PointLLHKt.Dsl._create(apollo.common.Geometry.PointLLH.newBuilder()).apply { block() }._build()
/**
 * ```
 * A point in the global reference frame. Similar to PointENU, PointLLH allows
 * omitting the height field for representing a 2D location.
 * ```
 *
 * Protobuf type `apollo.common.PointLLH`
 */
public object PointLLHKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.Geometry.PointLLH.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.Geometry.PointLLH.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.Geometry.PointLLH = _builder.build()

    /**
     * ```
     * Longitude in degrees, ranging from -180 to 180.
     * ```
     *
     * `optional double lon = 1 [default = nan];`
     */
    public var lon: kotlin.Double
      @JvmName("getLon")
      get() = _builder.getLon()
      @JvmName("setLon")
      set(value) {
        _builder.setLon(value)
      }
    /**
     * ```
     * Longitude in degrees, ranging from -180 to 180.
     * ```
     *
     * `optional double lon = 1 [default = nan];`
     */
    public fun clearLon() {
      _builder.clearLon()
    }
    /**
     * ```
     * Longitude in degrees, ranging from -180 to 180.
     * ```
     *
     * `optional double lon = 1 [default = nan];`
     * @return Whether the lon field is set.
     */
    public fun hasLon(): kotlin.Boolean {
      return _builder.hasLon()
    }

    /**
     * ```
     * Latitude in degrees, ranging from -90 to 90.
     * ```
     *
     * `optional double lat = 2 [default = nan];`
     */
    public var lat: kotlin.Double
      @JvmName("getLat")
      get() = _builder.getLat()
      @JvmName("setLat")
      set(value) {
        _builder.setLat(value)
      }
    /**
     * ```
     * Latitude in degrees, ranging from -90 to 90.
     * ```
     *
     * `optional double lat = 2 [default = nan];`
     */
    public fun clearLat() {
      _builder.clearLat()
    }
    /**
     * ```
     * Latitude in degrees, ranging from -90 to 90.
     * ```
     *
     * `optional double lat = 2 [default = nan];`
     * @return Whether the lat field is set.
     */
    public fun hasLat(): kotlin.Boolean {
      return _builder.hasLat()
    }

    /**
     * ```
     * WGS-84 ellipsoid height in meters.
     * ```
     *
     * `optional double height = 3 [default = 0];`
     */
    public var height: kotlin.Double
      @JvmName("getHeight")
      get() = _builder.getHeight()
      @JvmName("setHeight")
      set(value) {
        _builder.setHeight(value)
      }
    /**
     * ```
     * WGS-84 ellipsoid height in meters.
     * ```
     *
     * `optional double height = 3 [default = 0];`
     */
    public fun clearHeight() {
      _builder.clearHeight()
    }
    /**
     * ```
     * WGS-84 ellipsoid height in meters.
     * ```
     *
     * `optional double height = 3 [default = 0];`
     * @return Whether the height field is set.
     */
    public fun hasHeight(): kotlin.Boolean {
      return _builder.hasHeight()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.Geometry.PointLLH.copy(block: `apollo.common`.PointLLHKt.Dsl.() -> kotlin.Unit): apollo.common.Geometry.PointLLH =
  `apollo.common`.PointLLHKt.Dsl._create(this.toBuilder()).apply { block() }._build()

