// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializespeedPoint")
public inline fun speedPoint(block: apollo.common.SpeedPointKt.Dsl.() -> kotlin.Unit): apollo.common.PncPoint.SpeedPoint =
  apollo.common.SpeedPointKt.Dsl._create(apollo.common.PncPoint.SpeedPoint.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.common.SpeedPoint`
 */
public object SpeedPointKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.PncPoint.SpeedPoint.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.PncPoint.SpeedPoint.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.PncPoint.SpeedPoint = _builder.build()

    /**
     * `optional double s = 1;`
     */
    public var s: kotlin.Double
      @JvmName("getS")
      get() = _builder.getS()
      @JvmName("setS")
      set(value) {
        _builder.setS(value)
      }
    /**
     * `optional double s = 1;`
     */
    public fun clearS() {
      _builder.clearS()
    }
    /**
     * `optional double s = 1;`
     * @return Whether the s field is set.
     */
    public fun hasS(): kotlin.Boolean {
      return _builder.hasS()
    }

    /**
     * `optional double t = 2;`
     */
    public var t: kotlin.Double
      @JvmName("getT")
      get() = _builder.getT()
      @JvmName("setT")
      set(value) {
        _builder.setT(value)
      }
    /**
     * `optional double t = 2;`
     */
    public fun clearT() {
      _builder.clearT()
    }
    /**
     * `optional double t = 2;`
     * @return Whether the t field is set.
     */
    public fun hasT(): kotlin.Boolean {
      return _builder.hasT()
    }

    /**
     * ```
     * speed (m/s)
     * ```
     *
     * `optional double v = 3;`
     */
    public var v: kotlin.Double
      @JvmName("getV")
      get() = _builder.getV()
      @JvmName("setV")
      set(value) {
        _builder.setV(value)
      }
    /**
     * ```
     * speed (m/s)
     * ```
     *
     * `optional double v = 3;`
     */
    public fun clearV() {
      _builder.clearV()
    }
    /**
     * ```
     * speed (m/s)
     * ```
     *
     * `optional double v = 3;`
     * @return Whether the v field is set.
     */
    public fun hasV(): kotlin.Boolean {
      return _builder.hasV()
    }

    /**
     * ```
     * acceleration (m/s^2)
     * ```
     *
     * `optional double a = 4;`
     */
    public var a: kotlin.Double
      @JvmName("getA")
      get() = _builder.getA()
      @JvmName("setA")
      set(value) {
        _builder.setA(value)
      }
    /**
     * ```
     * acceleration (m/s^2)
     * ```
     *
     * `optional double a = 4;`
     */
    public fun clearA() {
      _builder.clearA()
    }
    /**
     * ```
     * acceleration (m/s^2)
     * ```
     *
     * `optional double a = 4;`
     * @return Whether the a field is set.
     */
    public fun hasA(): kotlin.Boolean {
      return _builder.hasA()
    }

    /**
     * ```
     * jerk (m/s^3)
     * ```
     *
     * `optional double da = 5;`
     */
    public var da: kotlin.Double
      @JvmName("getDa")
      get() = _builder.getDa()
      @JvmName("setDa")
      set(value) {
        _builder.setDa(value)
      }
    /**
     * ```
     * jerk (m/s^3)
     * ```
     *
     * `optional double da = 5;`
     */
    public fun clearDa() {
      _builder.clearDa()
    }
    /**
     * ```
     * jerk (m/s^3)
     * ```
     *
     * `optional double da = 5;`
     * @return Whether the da field is set.
     */
    public fun hasDa(): kotlin.Boolean {
      return _builder.hasDa()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.PncPoint.SpeedPoint.copy(block: `apollo.common`.SpeedPointKt.Dsl.() -> kotlin.Unit): apollo.common.PncPoint.SpeedPoint =
  `apollo.common`.SpeedPointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

