// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializetrajectoryPoint")
public inline fun trajectoryPoint(block: apollo.common.TrajectoryPointKt.Dsl.() -> kotlin.Unit): apollo.common.PncPoint.TrajectoryPoint =
  apollo.common.TrajectoryPointKt.Dsl._create(apollo.common.PncPoint.TrajectoryPoint.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.common.TrajectoryPoint`
 */
public object TrajectoryPointKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.PncPoint.TrajectoryPoint.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.PncPoint.TrajectoryPoint.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.PncPoint.TrajectoryPoint = _builder.build()

    /**
     * ```
     * path point
     * ```
     *
     * `optional .apollo.common.PathPoint path_point = 1;`
     */
    public var pathPoint: apollo.common.PncPoint.PathPoint
      @JvmName("getPathPoint")
      get() = _builder.getPathPoint()
      @JvmName("setPathPoint")
      set(value) {
        _builder.setPathPoint(value)
      }
    /**
     * ```
     * path point
     * ```
     *
     * `optional .apollo.common.PathPoint path_point = 1;`
     */
    public fun clearPathPoint() {
      _builder.clearPathPoint()
    }
    /**
     * ```
     * path point
     * ```
     *
     * `optional .apollo.common.PathPoint path_point = 1;`
     * @return Whether the pathPoint field is set.
     */
    public fun hasPathPoint(): kotlin.Boolean {
      return _builder.hasPathPoint()
    }
    public val TrajectoryPointKt.Dsl.pathPointOrNull: apollo.common.PncPoint.PathPoint?
      get() = _builder.pathPointOrNull

    /**
     * ```
     * linear velocity
     * ```
     *
     * `optional double v = 2;`
     */
    public var v: kotlin.Double
      @JvmName("getV")
      get() = _builder.getV()
      @JvmName("setV")
      set(value) {
        _builder.setV(value)
      }
    /**
     * ```
     * linear velocity
     * ```
     *
     * `optional double v = 2;`
     */
    public fun clearV() {
      _builder.clearV()
    }
    /**
     * ```
     * linear velocity
     * ```
     *
     * `optional double v = 2;`
     * @return Whether the v field is set.
     */
    public fun hasV(): kotlin.Boolean {
      return _builder.hasV()
    }

    /**
     * ```
     * linear acceleration
     * ```
     *
     * `optional double a = 3;`
     */
    public var a: kotlin.Double
      @JvmName("getA")
      get() = _builder.getA()
      @JvmName("setA")
      set(value) {
        _builder.setA(value)
      }
    /**
     * ```
     * linear acceleration
     * ```
     *
     * `optional double a = 3;`
     */
    public fun clearA() {
      _builder.clearA()
    }
    /**
     * ```
     * linear acceleration
     * ```
     *
     * `optional double a = 3;`
     * @return Whether the a field is set.
     */
    public fun hasA(): kotlin.Boolean {
      return _builder.hasA()
    }

    /**
     * ```
     * relative time from beginning of the trajectory
     * ```
     *
     * `optional double relative_time = 4;`
     */
    public var relativeTime: kotlin.Double
      @JvmName("getRelativeTime")
      get() = _builder.getRelativeTime()
      @JvmName("setRelativeTime")
      set(value) {
        _builder.setRelativeTime(value)
      }
    /**
     * ```
     * relative time from beginning of the trajectory
     * ```
     *
     * `optional double relative_time = 4;`
     */
    public fun clearRelativeTime() {
      _builder.clearRelativeTime()
    }
    /**
     * ```
     * relative time from beginning of the trajectory
     * ```
     *
     * `optional double relative_time = 4;`
     * @return Whether the relativeTime field is set.
     */
    public fun hasRelativeTime(): kotlin.Boolean {
      return _builder.hasRelativeTime()
    }

    /**
     * ```
     * longitudinal jerk
     * ```
     *
     * `optional double da = 5;`
     */
    public var da: kotlin.Double
      @JvmName("getDa")
      get() = _builder.getDa()
      @JvmName("setDa")
      set(value) {
        _builder.setDa(value)
      }
    /**
     * ```
     * longitudinal jerk
     * ```
     *
     * `optional double da = 5;`
     */
    public fun clearDa() {
      _builder.clearDa()
    }
    /**
     * ```
     * longitudinal jerk
     * ```
     *
     * `optional double da = 5;`
     * @return Whether the da field is set.
     */
    public fun hasDa(): kotlin.Boolean {
      return _builder.hasDa()
    }

    /**
     * ```
     * The angle between vehicle front wheel and vehicle longitudinal axis
     * ```
     *
     * `optional double steer = 6;`
     */
    public var steer: kotlin.Double
      @JvmName("getSteer")
      get() = _builder.getSteer()
      @JvmName("setSteer")
      set(value) {
        _builder.setSteer(value)
      }
    /**
     * ```
     * The angle between vehicle front wheel and vehicle longitudinal axis
     * ```
     *
     * `optional double steer = 6;`
     */
    public fun clearSteer() {
      _builder.clearSteer()
    }
    /**
     * ```
     * The angle between vehicle front wheel and vehicle longitudinal axis
     * ```
     *
     * `optional double steer = 6;`
     * @return Whether the steer field is set.
     */
    public fun hasSteer(): kotlin.Boolean {
      return _builder.hasSteer()
    }

    /**
     * ```
     * Gaussian probability information
     * ```
     *
     * `optional .apollo.common.GaussianInfo gaussian_info = 7;`
     */
    public var gaussianInfo: apollo.common.PncPoint.GaussianInfo
      @JvmName("getGaussianInfo")
      get() = _builder.getGaussianInfo()
      @JvmName("setGaussianInfo")
      set(value) {
        _builder.setGaussianInfo(value)
      }
    /**
     * ```
     * Gaussian probability information
     * ```
     *
     * `optional .apollo.common.GaussianInfo gaussian_info = 7;`
     */
    public fun clearGaussianInfo() {
      _builder.clearGaussianInfo()
    }
    /**
     * ```
     * Gaussian probability information
     * ```
     *
     * `optional .apollo.common.GaussianInfo gaussian_info = 7;`
     * @return Whether the gaussianInfo field is set.
     */
    public fun hasGaussianInfo(): kotlin.Boolean {
      return _builder.hasGaussianInfo()
    }
    public val TrajectoryPointKt.Dsl.gaussianInfoOrNull: apollo.common.PncPoint.GaussianInfo?
      get() = _builder.gaussianInfoOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.PncPoint.TrajectoryPoint.copy(block: `apollo.common`.TrajectoryPointKt.Dsl.() -> kotlin.Unit): apollo.common.PncPoint.TrajectoryPoint =
  `apollo.common`.TrajectoryPointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val apollo.common.PncPoint.TrajectoryPointOrBuilder.pathPointOrNull: apollo.common.PncPoint.PathPoint?
  get() = if (hasPathPoint()) getPathPoint() else null

public val apollo.common.PncPoint.TrajectoryPointOrBuilder.gaussianInfoOrNull: apollo.common.PncPoint.GaussianInfo?
  get() = if (hasGaussianInfo()) getGaussianInfo() else null

