// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/common/proto/pnc_point.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.common;

@kotlin.jvm.JvmName("-initializegaussianInfo")
public inline fun gaussianInfo(block: apollo.common.GaussianInfoKt.Dsl.() -> kotlin.Unit): apollo.common.PncPoint.GaussianInfo =
  apollo.common.GaussianInfoKt.Dsl._create(apollo.common.PncPoint.GaussianInfo.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.common.GaussianInfo`
 */
public object GaussianInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.common.PncPoint.GaussianInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.common.PncPoint.GaussianInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.common.PncPoint.GaussianInfo = _builder.build()

    /**
     * ```
     * Information of gaussian distribution
     * ```
     *
     * `optional double sigma_x = 1;`
     */
    public var sigmaX: kotlin.Double
      @JvmName("getSigmaX")
      get() = _builder.getSigmaX()
      @JvmName("setSigmaX")
      set(value) {
        _builder.setSigmaX(value)
      }
    /**
     * ```
     * Information of gaussian distribution
     * ```
     *
     * `optional double sigma_x = 1;`
     */
    public fun clearSigmaX() {
      _builder.clearSigmaX()
    }
    /**
     * ```
     * Information of gaussian distribution
     * ```
     *
     * `optional double sigma_x = 1;`
     * @return Whether the sigmaX field is set.
     */
    public fun hasSigmaX(): kotlin.Boolean {
      return _builder.hasSigmaX()
    }

    /**
     * `optional double sigma_y = 2;`
     */
    public var sigmaY: kotlin.Double
      @JvmName("getSigmaY")
      get() = _builder.getSigmaY()
      @JvmName("setSigmaY")
      set(value) {
        _builder.setSigmaY(value)
      }
    /**
     * `optional double sigma_y = 2;`
     */
    public fun clearSigmaY() {
      _builder.clearSigmaY()
    }
    /**
     * `optional double sigma_y = 2;`
     * @return Whether the sigmaY field is set.
     */
    public fun hasSigmaY(): kotlin.Boolean {
      return _builder.hasSigmaY()
    }

    /**
     * `optional double correlation = 3;`
     */
    public var correlation: kotlin.Double
      @JvmName("getCorrelation")
      get() = _builder.getCorrelation()
      @JvmName("setCorrelation")
      set(value) {
        _builder.setCorrelation(value)
      }
    /**
     * `optional double correlation = 3;`
     */
    public fun clearCorrelation() {
      _builder.clearCorrelation()
    }
    /**
     * `optional double correlation = 3;`
     * @return Whether the correlation field is set.
     */
    public fun hasCorrelation(): kotlin.Boolean {
      return _builder.hasCorrelation()
    }

    /**
     * ```
     * Information of representative uncertainty area
     * ```
     *
     * `optional double area_probability = 4;`
     */
    public var areaProbability: kotlin.Double
      @JvmName("getAreaProbability")
      get() = _builder.getAreaProbability()
      @JvmName("setAreaProbability")
      set(value) {
        _builder.setAreaProbability(value)
      }
    /**
     * ```
     * Information of representative uncertainty area
     * ```
     *
     * `optional double area_probability = 4;`
     */
    public fun clearAreaProbability() {
      _builder.clearAreaProbability()
    }
    /**
     * ```
     * Information of representative uncertainty area
     * ```
     *
     * `optional double area_probability = 4;`
     * @return Whether the areaProbability field is set.
     */
    public fun hasAreaProbability(): kotlin.Boolean {
      return _builder.hasAreaProbability()
    }

    /**
     * `optional double ellipse_a = 5;`
     */
    public var ellipseA: kotlin.Double
      @JvmName("getEllipseA")
      get() = _builder.getEllipseA()
      @JvmName("setEllipseA")
      set(value) {
        _builder.setEllipseA(value)
      }
    /**
     * `optional double ellipse_a = 5;`
     */
    public fun clearEllipseA() {
      _builder.clearEllipseA()
    }
    /**
     * `optional double ellipse_a = 5;`
     * @return Whether the ellipseA field is set.
     */
    public fun hasEllipseA(): kotlin.Boolean {
      return _builder.hasEllipseA()
    }

    /**
     * `optional double ellipse_b = 6;`
     */
    public var ellipseB: kotlin.Double
      @JvmName("getEllipseB")
      get() = _builder.getEllipseB()
      @JvmName("setEllipseB")
      set(value) {
        _builder.setEllipseB(value)
      }
    /**
     * `optional double ellipse_b = 6;`
     */
    public fun clearEllipseB() {
      _builder.clearEllipseB()
    }
    /**
     * `optional double ellipse_b = 6;`
     * @return Whether the ellipseB field is set.
     */
    public fun hasEllipseB(): kotlin.Boolean {
      return _builder.hasEllipseB()
    }

    /**
     * `optional double theta_a = 7;`
     */
    public var thetaA: kotlin.Double
      @JvmName("getThetaA")
      get() = _builder.getThetaA()
      @JvmName("setThetaA")
      set(value) {
        _builder.setThetaA(value)
      }
    /**
     * `optional double theta_a = 7;`
     */
    public fun clearThetaA() {
      _builder.clearThetaA()
    }
    /**
     * `optional double theta_a = 7;`
     * @return Whether the thetaA field is set.
     */
    public fun hasThetaA(): kotlin.Boolean {
      return _builder.hasThetaA()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.common.PncPoint.GaussianInfo.copy(block: `apollo.common`.GaussianInfoKt.Dsl.() -> kotlin.Unit): apollo.common.PncPoint.GaussianInfo =
  `apollo.common`.GaussianInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

