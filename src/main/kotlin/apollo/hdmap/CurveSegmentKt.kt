// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/map/proto/map_geometry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.hdmap;

@kotlin.jvm.JvmName("-initializecurveSegment")
public inline fun curveSegment(block: apollo.hdmap.CurveSegmentKt.Dsl.() -> kotlin.Unit): apollo.hdmap.MapGeometry.CurveSegment =
  apollo.hdmap.CurveSegmentKt.Dsl._create(apollo.hdmap.MapGeometry.CurveSegment.newBuilder()).apply { block() }._build()
/**
 * ```
 * Generalization of a line.
 * ```
 *
 * Protobuf type `apollo.hdmap.CurveSegment`
 */
public object CurveSegmentKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.hdmap.MapGeometry.CurveSegment.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.hdmap.MapGeometry.CurveSegment.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.hdmap.MapGeometry.CurveSegment = _builder.build()

    /**
     * `.apollo.hdmap.LineSegment line_segment = 1;`
     */
    public var lineSegment: apollo.hdmap.MapGeometry.LineSegment
      @JvmName("getLineSegment")
      get() = _builder.getLineSegment()
      @JvmName("setLineSegment")
      set(value) {
        _builder.setLineSegment(value)
      }
    /**
     * `.apollo.hdmap.LineSegment line_segment = 1;`
     */
    public fun clearLineSegment() {
      _builder.clearLineSegment()
    }
    /**
     * `.apollo.hdmap.LineSegment line_segment = 1;`
     * @return Whether the lineSegment field is set.
     */
    public fun hasLineSegment(): kotlin.Boolean {
      return _builder.hasLineSegment()
    }

    /**
     * ```
     * start position (s-coordinate)
     * ```
     *
     * `optional double s = 6;`
     */
    public var s: kotlin.Double
      @JvmName("getS")
      get() = _builder.getS()
      @JvmName("setS")
      set(value) {
        _builder.setS(value)
      }
    /**
     * ```
     * start position (s-coordinate)
     * ```
     *
     * `optional double s = 6;`
     */
    public fun clearS() {
      _builder.clearS()
    }
    /**
     * ```
     * start position (s-coordinate)
     * ```
     *
     * `optional double s = 6;`
     * @return Whether the s field is set.
     */
    public fun hasS(): kotlin.Boolean {
      return _builder.hasS()
    }

    /**
     * `optional .apollo.common.PointENU start_position = 7;`
     */
    public var startPosition: apollo.common.Geometry.PointENU
      @JvmName("getStartPosition")
      get() = _builder.getStartPosition()
      @JvmName("setStartPosition")
      set(value) {
        _builder.setStartPosition(value)
      }
    /**
     * `optional .apollo.common.PointENU start_position = 7;`
     */
    public fun clearStartPosition() {
      _builder.clearStartPosition()
    }
    /**
     * `optional .apollo.common.PointENU start_position = 7;`
     * @return Whether the startPosition field is set.
     */
    public fun hasStartPosition(): kotlin.Boolean {
      return _builder.hasStartPosition()
    }
    public val CurveSegmentKt.Dsl.startPositionOrNull: apollo.common.Geometry.PointENU?
      get() = _builder.startPositionOrNull

    /**
     * ```
     * start orientation
     * ```
     *
     * `optional double heading = 8;`
     */
    public var heading: kotlin.Double
      @JvmName("getHeading")
      get() = _builder.getHeading()
      @JvmName("setHeading")
      set(value) {
        _builder.setHeading(value)
      }
    /**
     * ```
     * start orientation
     * ```
     *
     * `optional double heading = 8;`
     */
    public fun clearHeading() {
      _builder.clearHeading()
    }
    /**
     * ```
     * start orientation
     * ```
     *
     * `optional double heading = 8;`
     * @return Whether the heading field is set.
     */
    public fun hasHeading(): kotlin.Boolean {
      return _builder.hasHeading()
    }

    /**
     * `optional double length = 9;`
     */
    public var length: kotlin.Double
      @JvmName("getLength")
      get() = _builder.getLength()
      @JvmName("setLength")
      set(value) {
        _builder.setLength(value)
      }
    /**
     * `optional double length = 9;`
     */
    public fun clearLength() {
      _builder.clearLength()
    }
    /**
     * `optional double length = 9;`
     * @return Whether the length field is set.
     */
    public fun hasLength(): kotlin.Boolean {
      return _builder.hasLength()
    }
    public val curveTypeCase: apollo.hdmap.MapGeometry.CurveSegment.CurveTypeCase
      @JvmName("getCurveTypeCase")
      get() = _builder.getCurveTypeCase()

    public fun clearCurveType() {
      _builder.clearCurveType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.hdmap.MapGeometry.CurveSegment.copy(block: `apollo.hdmap`.CurveSegmentKt.Dsl.() -> kotlin.Unit): apollo.hdmap.MapGeometry.CurveSegment =
  `apollo.hdmap`.CurveSegmentKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val apollo.hdmap.MapGeometry.CurveSegmentOrBuilder.lineSegmentOrNull: apollo.hdmap.MapGeometry.LineSegment?
  get() = if (hasLineSegment()) getLineSegment() else null

public val apollo.hdmap.MapGeometry.CurveSegmentOrBuilder.startPositionOrNull: apollo.common.Geometry.PointENU?
  get() = if (hasStartPosition()) getStartPosition() else null

