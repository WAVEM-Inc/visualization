// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/localization/proto/localization.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.localization;

@kotlin.jvm.JvmName("-initializeuncertainty")
public inline fun uncertainty(block: apollo.localization.UncertaintyKt.Dsl.() -> kotlin.Unit): apollo.localization.Localization.Uncertainty =
  apollo.localization.UncertaintyKt.Dsl._create(apollo.localization.Localization.Uncertainty.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.localization.Uncertainty`
 */
public object UncertaintyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.localization.Localization.Uncertainty.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.localization.Localization.Uncertainty.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.localization.Localization.Uncertainty = _builder.build()

    /**
     * ```
     * Standard deviation of position, east/north/up in meters.
     * ```
     *
     * `optional .apollo.common.Point3D position_std_dev = 1;`
     */
    public var positionStdDev: apollo.common.Geometry.Point3D
      @JvmName("getPositionStdDev")
      get() = _builder.getPositionStdDev()
      @JvmName("setPositionStdDev")
      set(value) {
        _builder.setPositionStdDev(value)
      }
    /**
     * ```
     * Standard deviation of position, east/north/up in meters.
     * ```
     *
     * `optional .apollo.common.Point3D position_std_dev = 1;`
     */
    public fun clearPositionStdDev() {
      _builder.clearPositionStdDev()
    }
    /**
     * ```
     * Standard deviation of position, east/north/up in meters.
     * ```
     *
     * `optional .apollo.common.Point3D position_std_dev = 1;`
     * @return Whether the positionStdDev field is set.
     */
    public fun hasPositionStdDev(): kotlin.Boolean {
      return _builder.hasPositionStdDev()
    }
    public val UncertaintyKt.Dsl.positionStdDevOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.positionStdDevOrNull

    /**
     * ```
     * Standard deviation of quaternion qx/qy/qz, unitless.
     * ```
     *
     * `optional .apollo.common.Point3D orientation_std_dev = 2;`
     */
    public var orientationStdDev: apollo.common.Geometry.Point3D
      @JvmName("getOrientationStdDev")
      get() = _builder.getOrientationStdDev()
      @JvmName("setOrientationStdDev")
      set(value) {
        _builder.setOrientationStdDev(value)
      }
    /**
     * ```
     * Standard deviation of quaternion qx/qy/qz, unitless.
     * ```
     *
     * `optional .apollo.common.Point3D orientation_std_dev = 2;`
     */
    public fun clearOrientationStdDev() {
      _builder.clearOrientationStdDev()
    }
    /**
     * ```
     * Standard deviation of quaternion qx/qy/qz, unitless.
     * ```
     *
     * `optional .apollo.common.Point3D orientation_std_dev = 2;`
     * @return Whether the orientationStdDev field is set.
     */
    public fun hasOrientationStdDev(): kotlin.Boolean {
      return _builder.hasOrientationStdDev()
    }
    public val UncertaintyKt.Dsl.orientationStdDevOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.orientationStdDevOrNull

    /**
     * ```
     * Standard deviation of linear velocity, east/north/up in meters per second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_velocity_std_dev = 3;`
     */
    public var linearVelocityStdDev: apollo.common.Geometry.Point3D
      @JvmName("getLinearVelocityStdDev")
      get() = _builder.getLinearVelocityStdDev()
      @JvmName("setLinearVelocityStdDev")
      set(value) {
        _builder.setLinearVelocityStdDev(value)
      }
    /**
     * ```
     * Standard deviation of linear velocity, east/north/up in meters per second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_velocity_std_dev = 3;`
     */
    public fun clearLinearVelocityStdDev() {
      _builder.clearLinearVelocityStdDev()
    }
    /**
     * ```
     * Standard deviation of linear velocity, east/north/up in meters per second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_velocity_std_dev = 3;`
     * @return Whether the linearVelocityStdDev field is set.
     */
    public fun hasLinearVelocityStdDev(): kotlin.Boolean {
      return _builder.hasLinearVelocityStdDev()
    }
    public val UncertaintyKt.Dsl.linearVelocityStdDevOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.linearVelocityStdDevOrNull

    /**
     * ```
     * Standard deviation of linear acceleration, right/forward/up in meters per
     * square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration_std_dev = 4;`
     */
    public var linearAccelerationStdDev: apollo.common.Geometry.Point3D
      @JvmName("getLinearAccelerationStdDev")
      get() = _builder.getLinearAccelerationStdDev()
      @JvmName("setLinearAccelerationStdDev")
      set(value) {
        _builder.setLinearAccelerationStdDev(value)
      }
    /**
     * ```
     * Standard deviation of linear acceleration, right/forward/up in meters per
     * square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration_std_dev = 4;`
     */
    public fun clearLinearAccelerationStdDev() {
      _builder.clearLinearAccelerationStdDev()
    }
    /**
     * ```
     * Standard deviation of linear acceleration, right/forward/up in meters per
     * square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration_std_dev = 4;`
     * @return Whether the linearAccelerationStdDev field is set.
     */
    public fun hasLinearAccelerationStdDev(): kotlin.Boolean {
      return _builder.hasLinearAccelerationStdDev()
    }
    public val UncertaintyKt.Dsl.linearAccelerationStdDevOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.linearAccelerationStdDevOrNull

    /**
     * ```
     * Standard deviation of angular velocity, right/forward/up in radians per
     * second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity_std_dev = 5;`
     */
    public var angularVelocityStdDev: apollo.common.Geometry.Point3D
      @JvmName("getAngularVelocityStdDev")
      get() = _builder.getAngularVelocityStdDev()
      @JvmName("setAngularVelocityStdDev")
      set(value) {
        _builder.setAngularVelocityStdDev(value)
      }
    /**
     * ```
     * Standard deviation of angular velocity, right/forward/up in radians per
     * second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity_std_dev = 5;`
     */
    public fun clearAngularVelocityStdDev() {
      _builder.clearAngularVelocityStdDev()
    }
    /**
     * ```
     * Standard deviation of angular velocity, right/forward/up in radians per
     * second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity_std_dev = 5;`
     * @return Whether the angularVelocityStdDev field is set.
     */
    public fun hasAngularVelocityStdDev(): kotlin.Boolean {
      return _builder.hasAngularVelocityStdDev()
    }
    public val UncertaintyKt.Dsl.angularVelocityStdDevOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.angularVelocityStdDevOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.localization.Localization.Uncertainty.copy(block: `apollo.localization`.UncertaintyKt.Dsl.() -> kotlin.Unit): apollo.localization.Localization.Uncertainty =
  `apollo.localization`.UncertaintyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val apollo.localization.Localization.UncertaintyOrBuilder.positionStdDevOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasPositionStdDev()) getPositionStdDev() else null

public val apollo.localization.Localization.UncertaintyOrBuilder.orientationStdDevOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasOrientationStdDev()) getOrientationStdDev() else null

public val apollo.localization.Localization.UncertaintyOrBuilder.linearVelocityStdDevOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasLinearVelocityStdDev()) getLinearVelocityStdDev() else null

public val apollo.localization.Localization.UncertaintyOrBuilder.linearAccelerationStdDevOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasLinearAccelerationStdDev()) getLinearAccelerationStdDev() else null

public val apollo.localization.Localization.UncertaintyOrBuilder.angularVelocityStdDevOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasAngularVelocityStdDev()) getAngularVelocityStdDev() else null

