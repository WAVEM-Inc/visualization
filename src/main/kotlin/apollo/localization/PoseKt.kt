// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/localization/proto/pose.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.localization;

@kotlin.jvm.JvmName("-initializepose")
public inline fun pose(block: apollo.localization.PoseKt.Dsl.() -> kotlin.Unit): apollo.localization.PoseOuterClass.Pose =
  apollo.localization.PoseKt.Dsl._create(apollo.localization.PoseOuterClass.Pose.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `apollo.localization.Pose`
 */
public object PoseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.localization.PoseOuterClass.Pose.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.localization.PoseOuterClass.Pose.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.localization.PoseOuterClass.Pose = _builder.build()

    /**
     * ```
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * ```
     *
     * `optional .apollo.common.PointENU position = 1;`
     */
    public var position: apollo.common.Geometry.PointENU
      @JvmName("getPosition")
      get() = _builder.getPosition()
      @JvmName("setPosition")
      set(value) {
        _builder.setPosition(value)
      }
    /**
     * ```
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * ```
     *
     * `optional .apollo.common.PointENU position = 1;`
     */
    public fun clearPosition() {
      _builder.clearPosition()
    }
    /**
     * ```
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * ```
     *
     * `optional .apollo.common.PointENU position = 1;`
     * @return Whether the position field is set.
     */
    public fun hasPosition(): kotlin.Boolean {
      return _builder.hasPosition()
    }
    public val PoseKt.Dsl.positionOrNull: apollo.common.Geometry.PointENU?
      get() = _builder.positionOrNull

    /**
     * ```
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * ```
     *
     * `optional .apollo.common.Quaternion orientation = 2;`
     */
    public var orientation: apollo.common.Geometry.Quaternion
      @JvmName("getOrientation")
      get() = _builder.getOrientation()
      @JvmName("setOrientation")
      set(value) {
        _builder.setOrientation(value)
      }
    /**
     * ```
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * ```
     *
     * `optional .apollo.common.Quaternion orientation = 2;`
     */
    public fun clearOrientation() {
      _builder.clearOrientation()
    }
    /**
     * ```
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * ```
     *
     * `optional .apollo.common.Quaternion orientation = 2;`
     * @return Whether the orientation field is set.
     */
    public fun hasOrientation(): kotlin.Boolean {
      return _builder.hasOrientation()
    }
    public val PoseKt.Dsl.orientationOrNull: apollo.common.Geometry.Quaternion?
      get() = _builder.orientationOrNull

    /**
     * ```
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_velocity = 3;`
     */
    public var linearVelocity: apollo.common.Geometry.Point3D
      @JvmName("getLinearVelocity")
      get() = _builder.getLinearVelocity()
      @JvmName("setLinearVelocity")
      set(value) {
        _builder.setLinearVelocity(value)
      }
    /**
     * ```
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_velocity = 3;`
     */
    public fun clearLinearVelocity() {
      _builder.clearLinearVelocity()
    }
    /**
     * ```
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_velocity = 3;`
     * @return Whether the linearVelocity field is set.
     */
    public fun hasLinearVelocity(): kotlin.Boolean {
      return _builder.hasLinearVelocity()
    }
    public val PoseKt.Dsl.linearVelocityOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.linearVelocityOrNull

    /**
     * ```
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration = 4;`
     */
    public var linearAcceleration: apollo.common.Geometry.Point3D
      @JvmName("getLinearAcceleration")
      get() = _builder.getLinearAcceleration()
      @JvmName("setLinearAcceleration")
      set(value) {
        _builder.setLinearAcceleration(value)
      }
    /**
     * ```
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration = 4;`
     */
    public fun clearLinearAcceleration() {
      _builder.clearLinearAcceleration()
    }
    /**
     * ```
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration = 4;`
     * @return Whether the linearAcceleration field is set.
     */
    public fun hasLinearAcceleration(): kotlin.Boolean {
      return _builder.hasLinearAcceleration()
    }
    public val PoseKt.Dsl.linearAccelerationOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.linearAccelerationOrNull

    /**
     * ```
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity = 5;`
     */
    public var angularVelocity: apollo.common.Geometry.Point3D
      @JvmName("getAngularVelocity")
      get() = _builder.getAngularVelocity()
      @JvmName("setAngularVelocity")
      set(value) {
        _builder.setAngularVelocity(value)
      }
    /**
     * ```
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity = 5;`
     */
    public fun clearAngularVelocity() {
      _builder.clearAngularVelocity()
    }
    /**
     * ```
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity = 5;`
     * @return Whether the angularVelocity field is set.
     */
    public fun hasAngularVelocity(): kotlin.Boolean {
      return _builder.hasAngularVelocity()
    }
    public val PoseKt.Dsl.angularVelocityOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.angularVelocityOrNull

    /**
     * ```
     * Heading
     * The heading is zero when the car is facing East and positive when facing
     * North.
     * ```
     *
     * `optional double heading = 6;`
     */
    public var heading: kotlin.Double
      @JvmName("getHeading")
      get() = _builder.getHeading()
      @JvmName("setHeading")
      set(value) {
        _builder.setHeading(value)
      }
    /**
     * ```
     * Heading
     * The heading is zero when the car is facing East and positive when facing
     * North.
     * ```
     *
     * `optional double heading = 6;`
     */
    public fun clearHeading() {
      _builder.clearHeading()
    }
    /**
     * ```
     * Heading
     * The heading is zero when the car is facing East and positive when facing
     * North.
     * ```
     *
     * `optional double heading = 6;`
     * @return Whether the heading field is set.
     */
    public fun hasHeading(): kotlin.Boolean {
      return _builder.hasHeading()
    }

    /**
     * ```
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration_vrf = 7;`
     */
    public var linearAccelerationVrf: apollo.common.Geometry.Point3D
      @JvmName("getLinearAccelerationVrf")
      get() = _builder.getLinearAccelerationVrf()
      @JvmName("setLinearAccelerationVrf")
      set(value) {
        _builder.setLinearAccelerationVrf(value)
      }
    /**
     * ```
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration_vrf = 7;`
     */
    public fun clearLinearAccelerationVrf() {
      _builder.clearLinearAccelerationVrf()
    }
    /**
     * ```
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * ```
     *
     * `optional .apollo.common.Point3D linear_acceleration_vrf = 7;`
     * @return Whether the linearAccelerationVrf field is set.
     */
    public fun hasLinearAccelerationVrf(): kotlin.Boolean {
      return _builder.hasLinearAccelerationVrf()
    }
    public val PoseKt.Dsl.linearAccelerationVrfOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.linearAccelerationVrfOrNull

    /**
     * ```
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity_vrf = 8;`
     */
    public var angularVelocityVrf: apollo.common.Geometry.Point3D
      @JvmName("getAngularVelocityVrf")
      get() = _builder.getAngularVelocityVrf()
      @JvmName("setAngularVelocityVrf")
      set(value) {
        _builder.setAngularVelocityVrf(value)
      }
    /**
     * ```
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity_vrf = 8;`
     */
    public fun clearAngularVelocityVrf() {
      _builder.clearAngularVelocityVrf()
    }
    /**
     * ```
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * ```
     *
     * `optional .apollo.common.Point3D angular_velocity_vrf = 8;`
     * @return Whether the angularVelocityVrf field is set.
     */
    public fun hasAngularVelocityVrf(): kotlin.Boolean {
      return _builder.hasAngularVelocityVrf()
    }
    public val PoseKt.Dsl.angularVelocityVrfOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.angularVelocityVrfOrNull

    /**
     * ```
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * ```
     *
     * `optional .apollo.common.Point3D euler_angles = 9;`
     */
    public var eulerAngles: apollo.common.Geometry.Point3D
      @JvmName("getEulerAngles")
      get() = _builder.getEulerAngles()
      @JvmName("setEulerAngles")
      set(value) {
        _builder.setEulerAngles(value)
      }
    /**
     * ```
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * ```
     *
     * `optional .apollo.common.Point3D euler_angles = 9;`
     */
    public fun clearEulerAngles() {
      _builder.clearEulerAngles()
    }
    /**
     * ```
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * ```
     *
     * `optional .apollo.common.Point3D euler_angles = 9;`
     * @return Whether the eulerAngles field is set.
     */
    public fun hasEulerAngles(): kotlin.Boolean {
      return _builder.hasEulerAngles()
    }
    public val PoseKt.Dsl.eulerAnglesOrNull: apollo.common.Geometry.Point3D?
      get() = _builder.eulerAnglesOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.localization.PoseOuterClass.Pose.copy(block: `apollo.localization`.PoseKt.Dsl.() -> kotlin.Unit): apollo.localization.PoseOuterClass.Pose =
  `apollo.localization`.PoseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val apollo.localization.PoseOuterClass.PoseOrBuilder.positionOrNull: apollo.common.Geometry.PointENU?
  get() = if (hasPosition()) getPosition() else null

public val apollo.localization.PoseOuterClass.PoseOrBuilder.orientationOrNull: apollo.common.Geometry.Quaternion?
  get() = if (hasOrientation()) getOrientation() else null

public val apollo.localization.PoseOuterClass.PoseOrBuilder.linearVelocityOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasLinearVelocity()) getLinearVelocity() else null

public val apollo.localization.PoseOuterClass.PoseOrBuilder.linearAccelerationOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasLinearAcceleration()) getLinearAcceleration() else null

public val apollo.localization.PoseOuterClass.PoseOrBuilder.angularVelocityOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasAngularVelocity()) getAngularVelocity() else null

public val apollo.localization.PoseOuterClass.PoseOrBuilder.linearAccelerationVrfOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasLinearAccelerationVrf()) getLinearAccelerationVrf() else null

public val apollo.localization.PoseOuterClass.PoseOrBuilder.angularVelocityVrfOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasAngularVelocityVrf()) getAngularVelocityVrf() else null

public val apollo.localization.PoseOuterClass.PoseOrBuilder.eulerAnglesOrNull: apollo.common.Geometry.Point3D?
  get() = if (hasEulerAngles()) getEulerAngles() else null

