// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/localization/proto/localization_status.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package apollo.localization;

@kotlin.jvm.JvmName("-initializemsfStatus")
public inline fun msfStatus(block: apollo.localization.MsfStatusKt.Dsl.() -> kotlin.Unit): apollo.localization.LocalizationStatus.MsfStatus =
  apollo.localization.MsfStatusKt.Dsl._create(apollo.localization.LocalizationStatus.MsfStatus.newBuilder()).apply { block() }._build()
/**
 * ```
 * The status of msf localization module
 * ```
 *
 * Protobuf type `apollo.localization.MsfStatus`
 */
public object MsfStatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: apollo.localization.LocalizationStatus.MsfStatus.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: apollo.localization.LocalizationStatus.MsfStatus.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): apollo.localization.LocalizationStatus.MsfStatus = _builder.build()

    /**
     * `optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;`
     */
    public var localLidarConsistency: apollo.localization.LocalizationStatus.LocalLidarConsistency
      @JvmName("getLocalLidarConsistency")
      get() = _builder.getLocalLidarConsistency()
      @JvmName("setLocalLidarConsistency")
      set(value) {
        _builder.setLocalLidarConsistency(value)
      }
    /**
     * `optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;`
     */
    public fun clearLocalLidarConsistency() {
      _builder.clearLocalLidarConsistency()
    }
    /**
     * `optional .apollo.localization.LocalLidarConsistency local_lidar_consistency = 1;`
     * @return Whether the localLidarConsistency field is set.
     */
    public fun hasLocalLidarConsistency(): kotlin.Boolean {
      return _builder.hasLocalLidarConsistency()
    }

    /**
     * `optional .apollo.localization.GnssConsistency gnss_consistency = 2;`
     */
    public var gnssConsistency: apollo.localization.LocalizationStatus.GnssConsistency
      @JvmName("getGnssConsistency")
      get() = _builder.getGnssConsistency()
      @JvmName("setGnssConsistency")
      set(value) {
        _builder.setGnssConsistency(value)
      }
    /**
     * `optional .apollo.localization.GnssConsistency gnss_consistency = 2;`
     */
    public fun clearGnssConsistency() {
      _builder.clearGnssConsistency()
    }
    /**
     * `optional .apollo.localization.GnssConsistency gnss_consistency = 2;`
     * @return Whether the gnssConsistency field is set.
     */
    public fun hasGnssConsistency(): kotlin.Boolean {
      return _builder.hasGnssConsistency()
    }

    /**
     * `optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;`
     */
    public var localLidarStatus: apollo.localization.LocalizationStatus.LocalLidarStatus
      @JvmName("getLocalLidarStatus")
      get() = _builder.getLocalLidarStatus()
      @JvmName("setLocalLidarStatus")
      set(value) {
        _builder.setLocalLidarStatus(value)
      }
    /**
     * `optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;`
     */
    public fun clearLocalLidarStatus() {
      _builder.clearLocalLidarStatus()
    }
    /**
     * `optional .apollo.localization.LocalLidarStatus local_lidar_status = 3;`
     * @return Whether the localLidarStatus field is set.
     */
    public fun hasLocalLidarStatus(): kotlin.Boolean {
      return _builder.hasLocalLidarStatus()
    }

    /**
     * `optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;`
     */
    public var localLidarQuality: apollo.localization.LocalizationStatus.LocalLidarQuality
      @JvmName("getLocalLidarQuality")
      get() = _builder.getLocalLidarQuality()
      @JvmName("setLocalLidarQuality")
      set(value) {
        _builder.setLocalLidarQuality(value)
      }
    /**
     * `optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;`
     */
    public fun clearLocalLidarQuality() {
      _builder.clearLocalLidarQuality()
    }
    /**
     * `optional .apollo.localization.LocalLidarQuality local_lidar_quality = 4;`
     * @return Whether the localLidarQuality field is set.
     */
    public fun hasLocalLidarQuality(): kotlin.Boolean {
      return _builder.hasLocalLidarQuality()
    }

    /**
     * `optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;`
     */
    public var gnssposPositionType: apollo.localization.LocalizationStatus.GnssPositionType
      @JvmName("getGnssposPositionType")
      get() = _builder.getGnssposPositionType()
      @JvmName("setGnssposPositionType")
      set(value) {
        _builder.setGnssposPositionType(value)
      }
    /**
     * `optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;`
     */
    public fun clearGnssposPositionType() {
      _builder.clearGnssposPositionType()
    }
    /**
     * `optional .apollo.localization.GnssPositionType gnsspos_position_type = 5;`
     * @return Whether the gnssposPositionType field is set.
     */
    public fun hasGnssposPositionType(): kotlin.Boolean {
      return _builder.hasGnssposPositionType()
    }

    /**
     * `optional .apollo.localization.MsfRunningStatus msf_running_status = 6;`
     */
    public var msfRunningStatus: apollo.localization.LocalizationStatus.MsfRunningStatus
      @JvmName("getMsfRunningStatus")
      get() = _builder.getMsfRunningStatus()
      @JvmName("setMsfRunningStatus")
      set(value) {
        _builder.setMsfRunningStatus(value)
      }
    /**
     * `optional .apollo.localization.MsfRunningStatus msf_running_status = 6;`
     */
    public fun clearMsfRunningStatus() {
      _builder.clearMsfRunningStatus()
    }
    /**
     * `optional .apollo.localization.MsfRunningStatus msf_running_status = 6;`
     * @return Whether the msfRunningStatus field is set.
     */
    public fun hasMsfRunningStatus(): kotlin.Boolean {
      return _builder.hasMsfRunningStatus()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun apollo.localization.LocalizationStatus.MsfStatus.copy(block: `apollo.localization`.MsfStatusKt.Dsl.() -> kotlin.Unit): apollo.localization.LocalizationStatus.MsfStatus =
  `apollo.localization`.MsfStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

