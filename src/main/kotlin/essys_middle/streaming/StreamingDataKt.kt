// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/essys/streaming.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package essys_middle.streaming;

@kotlin.jvm.JvmName("-initializestreamingData")
public inline fun streamingData(block: essys_middle.streaming.StreamingDataKt.Dsl.() -> kotlin.Unit): essys_middle.streaming.Streaming.StreamingData =
  essys_middle.streaming.StreamingDataKt.Dsl._create(essys_middle.streaming.Streaming.StreamingData.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `essys_middle.streaming.StreamingData`
 */
public object StreamingDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: essys_middle.streaming.Streaming.StreamingData.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: essys_middle.streaming.Streaming.StreamingData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): essys_middle.streaming.Streaming.StreamingData = _builder.build()

    /**
     * ```
     * 필수데이터
     * ```
     *
     * `optional int64 timestamp = 1;`
     */
    public var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * ```
     * 필수데이터
     * ```
     *
     * `optional int64 timestamp = 1;`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
    /**
     * ```
     * 필수데이터
     * ```
     *
     * `optional int64 timestamp = 1;`
     * @return Whether the timestamp field is set.
     */
    public fun hasTimestamp(): kotlin.Boolean {
      return _builder.hasTimestamp()
    }

    /**
     * `optional .essys_middle.streaming.PlaybackState state = 2;`
     */
    public var state: essys_middle.streaming.Streaming.PlaybackState
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * `optional .essys_middle.streaming.PlaybackState state = 2;`
     */
    public fun clearState() {
      _builder.clearState()
    }
    /**
     * `optional .essys_middle.streaming.PlaybackState state = 2;`
     * @return Whether the state field is set.
     */
    public fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * `optional string file_path = 3;`
     */
    public var filePath: kotlin.String
      @JvmName("getFilePath")
      get() = _builder.getFilePath()
      @JvmName("setFilePath")
      set(value) {
        _builder.setFilePath(value)
      }
    /**
     * `optional string file_path = 3;`
     */
    public fun clearFilePath() {
      _builder.clearFilePath()
    }
    /**
     * `optional string file_path = 3;`
     * @return Whether the filePath field is set.
     */
    public fun hasFilePath(): kotlin.Boolean {
      return _builder.hasFilePath()
    }

    /**
     * `optional .essys_middle.streaming.FileInfo file_info = 4;`
     */
    public var fileInfo: essys_middle.streaming.Streaming.FileInfo
      @JvmName("getFileInfo")
      get() = _builder.getFileInfo()
      @JvmName("setFileInfo")
      set(value) {
        _builder.setFileInfo(value)
      }
    /**
     * `optional .essys_middle.streaming.FileInfo file_info = 4;`
     */
    public fun clearFileInfo() {
      _builder.clearFileInfo()
    }
    /**
     * `optional .essys_middle.streaming.FileInfo file_info = 4;`
     * @return Whether the fileInfo field is set.
     */
    public fun hasFileInfo(): kotlin.Boolean {
      return _builder.hasFileInfo()
    }
    public val StreamingDataKt.Dsl.fileInfoOrNull: essys_middle.streaming.Streaming.FileInfo?
      get() = _builder.fileInfoOrNull

    /**
     * ```
     * 소숫점 둘째 자리까지
     * ```
     *
     * `optional double progress = 5;`
     */
    public var progress: kotlin.Double
      @JvmName("getProgress")
      get() = _builder.getProgress()
      @JvmName("setProgress")
      set(value) {
        _builder.setProgress(value)
      }
    /**
     * ```
     * 소숫점 둘째 자리까지
     * ```
     *
     * `optional double progress = 5;`
     */
    public fun clearProgress() {
      _builder.clearProgress()
    }
    /**
     * ```
     * 소숫점 둘째 자리까지
     * ```
     *
     * `optional double progress = 5;`
     * @return Whether the progress field is set.
     */
    public fun hasProgress(): kotlin.Boolean {
      return _builder.hasProgress()
    }

    /**
     * ```
     * 부가 기능(구현 안해도 무방)
     * ```
     *
     * `optional double playback_speed = 11;`
     */
    public var playbackSpeed: kotlin.Double
      @JvmName("getPlaybackSpeed")
      get() = _builder.getPlaybackSpeed()
      @JvmName("setPlaybackSpeed")
      set(value) {
        _builder.setPlaybackSpeed(value)
      }
    /**
     * ```
     * 부가 기능(구현 안해도 무방)
     * ```
     *
     * `optional double playback_speed = 11;`
     */
    public fun clearPlaybackSpeed() {
      _builder.clearPlaybackSpeed()
    }
    /**
     * ```
     * 부가 기능(구현 안해도 무방)
     * ```
     *
     * `optional double playback_speed = 11;`
     * @return Whether the playbackSpeed field is set.
     */
    public fun hasPlaybackSpeed(): kotlin.Boolean {
      return _builder.hasPlaybackSpeed()
    }

    /**
     * `optional .essys_middle.streaming.ErrorCode error = 99;`
     */
    public var error: essys_middle.streaming.Streaming.ErrorCode
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * `optional .essys_middle.streaming.ErrorCode error = 99;`
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * `optional .essys_middle.streaming.ErrorCode error = 99;`
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun essys_middle.streaming.Streaming.StreamingData.copy(block: `essys_middle.streaming`.StreamingDataKt.Dsl.() -> kotlin.Unit): essys_middle.streaming.Streaming.StreamingData =
  `essys_middle.streaming`.StreamingDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val essys_middle.streaming.Streaming.StreamingDataOrBuilder.fileInfoOrNull: essys_middle.streaming.Streaming.FileInfo?
  get() = if (hasFileInfo()) getFileInfo() else null

