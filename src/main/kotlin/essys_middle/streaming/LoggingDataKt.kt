// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/essys/streaming.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package essys_middle.streaming;

@kotlin.jvm.JvmName("-initializeloggingData")
public inline fun loggingData(block: essys_middle.streaming.LoggingDataKt.Dsl.() -> kotlin.Unit): essys_middle.streaming.Streaming.LoggingData =
  essys_middle.streaming.LoggingDataKt.Dsl._create(essys_middle.streaming.Streaming.LoggingData.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `essys_middle.streaming.LoggingData`
 */
public object LoggingDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: essys_middle.streaming.Streaming.LoggingData.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: essys_middle.streaming.Streaming.LoggingData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): essys_middle.streaming.Streaming.LoggingData = _builder.build()

    /**
     * ```
     * unit: msec  요청&응답 시간
     * ```
     *
     * `optional int64 timestamp = 1;`
     */
    public var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * ```
     * unit: msec  요청&응답 시간
     * ```
     *
     * `optional int64 timestamp = 1;`
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
    /**
     * ```
     * unit: msec  요청&응답 시간
     * ```
     *
     * `optional int64 timestamp = 1;`
     * @return Whether the timestamp field is set.
     */
    public fun hasTimestamp(): kotlin.Boolean {
      return _builder.hasTimestamp()
    }

    /**
     * `optional .essys_middle.streaming.PlaybackState state = 2;`
     */
    public var state: essys_middle.streaming.Streaming.PlaybackState
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * `optional .essys_middle.streaming.PlaybackState state = 2;`
     */
    public fun clearState() {
      _builder.clearState()
    }
    /**
     * `optional .essys_middle.streaming.PlaybackState state = 2;`
     * @return Whether the state field is set.
     */
    public fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * `optional .essys_middle.streaming.ErrorCode error = 99;`
     */
    public var error: essys_middle.streaming.Streaming.ErrorCode
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * `optional .essys_middle.streaming.ErrorCode error = 99;`
     */
    public fun clearError() {
      _builder.clearError()
    }
    /**
     * `optional .essys_middle.streaming.ErrorCode error = 99;`
     * @return Whether the error field is set.
     */
    public fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun essys_middle.streaming.Streaming.LoggingData.copy(block: `essys_middle.streaming`.LoggingDataKt.Dsl.() -> kotlin.Unit): essys_middle.streaming.Streaming.LoggingData =
  `essys_middle.streaming`.LoggingDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

