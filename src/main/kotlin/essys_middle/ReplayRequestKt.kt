// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/essys/logging_replay.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package essys_middle;

@kotlin.jvm.JvmName("-initializereplayRequest")
public inline fun replayRequest(block: essys_middle.ReplayRequestKt.Dsl.() -> kotlin.Unit): essys_middle.LoggingReplay.ReplayRequest =
  essys_middle.ReplayRequestKt.Dsl._create(essys_middle.LoggingReplay.ReplayRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `essys_middle.ReplayRequest`
 */
public object ReplayRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: essys_middle.LoggingReplay.ReplayRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: essys_middle.LoggingReplay.ReplayRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): essys_middle.LoggingReplay.ReplayRequest = _builder.build()

    /**
     * `optional .essys_middle.ReplayRequestType type = 1;`
     */
    public var type: essys_middle.LoggingReplay.ReplayRequestType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * `optional .essys_middle.ReplayRequestType type = 1;`
     */
    public fun clearType() {
      _builder.clearType()
    }
    /**
     * `optional .essys_middle.ReplayRequestType type = 1;`
     * @return Whether the type field is set.
     */
    public fun hasType(): kotlin.Boolean {
      return _builder.hasType()
    }

    /**
     * ```
     * 리플레이 저장 경로 예: F:/REPLAYS
     * ```
     *
     * `optional string replay_path = 2;`
     */
    public var replayPath: kotlin.String
      @JvmName("getReplayPath")
      get() = _builder.getReplayPath()
      @JvmName("setReplayPath")
      set(value) {
        _builder.setReplayPath(value)
      }
    /**
     * ```
     * 리플레이 저장 경로 예: F:/REPLAYS
     * ```
     *
     * `optional string replay_path = 2;`
     */
    public fun clearReplayPath() {
      _builder.clearReplayPath()
    }
    /**
     * ```
     * 리플레이 저장 경로 예: F:/REPLAYS
     * ```
     *
     * `optional string replay_path = 2;`
     * @return Whether the replayPath field is set.
     */
    public fun hasReplayPath(): kotlin.Boolean {
      return _builder.hasReplayPath()
    }

    /**
     * ```
     * 리플레이 대상 이름 예: 20231211  즉, F:/REPLAYS/20231211 폴더가 재생 대상이 됨.
     * ```
     *
     * `optional string replay_name = 3;`
     */
    public var replayName: kotlin.String
      @JvmName("getReplayName")
      get() = _builder.getReplayName()
      @JvmName("setReplayName")
      set(value) {
        _builder.setReplayName(value)
      }
    /**
     * ```
     * 리플레이 대상 이름 예: 20231211  즉, F:/REPLAYS/20231211 폴더가 재생 대상이 됨.
     * ```
     *
     * `optional string replay_name = 3;`
     */
    public fun clearReplayName() {
      _builder.clearReplayName()
    }
    /**
     * ```
     * 리플레이 대상 이름 예: 20231211  즉, F:/REPLAYS/20231211 폴더가 재생 대상이 됨.
     * ```
     *
     * `optional string replay_name = 3;`
     * @return Whether the replayName field is set.
     */
    public fun hasReplayName(): kotlin.Boolean {
      return _builder.hasReplayName()
    }

    /**
     * ```
     * 재생 속도는 HALF, NORMAL, DOUBLE 세 옵션 중 택 1
     * ```
     *
     * `optional .essys_middle.ReplaySpeed speed = 4;`
     */
    public var speed: essys_middle.LoggingReplay.ReplaySpeed
      @JvmName("getSpeed")
      get() = _builder.getSpeed()
      @JvmName("setSpeed")
      set(value) {
        _builder.setSpeed(value)
      }
    /**
     * ```
     * 재생 속도는 HALF, NORMAL, DOUBLE 세 옵션 중 택 1
     * ```
     *
     * `optional .essys_middle.ReplaySpeed speed = 4;`
     */
    public fun clearSpeed() {
      _builder.clearSpeed()
    }
    /**
     * ```
     * 재생 속도는 HALF, NORMAL, DOUBLE 세 옵션 중 택 1
     * ```
     *
     * `optional .essys_middle.ReplaySpeed speed = 4;`
     * @return Whether the speed field is set.
     */
    public fun hasSpeed(): kotlin.Boolean {
      return _builder.hasSpeed()
    }

    /**
     * ```
     * 재생 진행률은 100.0%를 최대값으로 계산하여 전송.
     * ```
     *
     * `optional double progress = 5;`
     */
    public var progress: kotlin.Double
      @JvmName("getProgress")
      get() = _builder.getProgress()
      @JvmName("setProgress")
      set(value) {
        _builder.setProgress(value)
      }
    /**
     * ```
     * 재생 진행률은 100.0%를 최대값으로 계산하여 전송.
     * ```
     *
     * `optional double progress = 5;`
     */
    public fun clearProgress() {
      _builder.clearProgress()
    }
    /**
     * ```
     * 재생 진행률은 100.0%를 최대값으로 계산하여 전송.
     * ```
     *
     * `optional double progress = 5;`
     * @return Whether the progress field is set.
     */
    public fun hasProgress(): kotlin.Boolean {
      return _builder.hasProgress()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun essys_middle.LoggingReplay.ReplayRequest.copy(block: `essys_middle`.ReplayRequestKt.Dsl.() -> kotlin.Unit): essys_middle.LoggingReplay.ReplayRequest =
  `essys_middle`.ReplayRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

