// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/essys/dashboard.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package essys_middle;

@kotlin.jvm.JvmName("-initializetrafficLight")
public inline fun trafficLight(block: essys_middle.TrafficLightKt.Dsl.() -> kotlin.Unit): essys_middle.Dashboard.TrafficLight =
  essys_middle.TrafficLightKt.Dsl._create(essys_middle.Dashboard.TrafficLight.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `essys_middle.TrafficLight`
 */
public object TrafficLightKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: essys_middle.Dashboard.TrafficLight.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: essys_middle.Dashboard.TrafficLight.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): essys_middle.Dashboard.TrafficLight = _builder.build()

    /**
     * `optional .essys_middle.Status status = 1;`
     */
    public var status: essys_middle.Dashboard.Status
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * `optional .essys_middle.Status status = 1;`
     */
    public fun clearStatus() {
      _builder.clearStatus()
    }
    /**
     * `optional .essys_middle.Status status = 1;`
     * @return Whether the status field is set.
     */
    public fun hasStatus(): kotlin.Boolean {
      return _builder.hasStatus()
    }

    /**
     * `optional .essys_middle.Signal red = 2;`
     */
    public var red: essys_middle.Dashboard.Signal
      @JvmName("getRed")
      get() = _builder.getRed()
      @JvmName("setRed")
      set(value) {
        _builder.setRed(value)
      }
    /**
     * `optional .essys_middle.Signal red = 2;`
     */
    public fun clearRed() {
      _builder.clearRed()
    }
    /**
     * `optional .essys_middle.Signal red = 2;`
     * @return Whether the red field is set.
     */
    public fun hasRed(): kotlin.Boolean {
      return _builder.hasRed()
    }

    /**
     * `optional .essys_middle.Signal left = 3;`
     */
    public var left: essys_middle.Dashboard.Signal
      @JvmName("getLeft")
      get() = _builder.getLeft()
      @JvmName("setLeft")
      set(value) {
        _builder.setLeft(value)
      }
    /**
     * `optional .essys_middle.Signal left = 3;`
     */
    public fun clearLeft() {
      _builder.clearLeft()
    }
    /**
     * `optional .essys_middle.Signal left = 3;`
     * @return Whether the left field is set.
     */
    public fun hasLeft(): kotlin.Boolean {
      return _builder.hasLeft()
    }

    /**
     * `optional .essys_middle.Signal yellow = 4;`
     */
    public var yellow: essys_middle.Dashboard.Signal
      @JvmName("getYellow")
      get() = _builder.getYellow()
      @JvmName("setYellow")
      set(value) {
        _builder.setYellow(value)
      }
    /**
     * `optional .essys_middle.Signal yellow = 4;`
     */
    public fun clearYellow() {
      _builder.clearYellow()
    }
    /**
     * `optional .essys_middle.Signal yellow = 4;`
     * @return Whether the yellow field is set.
     */
    public fun hasYellow(): kotlin.Boolean {
      return _builder.hasYellow()
    }

    /**
     * `optional .essys_middle.Signal green = 5;`
     */
    public var green: essys_middle.Dashboard.Signal
      @JvmName("getGreen")
      get() = _builder.getGreen()
      @JvmName("setGreen")
      set(value) {
        _builder.setGreen(value)
      }
    /**
     * `optional .essys_middle.Signal green = 5;`
     */
    public fun clearGreen() {
      _builder.clearGreen()
    }
    /**
     * `optional .essys_middle.Signal green = 5;`
     * @return Whether the green field is set.
     */
    public fun hasGreen(): kotlin.Boolean {
      return _builder.hasGreen()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun essys_middle.Dashboard.TrafficLight.copy(block: `essys_middle`.TrafficLightKt.Dsl.() -> kotlin.Unit): essys_middle.Dashboard.TrafficLight =
  `essys_middle`.TrafficLightKt.Dsl._create(this.toBuilder()).apply { block() }._build()

