// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: modules/essys/logging_replay.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package essys_middle;

@kotlin.jvm.JvmName("-initializeloggingRequest")
public inline fun loggingRequest(block: essys_middle.LoggingRequestKt.Dsl.() -> kotlin.Unit): essys_middle.LoggingReplay.LoggingRequest =
  essys_middle.LoggingRequestKt.Dsl._create(essys_middle.LoggingReplay.LoggingRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `essys_middle.LoggingRequest`
 */
public object LoggingRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: essys_middle.LoggingReplay.LoggingRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: essys_middle.LoggingReplay.LoggingRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): essys_middle.LoggingReplay.LoggingRequest = _builder.build()

    /**
     * `optional .essys_middle.LoggingRequestType type = 1;`
     */
    public var type: essys_middle.LoggingReplay.LoggingRequestType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * `optional .essys_middle.LoggingRequestType type = 1;`
     */
    public fun clearType() {
      _builder.clearType()
    }
    /**
     * `optional .essys_middle.LoggingRequestType type = 1;`
     * @return Whether the type field is set.
     */
    public fun hasType(): kotlin.Boolean {
      return _builder.hasType()
    }

    /**
     * ```
     * 로깅 저장 경로 예: F:/REPLAYS
     * ```
     *
     * `optional string logging_path = 2;`
     */
    public var loggingPath: kotlin.String
      @JvmName("getLoggingPath")
      get() = _builder.getLoggingPath()
      @JvmName("setLoggingPath")
      set(value) {
        _builder.setLoggingPath(value)
      }
    /**
     * ```
     * 로깅 저장 경로 예: F:/REPLAYS
     * ```
     *
     * `optional string logging_path = 2;`
     */
    public fun clearLoggingPath() {
      _builder.clearLoggingPath()
    }
    /**
     * ```
     * 로깅 저장 경로 예: F:/REPLAYS
     * ```
     *
     * `optional string logging_path = 2;`
     * @return Whether the loggingPath field is set.
     */
    public fun hasLoggingPath(): kotlin.Boolean {
      return _builder.hasLoggingPath()
    }

    /**
     * ```
     * 로깅 이름 예: 20231211, 즉, F:/REPLAYS/20231211/ 에 저장 요청
     * ```
     *
     * `optional string logging_name = 3;`
     */
    public var loggingName: kotlin.String
      @JvmName("getLoggingName")
      get() = _builder.getLoggingName()
      @JvmName("setLoggingName")
      set(value) {
        _builder.setLoggingName(value)
      }
    /**
     * ```
     * 로깅 이름 예: 20231211, 즉, F:/REPLAYS/20231211/ 에 저장 요청
     * ```
     *
     * `optional string logging_name = 3;`
     */
    public fun clearLoggingName() {
      _builder.clearLoggingName()
    }
    /**
     * ```
     * 로깅 이름 예: 20231211, 즉, F:/REPLAYS/20231211/ 에 저장 요청
     * ```
     *
     * `optional string logging_name = 3;`
     * @return Whether the loggingName field is set.
     */
    public fun hasLoggingName(): kotlin.Boolean {
      return _builder.hasLoggingName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun essys_middle.LoggingReplay.LoggingRequest.copy(block: `essys_middle`.LoggingRequestKt.Dsl.() -> kotlin.Unit): essys_middle.LoggingReplay.LoggingRequest =
  `essys_middle`.LoggingRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

