// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/pose.proto
// Protobuf Java Version: 4.26.1

package apollo.localization;

public final class PoseOuterClass {
  private PoseOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      PoseOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface PoseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:apollo.localization.Pose)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * </pre>
     *
     * <code>optional .apollo.common.PointENU position = 1;</code>
     * @return Whether the position field is set.
     */
    boolean hasPosition();
    /**
     * <pre>
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * </pre>
     *
     * <code>optional .apollo.common.PointENU position = 1;</code>
     * @return The position.
     */
    apollo.common.Geometry.PointENU getPosition();
    /**
     * <pre>
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * </pre>
     *
     * <code>optional .apollo.common.PointENU position = 1;</code>
     */
    apollo.common.Geometry.PointENUOrBuilder getPositionOrBuilder();

    /**
     * <pre>
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * </pre>
     *
     * <code>optional .apollo.common.Quaternion orientation = 2;</code>
     * @return Whether the orientation field is set.
     */
    boolean hasOrientation();
    /**
     * <pre>
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * </pre>
     *
     * <code>optional .apollo.common.Quaternion orientation = 2;</code>
     * @return The orientation.
     */
    apollo.common.Geometry.Quaternion getOrientation();
    /**
     * <pre>
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * </pre>
     *
     * <code>optional .apollo.common.Quaternion orientation = 2;</code>
     */
    apollo.common.Geometry.QuaternionOrBuilder getOrientationOrBuilder();

    /**
     * <pre>
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
     * @return Whether the linearVelocity field is set.
     */
    boolean hasLinearVelocity();
    /**
     * <pre>
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
     * @return The linearVelocity.
     */
    apollo.common.Geometry.Point3D getLinearVelocity();
    /**
     * <pre>
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
     */
    apollo.common.Geometry.Point3DOrBuilder getLinearVelocityOrBuilder();

    /**
     * <pre>
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
     * @return Whether the linearAcceleration field is set.
     */
    boolean hasLinearAcceleration();
    /**
     * <pre>
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
     * @return The linearAcceleration.
     */
    apollo.common.Geometry.Point3D getLinearAcceleration();
    /**
     * <pre>
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
     */
    apollo.common.Geometry.Point3DOrBuilder getLinearAccelerationOrBuilder();

    /**
     * <pre>
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
     * @return Whether the angularVelocity field is set.
     */
    boolean hasAngularVelocity();
    /**
     * <pre>
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
     * @return The angularVelocity.
     */
    apollo.common.Geometry.Point3D getAngularVelocity();
    /**
     * <pre>
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
     */
    apollo.common.Geometry.Point3DOrBuilder getAngularVelocityOrBuilder();

    /**
     * <pre>
     * Heading
     * The heading is zero when the car is facing East and positive when facing
     * North.
     * </pre>
     *
     * <code>optional double heading = 6;</code>
     * @return Whether the heading field is set.
     */
    boolean hasHeading();
    /**
     * <pre>
     * Heading
     * The heading is zero when the car is facing East and positive when facing
     * North.
     * </pre>
     *
     * <code>optional double heading = 6;</code>
     * @return The heading.
     */
    double getHeading();

    /**
     * <pre>
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
     * @return Whether the linearAccelerationVrf field is set.
     */
    boolean hasLinearAccelerationVrf();
    /**
     * <pre>
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
     * @return The linearAccelerationVrf.
     */
    apollo.common.Geometry.Point3D getLinearAccelerationVrf();
    /**
     * <pre>
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
     */
    apollo.common.Geometry.Point3DOrBuilder getLinearAccelerationVrfOrBuilder();

    /**
     * <pre>
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
     * @return Whether the angularVelocityVrf field is set.
     */
    boolean hasAngularVelocityVrf();
    /**
     * <pre>
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
     * @return The angularVelocityVrf.
     */
    apollo.common.Geometry.Point3D getAngularVelocityVrf();
    /**
     * <pre>
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
     */
    apollo.common.Geometry.Point3DOrBuilder getAngularVelocityVrfOrBuilder();

    /**
     * <pre>
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
     * @return Whether the eulerAngles field is set.
     */
    boolean hasEulerAngles();
    /**
     * <pre>
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
     * @return The eulerAngles.
     */
    apollo.common.Geometry.Point3D getEulerAngles();
    /**
     * <pre>
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
     */
    apollo.common.Geometry.Point3DOrBuilder getEulerAnglesOrBuilder();
  }
  /**
   * Protobuf type {@code apollo.localization.Pose}
   */
  public static final class Pose extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:apollo.localization.Pose)
      PoseOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Pose.class.getName());
    }
    // Use Pose.newBuilder() to construct.
    private Pose(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Pose() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return apollo.localization.PoseOuterClass.internal_static_apollo_localization_Pose_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return apollo.localization.PoseOuterClass.internal_static_apollo_localization_Pose_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              apollo.localization.PoseOuterClass.Pose.class, apollo.localization.PoseOuterClass.Pose.Builder.class);
    }

    private int bitField0_;
    public static final int POSITION_FIELD_NUMBER = 1;
    private apollo.common.Geometry.PointENU position_;
    /**
     * <pre>
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * </pre>
     *
     * <code>optional .apollo.common.PointENU position = 1;</code>
     * @return Whether the position field is set.
     */
    @java.lang.Override
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * </pre>
     *
     * <code>optional .apollo.common.PointENU position = 1;</code>
     * @return The position.
     */
    @java.lang.Override
    public apollo.common.Geometry.PointENU getPosition() {
      return position_ == null ? apollo.common.Geometry.PointENU.getDefaultInstance() : position_;
    }
    /**
     * <pre>
     * Position of the vehicle reference point (VRP) in the map reference frame.
     * The VRP is the center of rear axle.
     * </pre>
     *
     * <code>optional .apollo.common.PointENU position = 1;</code>
     */
    @java.lang.Override
    public apollo.common.Geometry.PointENUOrBuilder getPositionOrBuilder() {
      return position_ == null ? apollo.common.Geometry.PointENU.getDefaultInstance() : position_;
    }

    public static final int ORIENTATION_FIELD_NUMBER = 2;
    private apollo.common.Geometry.Quaternion orientation_;
    /**
     * <pre>
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * </pre>
     *
     * <code>optional .apollo.common.Quaternion orientation = 2;</code>
     * @return Whether the orientation field is set.
     */
    @java.lang.Override
    public boolean hasOrientation() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * </pre>
     *
     * <code>optional .apollo.common.Quaternion orientation = 2;</code>
     * @return The orientation.
     */
    @java.lang.Override
    public apollo.common.Geometry.Quaternion getOrientation() {
      return orientation_ == null ? apollo.common.Geometry.Quaternion.getDefaultInstance() : orientation_;
    }
    /**
     * <pre>
     * A quaternion that represents the rotation from the IMU coordinate
     * (Right/Forward/Up) to the
     * world coordinate (East/North/Up).
     * </pre>
     *
     * <code>optional .apollo.common.Quaternion orientation = 2;</code>
     */
    @java.lang.Override
    public apollo.common.Geometry.QuaternionOrBuilder getOrientationOrBuilder() {
      return orientation_ == null ? apollo.common.Geometry.Quaternion.getDefaultInstance() : orientation_;
    }

    public static final int LINEAR_VELOCITY_FIELD_NUMBER = 3;
    private apollo.common.Geometry.Point3D linearVelocity_;
    /**
     * <pre>
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
     * @return Whether the linearVelocity field is set.
     */
    @java.lang.Override
    public boolean hasLinearVelocity() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
     * @return The linearVelocity.
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3D getLinearVelocity() {
      return linearVelocity_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearVelocity_;
    }
    /**
     * <pre>
     * Linear velocity of the VRP in the map reference frame.
     * East/north/up in meters per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3DOrBuilder getLinearVelocityOrBuilder() {
      return linearVelocity_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearVelocity_;
    }

    public static final int LINEAR_ACCELERATION_FIELD_NUMBER = 4;
    private apollo.common.Geometry.Point3D linearAcceleration_;
    /**
     * <pre>
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
     * @return Whether the linearAcceleration field is set.
     */
    @java.lang.Override
    public boolean hasLinearAcceleration() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
     * @return The linearAcceleration.
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3D getLinearAcceleration() {
      return linearAcceleration_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearAcceleration_;
    }
    /**
     * <pre>
     * Linear acceleration of the VRP in the map reference frame.
     * East/north/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3DOrBuilder getLinearAccelerationOrBuilder() {
      return linearAcceleration_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearAcceleration_;
    }

    public static final int ANGULAR_VELOCITY_FIELD_NUMBER = 5;
    private apollo.common.Geometry.Point3D angularVelocity_;
    /**
     * <pre>
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
     * @return Whether the angularVelocity field is set.
     */
    @java.lang.Override
    public boolean hasAngularVelocity() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
     * @return The angularVelocity.
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3D getAngularVelocity() {
      return angularVelocity_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : angularVelocity_;
    }
    /**
     * <pre>
     * Angular velocity of the vehicle in the map reference frame.
     * Around east/north/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3DOrBuilder getAngularVelocityOrBuilder() {
      return angularVelocity_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : angularVelocity_;
    }

    public static final int HEADING_FIELD_NUMBER = 6;
    private double heading_ = 0D;
    /**
     * <pre>
     * Heading
     * The heading is zero when the car is facing East and positive when facing
     * North.
     * </pre>
     *
     * <code>optional double heading = 6;</code>
     * @return Whether the heading field is set.
     */
    @java.lang.Override
    public boolean hasHeading() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Heading
     * The heading is zero when the car is facing East and positive when facing
     * North.
     * </pre>
     *
     * <code>optional double heading = 6;</code>
     * @return The heading.
     */
    @java.lang.Override
    public double getHeading() {
      return heading_;
    }

    public static final int LINEAR_ACCELERATION_VRF_FIELD_NUMBER = 7;
    private apollo.common.Geometry.Point3D linearAccelerationVrf_;
    /**
     * <pre>
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
     * @return Whether the linearAccelerationVrf field is set.
     */
    @java.lang.Override
    public boolean hasLinearAccelerationVrf() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
     * @return The linearAccelerationVrf.
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3D getLinearAccelerationVrf() {
      return linearAccelerationVrf_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearAccelerationVrf_;
    }
    /**
     * <pre>
     * Linear acceleration of the VRP in the vehicle reference frame.
     * Right/forward/up in meters per square second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3DOrBuilder getLinearAccelerationVrfOrBuilder() {
      return linearAccelerationVrf_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearAccelerationVrf_;
    }

    public static final int ANGULAR_VELOCITY_VRF_FIELD_NUMBER = 8;
    private apollo.common.Geometry.Point3D angularVelocityVrf_;
    /**
     * <pre>
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
     * @return Whether the angularVelocityVrf field is set.
     */
    @java.lang.Override
    public boolean hasAngularVelocityVrf() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
     * @return The angularVelocityVrf.
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3D getAngularVelocityVrf() {
      return angularVelocityVrf_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : angularVelocityVrf_;
    }
    /**
     * <pre>
     * Angular velocity of the VRP in the vehicle reference frame.
     * Around right/forward/up axes in radians per second.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3DOrBuilder getAngularVelocityVrfOrBuilder() {
      return angularVelocityVrf_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : angularVelocityVrf_;
    }

    public static final int EULER_ANGLES_FIELD_NUMBER = 9;
    private apollo.common.Geometry.Point3D eulerAngles_;
    /**
     * <pre>
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
     * @return Whether the eulerAngles field is set.
     */
    @java.lang.Override
    public boolean hasEulerAngles() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
     * @return The eulerAngles.
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3D getEulerAngles() {
      return eulerAngles_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : eulerAngles_;
    }
    /**
     * <pre>
     * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
     * in world coordinate (East/North/Up)
     * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
     * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
     * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
     * The direction of rotation follows the right-hand rule.
     * </pre>
     *
     * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
     */
    @java.lang.Override
    public apollo.common.Geometry.Point3DOrBuilder getEulerAnglesOrBuilder() {
      return eulerAngles_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : eulerAngles_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getPosition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getOrientation());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getLinearVelocity());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getLinearAcceleration());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(5, getAngularVelocity());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, heading_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeMessage(7, getLinearAccelerationVrf());
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeMessage(8, getAngularVelocityVrf());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeMessage(9, getEulerAngles());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPosition());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOrientation());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLinearVelocity());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getLinearAcceleration());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getAngularVelocity());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, heading_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getLinearAccelerationVrf());
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getAngularVelocityVrf());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getEulerAngles());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof apollo.localization.PoseOuterClass.Pose)) {
        return super.equals(obj);
      }
      apollo.localization.PoseOuterClass.Pose other = (apollo.localization.PoseOuterClass.Pose) obj;

      if (hasPosition() != other.hasPosition()) return false;
      if (hasPosition()) {
        if (!getPosition()
            .equals(other.getPosition())) return false;
      }
      if (hasOrientation() != other.hasOrientation()) return false;
      if (hasOrientation()) {
        if (!getOrientation()
            .equals(other.getOrientation())) return false;
      }
      if (hasLinearVelocity() != other.hasLinearVelocity()) return false;
      if (hasLinearVelocity()) {
        if (!getLinearVelocity()
            .equals(other.getLinearVelocity())) return false;
      }
      if (hasLinearAcceleration() != other.hasLinearAcceleration()) return false;
      if (hasLinearAcceleration()) {
        if (!getLinearAcceleration()
            .equals(other.getLinearAcceleration())) return false;
      }
      if (hasAngularVelocity() != other.hasAngularVelocity()) return false;
      if (hasAngularVelocity()) {
        if (!getAngularVelocity()
            .equals(other.getAngularVelocity())) return false;
      }
      if (hasHeading() != other.hasHeading()) return false;
      if (hasHeading()) {
        if (java.lang.Double.doubleToLongBits(getHeading())
            != java.lang.Double.doubleToLongBits(
                other.getHeading())) return false;
      }
      if (hasLinearAccelerationVrf() != other.hasLinearAccelerationVrf()) return false;
      if (hasLinearAccelerationVrf()) {
        if (!getLinearAccelerationVrf()
            .equals(other.getLinearAccelerationVrf())) return false;
      }
      if (hasAngularVelocityVrf() != other.hasAngularVelocityVrf()) return false;
      if (hasAngularVelocityVrf()) {
        if (!getAngularVelocityVrf()
            .equals(other.getAngularVelocityVrf())) return false;
      }
      if (hasEulerAngles() != other.hasEulerAngles()) return false;
      if (hasEulerAngles()) {
        if (!getEulerAngles()
            .equals(other.getEulerAngles())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPosition()) {
        hash = (37 * hash) + POSITION_FIELD_NUMBER;
        hash = (53 * hash) + getPosition().hashCode();
      }
      if (hasOrientation()) {
        hash = (37 * hash) + ORIENTATION_FIELD_NUMBER;
        hash = (53 * hash) + getOrientation().hashCode();
      }
      if (hasLinearVelocity()) {
        hash = (37 * hash) + LINEAR_VELOCITY_FIELD_NUMBER;
        hash = (53 * hash) + getLinearVelocity().hashCode();
      }
      if (hasLinearAcceleration()) {
        hash = (37 * hash) + LINEAR_ACCELERATION_FIELD_NUMBER;
        hash = (53 * hash) + getLinearAcceleration().hashCode();
      }
      if (hasAngularVelocity()) {
        hash = (37 * hash) + ANGULAR_VELOCITY_FIELD_NUMBER;
        hash = (53 * hash) + getAngularVelocity().hashCode();
      }
      if (hasHeading()) {
        hash = (37 * hash) + HEADING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getHeading()));
      }
      if (hasLinearAccelerationVrf()) {
        hash = (37 * hash) + LINEAR_ACCELERATION_VRF_FIELD_NUMBER;
        hash = (53 * hash) + getLinearAccelerationVrf().hashCode();
      }
      if (hasAngularVelocityVrf()) {
        hash = (37 * hash) + ANGULAR_VELOCITY_VRF_FIELD_NUMBER;
        hash = (53 * hash) + getAngularVelocityVrf().hashCode();
      }
      if (hasEulerAngles()) {
        hash = (37 * hash) + EULER_ANGLES_FIELD_NUMBER;
        hash = (53 * hash) + getEulerAngles().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static apollo.localization.PoseOuterClass.Pose parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static apollo.localization.PoseOuterClass.Pose parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static apollo.localization.PoseOuterClass.Pose parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.localization.PoseOuterClass.Pose parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(apollo.localization.PoseOuterClass.Pose prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code apollo.localization.Pose}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:apollo.localization.Pose)
        apollo.localization.PoseOuterClass.PoseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return apollo.localization.PoseOuterClass.internal_static_apollo_localization_Pose_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return apollo.localization.PoseOuterClass.internal_static_apollo_localization_Pose_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                apollo.localization.PoseOuterClass.Pose.class, apollo.localization.PoseOuterClass.Pose.Builder.class);
      }

      // Construct using apollo.localization.PoseOuterClass.Pose.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getPositionFieldBuilder();
          getOrientationFieldBuilder();
          getLinearVelocityFieldBuilder();
          getLinearAccelerationFieldBuilder();
          getAngularVelocityFieldBuilder();
          getLinearAccelerationVrfFieldBuilder();
          getAngularVelocityVrfFieldBuilder();
          getEulerAnglesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        position_ = null;
        if (positionBuilder_ != null) {
          positionBuilder_.dispose();
          positionBuilder_ = null;
        }
        orientation_ = null;
        if (orientationBuilder_ != null) {
          orientationBuilder_.dispose();
          orientationBuilder_ = null;
        }
        linearVelocity_ = null;
        if (linearVelocityBuilder_ != null) {
          linearVelocityBuilder_.dispose();
          linearVelocityBuilder_ = null;
        }
        linearAcceleration_ = null;
        if (linearAccelerationBuilder_ != null) {
          linearAccelerationBuilder_.dispose();
          linearAccelerationBuilder_ = null;
        }
        angularVelocity_ = null;
        if (angularVelocityBuilder_ != null) {
          angularVelocityBuilder_.dispose();
          angularVelocityBuilder_ = null;
        }
        heading_ = 0D;
        linearAccelerationVrf_ = null;
        if (linearAccelerationVrfBuilder_ != null) {
          linearAccelerationVrfBuilder_.dispose();
          linearAccelerationVrfBuilder_ = null;
        }
        angularVelocityVrf_ = null;
        if (angularVelocityVrfBuilder_ != null) {
          angularVelocityVrfBuilder_.dispose();
          angularVelocityVrfBuilder_ = null;
        }
        eulerAngles_ = null;
        if (eulerAnglesBuilder_ != null) {
          eulerAnglesBuilder_.dispose();
          eulerAnglesBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return apollo.localization.PoseOuterClass.internal_static_apollo_localization_Pose_descriptor;
      }

      @java.lang.Override
      public apollo.localization.PoseOuterClass.Pose getDefaultInstanceForType() {
        return apollo.localization.PoseOuterClass.Pose.getDefaultInstance();
      }

      @java.lang.Override
      public apollo.localization.PoseOuterClass.Pose build() {
        apollo.localization.PoseOuterClass.Pose result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public apollo.localization.PoseOuterClass.Pose buildPartial() {
        apollo.localization.PoseOuterClass.Pose result = new apollo.localization.PoseOuterClass.Pose(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(apollo.localization.PoseOuterClass.Pose result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.position_ = positionBuilder_ == null
              ? position_
              : positionBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.orientation_ = orientationBuilder_ == null
              ? orientation_
              : orientationBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.linearVelocity_ = linearVelocityBuilder_ == null
              ? linearVelocity_
              : linearVelocityBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.linearAcceleration_ = linearAccelerationBuilder_ == null
              ? linearAcceleration_
              : linearAccelerationBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.angularVelocity_ = angularVelocityBuilder_ == null
              ? angularVelocity_
              : angularVelocityBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.heading_ = heading_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.linearAccelerationVrf_ = linearAccelerationVrfBuilder_ == null
              ? linearAccelerationVrf_
              : linearAccelerationVrfBuilder_.build();
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.angularVelocityVrf_ = angularVelocityVrfBuilder_ == null
              ? angularVelocityVrf_
              : angularVelocityVrfBuilder_.build();
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.eulerAngles_ = eulerAnglesBuilder_ == null
              ? eulerAngles_
              : eulerAnglesBuilder_.build();
          to_bitField0_ |= 0x00000100;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof apollo.localization.PoseOuterClass.Pose) {
          return mergeFrom((apollo.localization.PoseOuterClass.Pose)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(apollo.localization.PoseOuterClass.Pose other) {
        if (other == apollo.localization.PoseOuterClass.Pose.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasOrientation()) {
          mergeOrientation(other.getOrientation());
        }
        if (other.hasLinearVelocity()) {
          mergeLinearVelocity(other.getLinearVelocity());
        }
        if (other.hasLinearAcceleration()) {
          mergeLinearAcceleration(other.getLinearAcceleration());
        }
        if (other.hasAngularVelocity()) {
          mergeAngularVelocity(other.getAngularVelocity());
        }
        if (other.hasHeading()) {
          setHeading(other.getHeading());
        }
        if (other.hasLinearAccelerationVrf()) {
          mergeLinearAccelerationVrf(other.getLinearAccelerationVrf());
        }
        if (other.hasAngularVelocityVrf()) {
          mergeAngularVelocityVrf(other.getAngularVelocityVrf());
        }
        if (other.hasEulerAngles()) {
          mergeEulerAngles(other.getEulerAngles());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getPositionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getOrientationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getLinearVelocityFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getLinearAccelerationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getAngularVelocityFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 49: {
                heading_ = input.readDouble();
                bitField0_ |= 0x00000020;
                break;
              } // case 49
              case 58: {
                input.readMessage(
                    getLinearAccelerationVrfFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                input.readMessage(
                    getAngularVelocityVrfFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 74: {
                input.readMessage(
                    getEulerAnglesFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000100;
                break;
              } // case 74
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private apollo.common.Geometry.PointENU position_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.PointENU, apollo.common.Geometry.PointENU.Builder, apollo.common.Geometry.PointENUOrBuilder> positionBuilder_;
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       * @return Whether the position field is set.
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       * @return The position.
       */
      public apollo.common.Geometry.PointENU getPosition() {
        if (positionBuilder_ == null) {
          return position_ == null ? apollo.common.Geometry.PointENU.getDefaultInstance() : position_;
        } else {
          return positionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       */
      public Builder setPosition(apollo.common.Geometry.PointENU value) {
        if (positionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          position_ = value;
        } else {
          positionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       */
      public Builder setPosition(
          apollo.common.Geometry.PointENU.Builder builderForValue) {
        if (positionBuilder_ == null) {
          position_ = builderForValue.build();
        } else {
          positionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       */
      public Builder mergePosition(apollo.common.Geometry.PointENU value) {
        if (positionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            position_ != null &&
            position_ != apollo.common.Geometry.PointENU.getDefaultInstance()) {
            getPositionBuilder().mergeFrom(value);
          } else {
            position_ = value;
          }
        } else {
          positionBuilder_.mergeFrom(value);
        }
        if (position_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000001);
        position_ = null;
        if (positionBuilder_ != null) {
          positionBuilder_.dispose();
          positionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       */
      public apollo.common.Geometry.PointENU.Builder getPositionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPositionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       */
      public apollo.common.Geometry.PointENUOrBuilder getPositionOrBuilder() {
        if (positionBuilder_ != null) {
          return positionBuilder_.getMessageOrBuilder();
        } else {
          return position_ == null ?
              apollo.common.Geometry.PointENU.getDefaultInstance() : position_;
        }
      }
      /**
       * <pre>
       * Position of the vehicle reference point (VRP) in the map reference frame.
       * The VRP is the center of rear axle.
       * </pre>
       *
       * <code>optional .apollo.common.PointENU position = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.PointENU, apollo.common.Geometry.PointENU.Builder, apollo.common.Geometry.PointENUOrBuilder> 
          getPositionFieldBuilder() {
        if (positionBuilder_ == null) {
          positionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.common.Geometry.PointENU, apollo.common.Geometry.PointENU.Builder, apollo.common.Geometry.PointENUOrBuilder>(
                  getPosition(),
                  getParentForChildren(),
                  isClean());
          position_ = null;
        }
        return positionBuilder_;
      }

      private apollo.common.Geometry.Quaternion orientation_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Quaternion, apollo.common.Geometry.Quaternion.Builder, apollo.common.Geometry.QuaternionOrBuilder> orientationBuilder_;
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       * @return Whether the orientation field is set.
       */
      public boolean hasOrientation() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       * @return The orientation.
       */
      public apollo.common.Geometry.Quaternion getOrientation() {
        if (orientationBuilder_ == null) {
          return orientation_ == null ? apollo.common.Geometry.Quaternion.getDefaultInstance() : orientation_;
        } else {
          return orientationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       */
      public Builder setOrientation(apollo.common.Geometry.Quaternion value) {
        if (orientationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          orientation_ = value;
        } else {
          orientationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       */
      public Builder setOrientation(
          apollo.common.Geometry.Quaternion.Builder builderForValue) {
        if (orientationBuilder_ == null) {
          orientation_ = builderForValue.build();
        } else {
          orientationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       */
      public Builder mergeOrientation(apollo.common.Geometry.Quaternion value) {
        if (orientationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            orientation_ != null &&
            orientation_ != apollo.common.Geometry.Quaternion.getDefaultInstance()) {
            getOrientationBuilder().mergeFrom(value);
          } else {
            orientation_ = value;
          }
        } else {
          orientationBuilder_.mergeFrom(value);
        }
        if (orientation_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       */
      public Builder clearOrientation() {
        bitField0_ = (bitField0_ & ~0x00000002);
        orientation_ = null;
        if (orientationBuilder_ != null) {
          orientationBuilder_.dispose();
          orientationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       */
      public apollo.common.Geometry.Quaternion.Builder getOrientationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getOrientationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       */
      public apollo.common.Geometry.QuaternionOrBuilder getOrientationOrBuilder() {
        if (orientationBuilder_ != null) {
          return orientationBuilder_.getMessageOrBuilder();
        } else {
          return orientation_ == null ?
              apollo.common.Geometry.Quaternion.getDefaultInstance() : orientation_;
        }
      }
      /**
       * <pre>
       * A quaternion that represents the rotation from the IMU coordinate
       * (Right/Forward/Up) to the
       * world coordinate (East/North/Up).
       * </pre>
       *
       * <code>optional .apollo.common.Quaternion orientation = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Quaternion, apollo.common.Geometry.Quaternion.Builder, apollo.common.Geometry.QuaternionOrBuilder> 
          getOrientationFieldBuilder() {
        if (orientationBuilder_ == null) {
          orientationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.common.Geometry.Quaternion, apollo.common.Geometry.Quaternion.Builder, apollo.common.Geometry.QuaternionOrBuilder>(
                  getOrientation(),
                  getParentForChildren(),
                  isClean());
          orientation_ = null;
        }
        return orientationBuilder_;
      }

      private apollo.common.Geometry.Point3D linearVelocity_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> linearVelocityBuilder_;
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       * @return Whether the linearVelocity field is set.
       */
      public boolean hasLinearVelocity() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       * @return The linearVelocity.
       */
      public apollo.common.Geometry.Point3D getLinearVelocity() {
        if (linearVelocityBuilder_ == null) {
          return linearVelocity_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearVelocity_;
        } else {
          return linearVelocityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       */
      public Builder setLinearVelocity(apollo.common.Geometry.Point3D value) {
        if (linearVelocityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          linearVelocity_ = value;
        } else {
          linearVelocityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       */
      public Builder setLinearVelocity(
          apollo.common.Geometry.Point3D.Builder builderForValue) {
        if (linearVelocityBuilder_ == null) {
          linearVelocity_ = builderForValue.build();
        } else {
          linearVelocityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       */
      public Builder mergeLinearVelocity(apollo.common.Geometry.Point3D value) {
        if (linearVelocityBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            linearVelocity_ != null &&
            linearVelocity_ != apollo.common.Geometry.Point3D.getDefaultInstance()) {
            getLinearVelocityBuilder().mergeFrom(value);
          } else {
            linearVelocity_ = value;
          }
        } else {
          linearVelocityBuilder_.mergeFrom(value);
        }
        if (linearVelocity_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       */
      public Builder clearLinearVelocity() {
        bitField0_ = (bitField0_ & ~0x00000004);
        linearVelocity_ = null;
        if (linearVelocityBuilder_ != null) {
          linearVelocityBuilder_.dispose();
          linearVelocityBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       */
      public apollo.common.Geometry.Point3D.Builder getLinearVelocityBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getLinearVelocityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       */
      public apollo.common.Geometry.Point3DOrBuilder getLinearVelocityOrBuilder() {
        if (linearVelocityBuilder_ != null) {
          return linearVelocityBuilder_.getMessageOrBuilder();
        } else {
          return linearVelocity_ == null ?
              apollo.common.Geometry.Point3D.getDefaultInstance() : linearVelocity_;
        }
      }
      /**
       * <pre>
       * Linear velocity of the VRP in the map reference frame.
       * East/north/up in meters per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_velocity = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> 
          getLinearVelocityFieldBuilder() {
        if (linearVelocityBuilder_ == null) {
          linearVelocityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder>(
                  getLinearVelocity(),
                  getParentForChildren(),
                  isClean());
          linearVelocity_ = null;
        }
        return linearVelocityBuilder_;
      }

      private apollo.common.Geometry.Point3D linearAcceleration_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> linearAccelerationBuilder_;
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       * @return Whether the linearAcceleration field is set.
       */
      public boolean hasLinearAcceleration() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       * @return The linearAcceleration.
       */
      public apollo.common.Geometry.Point3D getLinearAcceleration() {
        if (linearAccelerationBuilder_ == null) {
          return linearAcceleration_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearAcceleration_;
        } else {
          return linearAccelerationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       */
      public Builder setLinearAcceleration(apollo.common.Geometry.Point3D value) {
        if (linearAccelerationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          linearAcceleration_ = value;
        } else {
          linearAccelerationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       */
      public Builder setLinearAcceleration(
          apollo.common.Geometry.Point3D.Builder builderForValue) {
        if (linearAccelerationBuilder_ == null) {
          linearAcceleration_ = builderForValue.build();
        } else {
          linearAccelerationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       */
      public Builder mergeLinearAcceleration(apollo.common.Geometry.Point3D value) {
        if (linearAccelerationBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            linearAcceleration_ != null &&
            linearAcceleration_ != apollo.common.Geometry.Point3D.getDefaultInstance()) {
            getLinearAccelerationBuilder().mergeFrom(value);
          } else {
            linearAcceleration_ = value;
          }
        } else {
          linearAccelerationBuilder_.mergeFrom(value);
        }
        if (linearAcceleration_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       */
      public Builder clearLinearAcceleration() {
        bitField0_ = (bitField0_ & ~0x00000008);
        linearAcceleration_ = null;
        if (linearAccelerationBuilder_ != null) {
          linearAccelerationBuilder_.dispose();
          linearAccelerationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       */
      public apollo.common.Geometry.Point3D.Builder getLinearAccelerationBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getLinearAccelerationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       */
      public apollo.common.Geometry.Point3DOrBuilder getLinearAccelerationOrBuilder() {
        if (linearAccelerationBuilder_ != null) {
          return linearAccelerationBuilder_.getMessageOrBuilder();
        } else {
          return linearAcceleration_ == null ?
              apollo.common.Geometry.Point3D.getDefaultInstance() : linearAcceleration_;
        }
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the map reference frame.
       * East/north/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> 
          getLinearAccelerationFieldBuilder() {
        if (linearAccelerationBuilder_ == null) {
          linearAccelerationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder>(
                  getLinearAcceleration(),
                  getParentForChildren(),
                  isClean());
          linearAcceleration_ = null;
        }
        return linearAccelerationBuilder_;
      }

      private apollo.common.Geometry.Point3D angularVelocity_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> angularVelocityBuilder_;
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       * @return Whether the angularVelocity field is set.
       */
      public boolean hasAngularVelocity() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       * @return The angularVelocity.
       */
      public apollo.common.Geometry.Point3D getAngularVelocity() {
        if (angularVelocityBuilder_ == null) {
          return angularVelocity_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : angularVelocity_;
        } else {
          return angularVelocityBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       */
      public Builder setAngularVelocity(apollo.common.Geometry.Point3D value) {
        if (angularVelocityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          angularVelocity_ = value;
        } else {
          angularVelocityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       */
      public Builder setAngularVelocity(
          apollo.common.Geometry.Point3D.Builder builderForValue) {
        if (angularVelocityBuilder_ == null) {
          angularVelocity_ = builderForValue.build();
        } else {
          angularVelocityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       */
      public Builder mergeAngularVelocity(apollo.common.Geometry.Point3D value) {
        if (angularVelocityBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            angularVelocity_ != null &&
            angularVelocity_ != apollo.common.Geometry.Point3D.getDefaultInstance()) {
            getAngularVelocityBuilder().mergeFrom(value);
          } else {
            angularVelocity_ = value;
          }
        } else {
          angularVelocityBuilder_.mergeFrom(value);
        }
        if (angularVelocity_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       */
      public Builder clearAngularVelocity() {
        bitField0_ = (bitField0_ & ~0x00000010);
        angularVelocity_ = null;
        if (angularVelocityBuilder_ != null) {
          angularVelocityBuilder_.dispose();
          angularVelocityBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       */
      public apollo.common.Geometry.Point3D.Builder getAngularVelocityBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getAngularVelocityFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       */
      public apollo.common.Geometry.Point3DOrBuilder getAngularVelocityOrBuilder() {
        if (angularVelocityBuilder_ != null) {
          return angularVelocityBuilder_.getMessageOrBuilder();
        } else {
          return angularVelocity_ == null ?
              apollo.common.Geometry.Point3D.getDefaultInstance() : angularVelocity_;
        }
      }
      /**
       * <pre>
       * Angular velocity of the vehicle in the map reference frame.
       * Around east/north/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> 
          getAngularVelocityFieldBuilder() {
        if (angularVelocityBuilder_ == null) {
          angularVelocityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder>(
                  getAngularVelocity(),
                  getParentForChildren(),
                  isClean());
          angularVelocity_ = null;
        }
        return angularVelocityBuilder_;
      }

      private double heading_ ;
      /**
       * <pre>
       * Heading
       * The heading is zero when the car is facing East and positive when facing
       * North.
       * </pre>
       *
       * <code>optional double heading = 6;</code>
       * @return Whether the heading field is set.
       */
      @java.lang.Override
      public boolean hasHeading() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Heading
       * The heading is zero when the car is facing East and positive when facing
       * North.
       * </pre>
       *
       * <code>optional double heading = 6;</code>
       * @return The heading.
       */
      @java.lang.Override
      public double getHeading() {
        return heading_;
      }
      /**
       * <pre>
       * Heading
       * The heading is zero when the car is facing East and positive when facing
       * North.
       * </pre>
       *
       * <code>optional double heading = 6;</code>
       * @param value The heading to set.
       * @return This builder for chaining.
       */
      public Builder setHeading(double value) {

        heading_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Heading
       * The heading is zero when the car is facing East and positive when facing
       * North.
       * </pre>
       *
       * <code>optional double heading = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeading() {
        bitField0_ = (bitField0_ & ~0x00000020);
        heading_ = 0D;
        onChanged();
        return this;
      }

      private apollo.common.Geometry.Point3D linearAccelerationVrf_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> linearAccelerationVrfBuilder_;
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       * @return Whether the linearAccelerationVrf field is set.
       */
      public boolean hasLinearAccelerationVrf() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       * @return The linearAccelerationVrf.
       */
      public apollo.common.Geometry.Point3D getLinearAccelerationVrf() {
        if (linearAccelerationVrfBuilder_ == null) {
          return linearAccelerationVrf_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : linearAccelerationVrf_;
        } else {
          return linearAccelerationVrfBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       */
      public Builder setLinearAccelerationVrf(apollo.common.Geometry.Point3D value) {
        if (linearAccelerationVrfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          linearAccelerationVrf_ = value;
        } else {
          linearAccelerationVrfBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       */
      public Builder setLinearAccelerationVrf(
          apollo.common.Geometry.Point3D.Builder builderForValue) {
        if (linearAccelerationVrfBuilder_ == null) {
          linearAccelerationVrf_ = builderForValue.build();
        } else {
          linearAccelerationVrfBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       */
      public Builder mergeLinearAccelerationVrf(apollo.common.Geometry.Point3D value) {
        if (linearAccelerationVrfBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            linearAccelerationVrf_ != null &&
            linearAccelerationVrf_ != apollo.common.Geometry.Point3D.getDefaultInstance()) {
            getLinearAccelerationVrfBuilder().mergeFrom(value);
          } else {
            linearAccelerationVrf_ = value;
          }
        } else {
          linearAccelerationVrfBuilder_.mergeFrom(value);
        }
        if (linearAccelerationVrf_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       */
      public Builder clearLinearAccelerationVrf() {
        bitField0_ = (bitField0_ & ~0x00000040);
        linearAccelerationVrf_ = null;
        if (linearAccelerationVrfBuilder_ != null) {
          linearAccelerationVrfBuilder_.dispose();
          linearAccelerationVrfBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       */
      public apollo.common.Geometry.Point3D.Builder getLinearAccelerationVrfBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getLinearAccelerationVrfFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       */
      public apollo.common.Geometry.Point3DOrBuilder getLinearAccelerationVrfOrBuilder() {
        if (linearAccelerationVrfBuilder_ != null) {
          return linearAccelerationVrfBuilder_.getMessageOrBuilder();
        } else {
          return linearAccelerationVrf_ == null ?
              apollo.common.Geometry.Point3D.getDefaultInstance() : linearAccelerationVrf_;
        }
      }
      /**
       * <pre>
       * Linear acceleration of the VRP in the vehicle reference frame.
       * Right/forward/up in meters per square second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D linear_acceleration_vrf = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> 
          getLinearAccelerationVrfFieldBuilder() {
        if (linearAccelerationVrfBuilder_ == null) {
          linearAccelerationVrfBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder>(
                  getLinearAccelerationVrf(),
                  getParentForChildren(),
                  isClean());
          linearAccelerationVrf_ = null;
        }
        return linearAccelerationVrfBuilder_;
      }

      private apollo.common.Geometry.Point3D angularVelocityVrf_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> angularVelocityVrfBuilder_;
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       * @return Whether the angularVelocityVrf field is set.
       */
      public boolean hasAngularVelocityVrf() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       * @return The angularVelocityVrf.
       */
      public apollo.common.Geometry.Point3D getAngularVelocityVrf() {
        if (angularVelocityVrfBuilder_ == null) {
          return angularVelocityVrf_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : angularVelocityVrf_;
        } else {
          return angularVelocityVrfBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       */
      public Builder setAngularVelocityVrf(apollo.common.Geometry.Point3D value) {
        if (angularVelocityVrfBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          angularVelocityVrf_ = value;
        } else {
          angularVelocityVrfBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       */
      public Builder setAngularVelocityVrf(
          apollo.common.Geometry.Point3D.Builder builderForValue) {
        if (angularVelocityVrfBuilder_ == null) {
          angularVelocityVrf_ = builderForValue.build();
        } else {
          angularVelocityVrfBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       */
      public Builder mergeAngularVelocityVrf(apollo.common.Geometry.Point3D value) {
        if (angularVelocityVrfBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            angularVelocityVrf_ != null &&
            angularVelocityVrf_ != apollo.common.Geometry.Point3D.getDefaultInstance()) {
            getAngularVelocityVrfBuilder().mergeFrom(value);
          } else {
            angularVelocityVrf_ = value;
          }
        } else {
          angularVelocityVrfBuilder_.mergeFrom(value);
        }
        if (angularVelocityVrf_ != null) {
          bitField0_ |= 0x00000080;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       */
      public Builder clearAngularVelocityVrf() {
        bitField0_ = (bitField0_ & ~0x00000080);
        angularVelocityVrf_ = null;
        if (angularVelocityVrfBuilder_ != null) {
          angularVelocityVrfBuilder_.dispose();
          angularVelocityVrfBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       */
      public apollo.common.Geometry.Point3D.Builder getAngularVelocityVrfBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getAngularVelocityVrfFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       */
      public apollo.common.Geometry.Point3DOrBuilder getAngularVelocityVrfOrBuilder() {
        if (angularVelocityVrfBuilder_ != null) {
          return angularVelocityVrfBuilder_.getMessageOrBuilder();
        } else {
          return angularVelocityVrf_ == null ?
              apollo.common.Geometry.Point3D.getDefaultInstance() : angularVelocityVrf_;
        }
      }
      /**
       * <pre>
       * Angular velocity of the VRP in the vehicle reference frame.
       * Around right/forward/up axes in radians per second.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D angular_velocity_vrf = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> 
          getAngularVelocityVrfFieldBuilder() {
        if (angularVelocityVrfBuilder_ == null) {
          angularVelocityVrfBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder>(
                  getAngularVelocityVrf(),
                  getParentForChildren(),
                  isClean());
          angularVelocityVrf_ = null;
        }
        return angularVelocityVrfBuilder_;
      }

      private apollo.common.Geometry.Point3D eulerAngles_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> eulerAnglesBuilder_;
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       * @return Whether the eulerAngles field is set.
       */
      public boolean hasEulerAngles() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       * @return The eulerAngles.
       */
      public apollo.common.Geometry.Point3D getEulerAngles() {
        if (eulerAnglesBuilder_ == null) {
          return eulerAngles_ == null ? apollo.common.Geometry.Point3D.getDefaultInstance() : eulerAngles_;
        } else {
          return eulerAnglesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       */
      public Builder setEulerAngles(apollo.common.Geometry.Point3D value) {
        if (eulerAnglesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eulerAngles_ = value;
        } else {
          eulerAnglesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       */
      public Builder setEulerAngles(
          apollo.common.Geometry.Point3D.Builder builderForValue) {
        if (eulerAnglesBuilder_ == null) {
          eulerAngles_ = builderForValue.build();
        } else {
          eulerAnglesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       */
      public Builder mergeEulerAngles(apollo.common.Geometry.Point3D value) {
        if (eulerAnglesBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0) &&
            eulerAngles_ != null &&
            eulerAngles_ != apollo.common.Geometry.Point3D.getDefaultInstance()) {
            getEulerAnglesBuilder().mergeFrom(value);
          } else {
            eulerAngles_ = value;
          }
        } else {
          eulerAnglesBuilder_.mergeFrom(value);
        }
        if (eulerAngles_ != null) {
          bitField0_ |= 0x00000100;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       */
      public Builder clearEulerAngles() {
        bitField0_ = (bitField0_ & ~0x00000100);
        eulerAngles_ = null;
        if (eulerAnglesBuilder_ != null) {
          eulerAnglesBuilder_.dispose();
          eulerAnglesBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       */
      public apollo.common.Geometry.Point3D.Builder getEulerAnglesBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getEulerAnglesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       */
      public apollo.common.Geometry.Point3DOrBuilder getEulerAnglesOrBuilder() {
        if (eulerAnglesBuilder_ != null) {
          return eulerAnglesBuilder_.getMessageOrBuilder();
        } else {
          return eulerAngles_ == null ?
              apollo.common.Geometry.Point3D.getDefaultInstance() : eulerAngles_;
        }
      }
      /**
       * <pre>
       * Roll/pitch/yaw that represents a rotation with intrinsic sequence z-x-y.
       * in world coordinate (East/North/Up)
       * The roll, in (-pi/2, pi/2), corresponds to a rotation around the y-axis.
       * The pitch, in [-pi, pi), corresponds to a rotation around the x-axis.
       * The yaw, in [-pi, pi), corresponds to a rotation around the z-axis.
       * The direction of rotation follows the right-hand rule.
       * </pre>
       *
       * <code>optional .apollo.common.Point3D euler_angles = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder> 
          getEulerAnglesFieldBuilder() {
        if (eulerAnglesBuilder_ == null) {
          eulerAnglesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.common.Geometry.Point3D, apollo.common.Geometry.Point3D.Builder, apollo.common.Geometry.Point3DOrBuilder>(
                  getEulerAngles(),
                  getParentForChildren(),
                  isClean());
          eulerAngles_ = null;
        }
        return eulerAnglesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:apollo.localization.Pose)
    }

    // @@protoc_insertion_point(class_scope:apollo.localization.Pose)
    private static final apollo.localization.PoseOuterClass.Pose DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new apollo.localization.PoseOuterClass.Pose();
    }

    public static apollo.localization.PoseOuterClass.Pose getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Pose>
        PARSER = new com.google.protobuf.AbstractParser<Pose>() {
      @java.lang.Override
      public Pose parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Pose> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Pose> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public apollo.localization.PoseOuterClass.Pose getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_apollo_localization_Pose_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_apollo_localization_Pose_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n%modules/localization/proto/pose.proto\022" +
      "\023apollo.localization\032#modules/common/pro" +
      "to/geometry.proto\"\247\003\n\004Pose\022)\n\010position\030\001" +
      " \001(\0132\027.apollo.common.PointENU\022.\n\013orienta" +
      "tion\030\002 \001(\0132\031.apollo.common.Quaternion\022/\n" +
      "\017linear_velocity\030\003 \001(\0132\026.apollo.common.P" +
      "oint3D\0223\n\023linear_acceleration\030\004 \001(\0132\026.ap" +
      "ollo.common.Point3D\0220\n\020angular_velocity\030" +
      "\005 \001(\0132\026.apollo.common.Point3D\022\017\n\007heading" +
      "\030\006 \001(\001\0227\n\027linear_acceleration_vrf\030\007 \001(\0132" +
      "\026.apollo.common.Point3D\0224\n\024angular_veloc" +
      "ity_vrf\030\010 \001(\0132\026.apollo.common.Point3D\022,\n" +
      "\014euler_angles\030\t \001(\0132\026.apollo.common.Poin" +
      "t3D"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          apollo.common.Geometry.getDescriptor(),
        });
    internal_static_apollo_localization_Pose_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_apollo_localization_Pose_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_apollo_localization_Pose_descriptor,
        new java.lang.String[] { "Position", "Orientation", "LinearVelocity", "LinearAcceleration", "AngularVelocity", "Heading", "LinearAccelerationVrf", "AngularVelocityVrf", "EulerAngles", });
    descriptor.resolveAllFeaturesImmutable();
    apollo.common.Geometry.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
