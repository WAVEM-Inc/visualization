// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_lane.proto
// Protobuf Java Version: 4.26.1

package apollo.hdmap;

public final class MapLane {
  private MapLane() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      MapLane.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface LaneBoundaryTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:apollo.hdmap.LaneBoundaryType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Offset relative to the starting point of boundary
     * </pre>
     *
     * <code>optional double s = 1;</code>
     * @return Whether the s field is set.
     */
    boolean hasS();
    /**
     * <pre>
     * Offset relative to the starting point of boundary
     * </pre>
     *
     * <code>optional double s = 1;</code>
     * @return The s.
     */
    double getS();

    /**
     * <pre>
     * support multiple types
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
     * @return A list containing the types.
     */
    java.util.List<apollo.hdmap.MapLane.LaneBoundaryType.Type> getTypesList();
    /**
     * <pre>
     * support multiple types
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
     * @return The count of types.
     */
    int getTypesCount();
    /**
     * <pre>
     * support multiple types
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
     * @param index The index of the element to return.
     * @return The types at the given index.
     */
    apollo.hdmap.MapLane.LaneBoundaryType.Type getTypes(int index);
  }
  /**
   * Protobuf type {@code apollo.hdmap.LaneBoundaryType}
   */
  public static final class LaneBoundaryType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:apollo.hdmap.LaneBoundaryType)
      LaneBoundaryTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        LaneBoundaryType.class.getName());
    }
    // Use LaneBoundaryType.newBuilder() to construct.
    private LaneBoundaryType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private LaneBoundaryType() {
      types_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundaryType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundaryType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              apollo.hdmap.MapLane.LaneBoundaryType.class, apollo.hdmap.MapLane.LaneBoundaryType.Builder.class);
    }

    /**
     * Protobuf enum {@code apollo.hdmap.LaneBoundaryType.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <code>DOTTED_YELLOW = 1;</code>
       */
      DOTTED_YELLOW(1),
      /**
       * <code>DOTTED_WHITE = 2;</code>
       */
      DOTTED_WHITE(2),
      /**
       * <code>SOLID_YELLOW = 3;</code>
       */
      SOLID_YELLOW(3),
      /**
       * <code>SOLID_WHITE = 4;</code>
       */
      SOLID_WHITE(4),
      /**
       * <code>DOUBLE_YELLOW = 5;</code>
       */
      DOUBLE_YELLOW(5),
      /**
       * <code>CURB = 6;</code>
       */
      CURB(6),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 26,
          /* patch= */ 1,
          /* suffix= */ "",
          Type.class.getName());
      }
      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <code>DOTTED_YELLOW = 1;</code>
       */
      public static final int DOTTED_YELLOW_VALUE = 1;
      /**
       * <code>DOTTED_WHITE = 2;</code>
       */
      public static final int DOTTED_WHITE_VALUE = 2;
      /**
       * <code>SOLID_YELLOW = 3;</code>
       */
      public static final int SOLID_YELLOW_VALUE = 3;
      /**
       * <code>SOLID_WHITE = 4;</code>
       */
      public static final int SOLID_WHITE_VALUE = 4;
      /**
       * <code>DOUBLE_YELLOW = 5;</code>
       */
      public static final int DOUBLE_YELLOW_VALUE = 5;
      /**
       * <code>CURB = 6;</code>
       */
      public static final int CURB_VALUE = 6;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return DOTTED_YELLOW;
          case 2: return DOTTED_WHITE;
          case 3: return SOLID_YELLOW;
          case 4: return SOLID_WHITE;
          case 5: return DOUBLE_YELLOW;
          case 6: return CURB;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return apollo.hdmap.MapLane.LaneBoundaryType.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:apollo.hdmap.LaneBoundaryType.Type)
    }

    private int bitField0_;
    public static final int S_FIELD_NUMBER = 1;
    private double s_ = 0D;
    /**
     * <pre>
     * Offset relative to the starting point of boundary
     * </pre>
     *
     * <code>optional double s = 1;</code>
     * @return Whether the s field is set.
     */
    @java.lang.Override
    public boolean hasS() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Offset relative to the starting point of boundary
     * </pre>
     *
     * <code>optional double s = 1;</code>
     * @return The s.
     */
    @java.lang.Override
    public double getS() {
      return s_;
    }

    public static final int TYPES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<java.lang.Integer> types_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, apollo.hdmap.MapLane.LaneBoundaryType.Type> types_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, apollo.hdmap.MapLane.LaneBoundaryType.Type>() {
              public apollo.hdmap.MapLane.LaneBoundaryType.Type convert(java.lang.Integer from) {
                apollo.hdmap.MapLane.LaneBoundaryType.Type result = apollo.hdmap.MapLane.LaneBoundaryType.Type.forNumber(from);
                return result == null ? apollo.hdmap.MapLane.LaneBoundaryType.Type.UNKNOWN : result;
              }
            };
    /**
     * <pre>
     * support multiple types
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
     * @return A list containing the types.
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapLane.LaneBoundaryType.Type> getTypesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, apollo.hdmap.MapLane.LaneBoundaryType.Type>(types_, types_converter_);
    }
    /**
     * <pre>
     * support multiple types
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
     * @return The count of types.
     */
    @java.lang.Override
    public int getTypesCount() {
      return types_.size();
    }
    /**
     * <pre>
     * support multiple types
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
     * @param index The index of the element to return.
     * @return The types at the given index.
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundaryType.Type getTypes(int index) {
      return types_converter_.convert(types_.get(index));
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeDouble(1, s_);
      }
      for (int i = 0; i < types_.size(); i++) {
        output.writeEnum(2, types_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, s_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < types_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(types_.get(i));
        }
        size += dataSize;
        size += 1 * types_.size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof apollo.hdmap.MapLane.LaneBoundaryType)) {
        return super.equals(obj);
      }
      apollo.hdmap.MapLane.LaneBoundaryType other = (apollo.hdmap.MapLane.LaneBoundaryType) obj;

      if (hasS() != other.hasS()) return false;
      if (hasS()) {
        if (java.lang.Double.doubleToLongBits(getS())
            != java.lang.Double.doubleToLongBits(
                other.getS())) return false;
      }
      if (!types_.equals(other.types_)) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasS()) {
        hash = (37 * hash) + S_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getS()));
      }
      if (getTypesCount() > 0) {
        hash = (37 * hash) + TYPES_FIELD_NUMBER;
        hash = (53 * hash) + types_.hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static apollo.hdmap.MapLane.LaneBoundaryType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static apollo.hdmap.MapLane.LaneBoundaryType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.hdmap.MapLane.LaneBoundaryType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(apollo.hdmap.MapLane.LaneBoundaryType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code apollo.hdmap.LaneBoundaryType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:apollo.hdmap.LaneBoundaryType)
        apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundaryType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundaryType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                apollo.hdmap.MapLane.LaneBoundaryType.class, apollo.hdmap.MapLane.LaneBoundaryType.Builder.class);
      }

      // Construct using apollo.hdmap.MapLane.LaneBoundaryType.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        s_ = 0D;
        types_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundaryType_descriptor;
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneBoundaryType getDefaultInstanceForType() {
        return apollo.hdmap.MapLane.LaneBoundaryType.getDefaultInstance();
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneBoundaryType build() {
        apollo.hdmap.MapLane.LaneBoundaryType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneBoundaryType buildPartial() {
        apollo.hdmap.MapLane.LaneBoundaryType result = new apollo.hdmap.MapLane.LaneBoundaryType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(apollo.hdmap.MapLane.LaneBoundaryType result) {
        if (((bitField0_ & 0x00000002) != 0)) {
          types_ = java.util.Collections.unmodifiableList(types_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.types_ = types_;
      }

      private void buildPartial0(apollo.hdmap.MapLane.LaneBoundaryType result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.s_ = s_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof apollo.hdmap.MapLane.LaneBoundaryType) {
          return mergeFrom((apollo.hdmap.MapLane.LaneBoundaryType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(apollo.hdmap.MapLane.LaneBoundaryType other) {
        if (other == apollo.hdmap.MapLane.LaneBoundaryType.getDefaultInstance()) return this;
        if (other.hasS()) {
          setS(other.getS());
        }
        if (!other.types_.isEmpty()) {
          if (types_.isEmpty()) {
            types_ = other.types_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTypesIsMutable();
            types_.addAll(other.types_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                s_ = input.readDouble();
                bitField0_ |= 0x00000001;
                break;
              } // case 9
              case 16: {
                int tmpRaw = input.readEnum();
                apollo.hdmap.MapLane.LaneBoundaryType.Type tmpValue =
                    apollo.hdmap.MapLane.LaneBoundaryType.Type.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(2, tmpRaw);
                } else {
                  ensureTypesIsMutable();
                  types_.add(tmpRaw);
                }
                break;
              } // case 16
              case 18: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int tmpRaw = input.readEnum();
                  apollo.hdmap.MapLane.LaneBoundaryType.Type tmpValue =
                      apollo.hdmap.MapLane.LaneBoundaryType.Type.forNumber(tmpRaw);
                  if (tmpValue == null) {
                    mergeUnknownVarintField(2, tmpRaw);
                  } else {
                    ensureTypesIsMutable();
                    types_.add(tmpRaw);
                  }
                }
                input.popLimit(oldLimit);
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double s_ ;
      /**
       * <pre>
       * Offset relative to the starting point of boundary
       * </pre>
       *
       * <code>optional double s = 1;</code>
       * @return Whether the s field is set.
       */
      @java.lang.Override
      public boolean hasS() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Offset relative to the starting point of boundary
       * </pre>
       *
       * <code>optional double s = 1;</code>
       * @return The s.
       */
      @java.lang.Override
      public double getS() {
        return s_;
      }
      /**
       * <pre>
       * Offset relative to the starting point of boundary
       * </pre>
       *
       * <code>optional double s = 1;</code>
       * @param value The s to set.
       * @return This builder for chaining.
       */
      public Builder setS(double value) {

        s_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Offset relative to the starting point of boundary
       * </pre>
       *
       * <code>optional double s = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearS() {
        bitField0_ = (bitField0_ & ~0x00000001);
        s_ = 0D;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> types_ =
        java.util.Collections.emptyList();
      private void ensureTypesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          types_ = new java.util.ArrayList<java.lang.Integer>(types_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <pre>
       * support multiple types
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
       * @return A list containing the types.
       */
      public java.util.List<apollo.hdmap.MapLane.LaneBoundaryType.Type> getTypesList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, apollo.hdmap.MapLane.LaneBoundaryType.Type>(types_, types_converter_);
      }
      /**
       * <pre>
       * support multiple types
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
       * @return The count of types.
       */
      public int getTypesCount() {
        return types_.size();
      }
      /**
       * <pre>
       * support multiple types
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
       * @param index The index of the element to return.
       * @return The types at the given index.
       */
      public apollo.hdmap.MapLane.LaneBoundaryType.Type getTypes(int index) {
        return types_converter_.convert(types_.get(index));
      }
      /**
       * <pre>
       * support multiple types
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
       * @param index The index to set the value at.
       * @param value The types to set.
       * @return This builder for chaining.
       */
      public Builder setTypes(
          int index, apollo.hdmap.MapLane.LaneBoundaryType.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTypesIsMutable();
        types_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * support multiple types
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
       * @param value The types to add.
       * @return This builder for chaining.
       */
      public Builder addTypes(apollo.hdmap.MapLane.LaneBoundaryType.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTypesIsMutable();
        types_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * support multiple types
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
       * @param values The types to add.
       * @return This builder for chaining.
       */
      public Builder addAllTypes(
          java.lang.Iterable<? extends apollo.hdmap.MapLane.LaneBoundaryType.Type> values) {
        ensureTypesIsMutable();
        for (apollo.hdmap.MapLane.LaneBoundaryType.Type value : values) {
          types_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * support multiple types
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTypes() {
        types_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:apollo.hdmap.LaneBoundaryType)
    }

    // @@protoc_insertion_point(class_scope:apollo.hdmap.LaneBoundaryType)
    private static final apollo.hdmap.MapLane.LaneBoundaryType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new apollo.hdmap.MapLane.LaneBoundaryType();
    }

    public static apollo.hdmap.MapLane.LaneBoundaryType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LaneBoundaryType>
        PARSER = new com.google.protobuf.AbstractParser<LaneBoundaryType>() {
      @java.lang.Override
      public LaneBoundaryType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LaneBoundaryType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LaneBoundaryType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundaryType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LaneBoundaryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:apollo.hdmap.LaneBoundary)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .apollo.hdmap.Curve curve = 1;</code>
     * @return Whether the curve field is set.
     */
    boolean hasCurve();
    /**
     * <code>optional .apollo.hdmap.Curve curve = 1;</code>
     * @return The curve.
     */
    apollo.hdmap.MapGeometry.Curve getCurve();
    /**
     * <code>optional .apollo.hdmap.Curve curve = 1;</code>
     */
    apollo.hdmap.MapGeometry.CurveOrBuilder getCurveOrBuilder();

    /**
     * <code>optional double length = 2;</code>
     * @return Whether the length field is set.
     */
    boolean hasLength();
    /**
     * <code>optional double length = 2;</code>
     * @return The length.
     */
    double getLength();

    /**
     * <pre>
     * indicate whether the lane boundary exists in real world
     * </pre>
     *
     * <code>optional bool virtual = 3;</code>
     * @return Whether the virtual field is set.
     */
    boolean hasVirtual();
    /**
     * <pre>
     * indicate whether the lane boundary exists in real world
     * </pre>
     *
     * <code>optional bool virtual = 3;</code>
     * @return The virtual.
     */
    boolean getVirtual();

    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    java.util.List<apollo.hdmap.MapLane.LaneBoundaryType> 
        getBoundaryTypeList();
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    apollo.hdmap.MapLane.LaneBoundaryType getBoundaryType(int index);
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    int getBoundaryTypeCount();
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    java.util.List<? extends apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder> 
        getBoundaryTypeOrBuilderList();
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder getBoundaryTypeOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code apollo.hdmap.LaneBoundary}
   */
  public static final class LaneBoundary extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:apollo.hdmap.LaneBoundary)
      LaneBoundaryOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        LaneBoundary.class.getName());
    }
    // Use LaneBoundary.newBuilder() to construct.
    private LaneBoundary(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private LaneBoundary() {
      boundaryType_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundary_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundary_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              apollo.hdmap.MapLane.LaneBoundary.class, apollo.hdmap.MapLane.LaneBoundary.Builder.class);
    }

    private int bitField0_;
    public static final int CURVE_FIELD_NUMBER = 1;
    private apollo.hdmap.MapGeometry.Curve curve_;
    /**
     * <code>optional .apollo.hdmap.Curve curve = 1;</code>
     * @return Whether the curve field is set.
     */
    @java.lang.Override
    public boolean hasCurve() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .apollo.hdmap.Curve curve = 1;</code>
     * @return The curve.
     */
    @java.lang.Override
    public apollo.hdmap.MapGeometry.Curve getCurve() {
      return curve_ == null ? apollo.hdmap.MapGeometry.Curve.getDefaultInstance() : curve_;
    }
    /**
     * <code>optional .apollo.hdmap.Curve curve = 1;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapGeometry.CurveOrBuilder getCurveOrBuilder() {
      return curve_ == null ? apollo.hdmap.MapGeometry.Curve.getDefaultInstance() : curve_;
    }

    public static final int LENGTH_FIELD_NUMBER = 2;
    private double length_ = 0D;
    /**
     * <code>optional double length = 2;</code>
     * @return Whether the length field is set.
     */
    @java.lang.Override
    public boolean hasLength() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional double length = 2;</code>
     * @return The length.
     */
    @java.lang.Override
    public double getLength() {
      return length_;
    }

    public static final int VIRTUAL_FIELD_NUMBER = 3;
    private boolean virtual_ = false;
    /**
     * <pre>
     * indicate whether the lane boundary exists in real world
     * </pre>
     *
     * <code>optional bool virtual = 3;</code>
     * @return Whether the virtual field is set.
     */
    @java.lang.Override
    public boolean hasVirtual() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * indicate whether the lane boundary exists in real world
     * </pre>
     *
     * <code>optional bool virtual = 3;</code>
     * @return The virtual.
     */
    @java.lang.Override
    public boolean getVirtual() {
      return virtual_;
    }

    public static final int BOUNDARY_TYPE_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapLane.LaneBoundaryType> boundaryType_;
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapLane.LaneBoundaryType> getBoundaryTypeList() {
      return boundaryType_;
    }
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder> 
        getBoundaryTypeOrBuilderList() {
      return boundaryType_;
    }
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    @java.lang.Override
    public int getBoundaryTypeCount() {
      return boundaryType_.size();
    }
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundaryType getBoundaryType(int index) {
      return boundaryType_.get(index);
    }
    /**
     * <pre>
     * in ascending order of s
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder getBoundaryTypeOrBuilder(
        int index) {
      return boundaryType_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getCurve());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, length_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, virtual_);
      }
      for (int i = 0; i < boundaryType_.size(); i++) {
        output.writeMessage(4, boundaryType_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCurve());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, length_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, virtual_);
      }
      for (int i = 0; i < boundaryType_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, boundaryType_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof apollo.hdmap.MapLane.LaneBoundary)) {
        return super.equals(obj);
      }
      apollo.hdmap.MapLane.LaneBoundary other = (apollo.hdmap.MapLane.LaneBoundary) obj;

      if (hasCurve() != other.hasCurve()) return false;
      if (hasCurve()) {
        if (!getCurve()
            .equals(other.getCurve())) return false;
      }
      if (hasLength() != other.hasLength()) return false;
      if (hasLength()) {
        if (java.lang.Double.doubleToLongBits(getLength())
            != java.lang.Double.doubleToLongBits(
                other.getLength())) return false;
      }
      if (hasVirtual() != other.hasVirtual()) return false;
      if (hasVirtual()) {
        if (getVirtual()
            != other.getVirtual()) return false;
      }
      if (!getBoundaryTypeList()
          .equals(other.getBoundaryTypeList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCurve()) {
        hash = (37 * hash) + CURVE_FIELD_NUMBER;
        hash = (53 * hash) + getCurve().hashCode();
      }
      if (hasLength()) {
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getLength()));
      }
      if (hasVirtual()) {
        hash = (37 * hash) + VIRTUAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVirtual());
      }
      if (getBoundaryTypeCount() > 0) {
        hash = (37 * hash) + BOUNDARY_TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getBoundaryTypeList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static apollo.hdmap.MapLane.LaneBoundary parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static apollo.hdmap.MapLane.LaneBoundary parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.hdmap.MapLane.LaneBoundary parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(apollo.hdmap.MapLane.LaneBoundary prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code apollo.hdmap.LaneBoundary}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:apollo.hdmap.LaneBoundary)
        apollo.hdmap.MapLane.LaneBoundaryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundary_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundary_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                apollo.hdmap.MapLane.LaneBoundary.class, apollo.hdmap.MapLane.LaneBoundary.Builder.class);
      }

      // Construct using apollo.hdmap.MapLane.LaneBoundary.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getCurveFieldBuilder();
          getBoundaryTypeFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        curve_ = null;
        if (curveBuilder_ != null) {
          curveBuilder_.dispose();
          curveBuilder_ = null;
        }
        length_ = 0D;
        virtual_ = false;
        if (boundaryTypeBuilder_ == null) {
          boundaryType_ = java.util.Collections.emptyList();
        } else {
          boundaryType_ = null;
          boundaryTypeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneBoundary_descriptor;
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneBoundary getDefaultInstanceForType() {
        return apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance();
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneBoundary build() {
        apollo.hdmap.MapLane.LaneBoundary result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneBoundary buildPartial() {
        apollo.hdmap.MapLane.LaneBoundary result = new apollo.hdmap.MapLane.LaneBoundary(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(apollo.hdmap.MapLane.LaneBoundary result) {
        if (boundaryTypeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            boundaryType_ = java.util.Collections.unmodifiableList(boundaryType_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.boundaryType_ = boundaryType_;
        } else {
          result.boundaryType_ = boundaryTypeBuilder_.build();
        }
      }

      private void buildPartial0(apollo.hdmap.MapLane.LaneBoundary result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.curve_ = curveBuilder_ == null
              ? curve_
              : curveBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.length_ = length_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.virtual_ = virtual_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof apollo.hdmap.MapLane.LaneBoundary) {
          return mergeFrom((apollo.hdmap.MapLane.LaneBoundary)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(apollo.hdmap.MapLane.LaneBoundary other) {
        if (other == apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance()) return this;
        if (other.hasCurve()) {
          mergeCurve(other.getCurve());
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        if (other.hasVirtual()) {
          setVirtual(other.getVirtual());
        }
        if (boundaryTypeBuilder_ == null) {
          if (!other.boundaryType_.isEmpty()) {
            if (boundaryType_.isEmpty()) {
              boundaryType_ = other.boundaryType_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureBoundaryTypeIsMutable();
              boundaryType_.addAll(other.boundaryType_);
            }
            onChanged();
          }
        } else {
          if (!other.boundaryType_.isEmpty()) {
            if (boundaryTypeBuilder_.isEmpty()) {
              boundaryTypeBuilder_.dispose();
              boundaryTypeBuilder_ = null;
              boundaryType_ = other.boundaryType_;
              bitField0_ = (bitField0_ & ~0x00000008);
              boundaryTypeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBoundaryTypeFieldBuilder() : null;
            } else {
              boundaryTypeBuilder_.addAllMessages(other.boundaryType_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getCurveFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 17: {
                length_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 24: {
                virtual_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                apollo.hdmap.MapLane.LaneBoundaryType m =
                    input.readMessage(
                        apollo.hdmap.MapLane.LaneBoundaryType.parser(),
                        extensionRegistry);
                if (boundaryTypeBuilder_ == null) {
                  ensureBoundaryTypeIsMutable();
                  boundaryType_.add(m);
                } else {
                  boundaryTypeBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private apollo.hdmap.MapGeometry.Curve curve_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapGeometry.Curve, apollo.hdmap.MapGeometry.Curve.Builder, apollo.hdmap.MapGeometry.CurveOrBuilder> curveBuilder_;
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       * @return Whether the curve field is set.
       */
      public boolean hasCurve() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       * @return The curve.
       */
      public apollo.hdmap.MapGeometry.Curve getCurve() {
        if (curveBuilder_ == null) {
          return curve_ == null ? apollo.hdmap.MapGeometry.Curve.getDefaultInstance() : curve_;
        } else {
          return curveBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       */
      public Builder setCurve(apollo.hdmap.MapGeometry.Curve value) {
        if (curveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          curve_ = value;
        } else {
          curveBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       */
      public Builder setCurve(
          apollo.hdmap.MapGeometry.Curve.Builder builderForValue) {
        if (curveBuilder_ == null) {
          curve_ = builderForValue.build();
        } else {
          curveBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       */
      public Builder mergeCurve(apollo.hdmap.MapGeometry.Curve value) {
        if (curveBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            curve_ != null &&
            curve_ != apollo.hdmap.MapGeometry.Curve.getDefaultInstance()) {
            getCurveBuilder().mergeFrom(value);
          } else {
            curve_ = value;
          }
        } else {
          curveBuilder_.mergeFrom(value);
        }
        if (curve_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       */
      public Builder clearCurve() {
        bitField0_ = (bitField0_ & ~0x00000001);
        curve_ = null;
        if (curveBuilder_ != null) {
          curveBuilder_.dispose();
          curveBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       */
      public apollo.hdmap.MapGeometry.Curve.Builder getCurveBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCurveFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       */
      public apollo.hdmap.MapGeometry.CurveOrBuilder getCurveOrBuilder() {
        if (curveBuilder_ != null) {
          return curveBuilder_.getMessageOrBuilder();
        } else {
          return curve_ == null ?
              apollo.hdmap.MapGeometry.Curve.getDefaultInstance() : curve_;
        }
      }
      /**
       * <code>optional .apollo.hdmap.Curve curve = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapGeometry.Curve, apollo.hdmap.MapGeometry.Curve.Builder, apollo.hdmap.MapGeometry.CurveOrBuilder> 
          getCurveFieldBuilder() {
        if (curveBuilder_ == null) {
          curveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.hdmap.MapGeometry.Curve, apollo.hdmap.MapGeometry.Curve.Builder, apollo.hdmap.MapGeometry.CurveOrBuilder>(
                  getCurve(),
                  getParentForChildren(),
                  isClean());
          curve_ = null;
        }
        return curveBuilder_;
      }

      private double length_ ;
      /**
       * <code>optional double length = 2;</code>
       * @return Whether the length field is set.
       */
      @java.lang.Override
      public boolean hasLength() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional double length = 2;</code>
       * @return The length.
       */
      @java.lang.Override
      public double getLength() {
        return length_;
      }
      /**
       * <code>optional double length = 2;</code>
       * @param value The length to set.
       * @return This builder for chaining.
       */
      public Builder setLength(double value) {

        length_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional double length = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000002);
        length_ = 0D;
        onChanged();
        return this;
      }

      private boolean virtual_ ;
      /**
       * <pre>
       * indicate whether the lane boundary exists in real world
       * </pre>
       *
       * <code>optional bool virtual = 3;</code>
       * @return Whether the virtual field is set.
       */
      @java.lang.Override
      public boolean hasVirtual() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * indicate whether the lane boundary exists in real world
       * </pre>
       *
       * <code>optional bool virtual = 3;</code>
       * @return The virtual.
       */
      @java.lang.Override
      public boolean getVirtual() {
        return virtual_;
      }
      /**
       * <pre>
       * indicate whether the lane boundary exists in real world
       * </pre>
       *
       * <code>optional bool virtual = 3;</code>
       * @param value The virtual to set.
       * @return This builder for chaining.
       */
      public Builder setVirtual(boolean value) {

        virtual_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * indicate whether the lane boundary exists in real world
       * </pre>
       *
       * <code>optional bool virtual = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearVirtual() {
        bitField0_ = (bitField0_ & ~0x00000004);
        virtual_ = false;
        onChanged();
        return this;
      }

      private java.util.List<apollo.hdmap.MapLane.LaneBoundaryType> boundaryType_ =
        java.util.Collections.emptyList();
      private void ensureBoundaryTypeIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          boundaryType_ = new java.util.ArrayList<apollo.hdmap.MapLane.LaneBoundaryType>(boundaryType_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneBoundaryType, apollo.hdmap.MapLane.LaneBoundaryType.Builder, apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder> boundaryTypeBuilder_;

      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneBoundaryType> getBoundaryTypeList() {
        if (boundaryTypeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(boundaryType_);
        } else {
          return boundaryTypeBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public int getBoundaryTypeCount() {
        if (boundaryTypeBuilder_ == null) {
          return boundaryType_.size();
        } else {
          return boundaryTypeBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundaryType getBoundaryType(int index) {
        if (boundaryTypeBuilder_ == null) {
          return boundaryType_.get(index);
        } else {
          return boundaryTypeBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder setBoundaryType(
          int index, apollo.hdmap.MapLane.LaneBoundaryType value) {
        if (boundaryTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBoundaryTypeIsMutable();
          boundaryType_.set(index, value);
          onChanged();
        } else {
          boundaryTypeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder setBoundaryType(
          int index, apollo.hdmap.MapLane.LaneBoundaryType.Builder builderForValue) {
        if (boundaryTypeBuilder_ == null) {
          ensureBoundaryTypeIsMutable();
          boundaryType_.set(index, builderForValue.build());
          onChanged();
        } else {
          boundaryTypeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder addBoundaryType(apollo.hdmap.MapLane.LaneBoundaryType value) {
        if (boundaryTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBoundaryTypeIsMutable();
          boundaryType_.add(value);
          onChanged();
        } else {
          boundaryTypeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder addBoundaryType(
          int index, apollo.hdmap.MapLane.LaneBoundaryType value) {
        if (boundaryTypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBoundaryTypeIsMutable();
          boundaryType_.add(index, value);
          onChanged();
        } else {
          boundaryTypeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder addBoundaryType(
          apollo.hdmap.MapLane.LaneBoundaryType.Builder builderForValue) {
        if (boundaryTypeBuilder_ == null) {
          ensureBoundaryTypeIsMutable();
          boundaryType_.add(builderForValue.build());
          onChanged();
        } else {
          boundaryTypeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder addBoundaryType(
          int index, apollo.hdmap.MapLane.LaneBoundaryType.Builder builderForValue) {
        if (boundaryTypeBuilder_ == null) {
          ensureBoundaryTypeIsMutable();
          boundaryType_.add(index, builderForValue.build());
          onChanged();
        } else {
          boundaryTypeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder addAllBoundaryType(
          java.lang.Iterable<? extends apollo.hdmap.MapLane.LaneBoundaryType> values) {
        if (boundaryTypeBuilder_ == null) {
          ensureBoundaryTypeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, boundaryType_);
          onChanged();
        } else {
          boundaryTypeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder clearBoundaryType() {
        if (boundaryTypeBuilder_ == null) {
          boundaryType_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          boundaryTypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public Builder removeBoundaryType(int index) {
        if (boundaryTypeBuilder_ == null) {
          ensureBoundaryTypeIsMutable();
          boundaryType_.remove(index);
          onChanged();
        } else {
          boundaryTypeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundaryType.Builder getBoundaryTypeBuilder(
          int index) {
        return getBoundaryTypeFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder getBoundaryTypeOrBuilder(
          int index) {
        if (boundaryTypeBuilder_ == null) {
          return boundaryType_.get(index);  } else {
          return boundaryTypeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder> 
           getBoundaryTypeOrBuilderList() {
        if (boundaryTypeBuilder_ != null) {
          return boundaryTypeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(boundaryType_);
        }
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundaryType.Builder addBoundaryTypeBuilder() {
        return getBoundaryTypeFieldBuilder().addBuilder(
            apollo.hdmap.MapLane.LaneBoundaryType.getDefaultInstance());
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundaryType.Builder addBoundaryTypeBuilder(
          int index) {
        return getBoundaryTypeFieldBuilder().addBuilder(
            index, apollo.hdmap.MapLane.LaneBoundaryType.getDefaultInstance());
      }
      /**
       * <pre>
       * in ascending order of s
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneBoundaryType.Builder> 
           getBoundaryTypeBuilderList() {
        return getBoundaryTypeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneBoundaryType, apollo.hdmap.MapLane.LaneBoundaryType.Builder, apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder> 
          getBoundaryTypeFieldBuilder() {
        if (boundaryTypeBuilder_ == null) {
          boundaryTypeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapLane.LaneBoundaryType, apollo.hdmap.MapLane.LaneBoundaryType.Builder, apollo.hdmap.MapLane.LaneBoundaryTypeOrBuilder>(
                  boundaryType_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          boundaryType_ = null;
        }
        return boundaryTypeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:apollo.hdmap.LaneBoundary)
    }

    // @@protoc_insertion_point(class_scope:apollo.hdmap.LaneBoundary)
    private static final apollo.hdmap.MapLane.LaneBoundary DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new apollo.hdmap.MapLane.LaneBoundary();
    }

    public static apollo.hdmap.MapLane.LaneBoundary getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LaneBoundary>
        PARSER = new com.google.protobuf.AbstractParser<LaneBoundary>() {
      @java.lang.Override
      public LaneBoundary parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LaneBoundary> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LaneBoundary> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundary getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LaneSampleAssociationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:apollo.hdmap.LaneSampleAssociation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double s = 1;</code>
     * @return Whether the s field is set.
     */
    boolean hasS();
    /**
     * <code>optional double s = 1;</code>
     * @return The s.
     */
    double getS();

    /**
     * <code>optional double width = 2;</code>
     * @return Whether the width field is set.
     */
    boolean hasWidth();
    /**
     * <code>optional double width = 2;</code>
     * @return The width.
     */
    double getWidth();
  }
  /**
   * <pre>
   * Association between central point to closest boundary.
   * </pre>
   *
   * Protobuf type {@code apollo.hdmap.LaneSampleAssociation}
   */
  public static final class LaneSampleAssociation extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:apollo.hdmap.LaneSampleAssociation)
      LaneSampleAssociationOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        LaneSampleAssociation.class.getName());
    }
    // Use LaneSampleAssociation.newBuilder() to construct.
    private LaneSampleAssociation(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private LaneSampleAssociation() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneSampleAssociation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneSampleAssociation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              apollo.hdmap.MapLane.LaneSampleAssociation.class, apollo.hdmap.MapLane.LaneSampleAssociation.Builder.class);
    }

    private int bitField0_;
    public static final int S_FIELD_NUMBER = 1;
    private double s_ = 0D;
    /**
     * <code>optional double s = 1;</code>
     * @return Whether the s field is set.
     */
    @java.lang.Override
    public boolean hasS() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional double s = 1;</code>
     * @return The s.
     */
    @java.lang.Override
    public double getS() {
      return s_;
    }

    public static final int WIDTH_FIELD_NUMBER = 2;
    private double width_ = 0D;
    /**
     * <code>optional double width = 2;</code>
     * @return Whether the width field is set.
     */
    @java.lang.Override
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional double width = 2;</code>
     * @return The width.
     */
    @java.lang.Override
    public double getWidth() {
      return width_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeDouble(1, s_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, width_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, s_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, width_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof apollo.hdmap.MapLane.LaneSampleAssociation)) {
        return super.equals(obj);
      }
      apollo.hdmap.MapLane.LaneSampleAssociation other = (apollo.hdmap.MapLane.LaneSampleAssociation) obj;

      if (hasS() != other.hasS()) return false;
      if (hasS()) {
        if (java.lang.Double.doubleToLongBits(getS())
            != java.lang.Double.doubleToLongBits(
                other.getS())) return false;
      }
      if (hasWidth() != other.hasWidth()) return false;
      if (hasWidth()) {
        if (java.lang.Double.doubleToLongBits(getWidth())
            != java.lang.Double.doubleToLongBits(
                other.getWidth())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasS()) {
        hash = (37 * hash) + S_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getS()));
      }
      if (hasWidth()) {
        hash = (37 * hash) + WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getWidth()));
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static apollo.hdmap.MapLane.LaneSampleAssociation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static apollo.hdmap.MapLane.LaneSampleAssociation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.hdmap.MapLane.LaneSampleAssociation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(apollo.hdmap.MapLane.LaneSampleAssociation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * Protobuf type {@code apollo.hdmap.LaneSampleAssociation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:apollo.hdmap.LaneSampleAssociation)
        apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneSampleAssociation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneSampleAssociation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                apollo.hdmap.MapLane.LaneSampleAssociation.class, apollo.hdmap.MapLane.LaneSampleAssociation.Builder.class);
      }

      // Construct using apollo.hdmap.MapLane.LaneSampleAssociation.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        s_ = 0D;
        width_ = 0D;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_LaneSampleAssociation_descriptor;
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneSampleAssociation getDefaultInstanceForType() {
        return apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance();
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneSampleAssociation build() {
        apollo.hdmap.MapLane.LaneSampleAssociation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.LaneSampleAssociation buildPartial() {
        apollo.hdmap.MapLane.LaneSampleAssociation result = new apollo.hdmap.MapLane.LaneSampleAssociation(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(apollo.hdmap.MapLane.LaneSampleAssociation result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.s_ = s_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.width_ = width_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof apollo.hdmap.MapLane.LaneSampleAssociation) {
          return mergeFrom((apollo.hdmap.MapLane.LaneSampleAssociation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(apollo.hdmap.MapLane.LaneSampleAssociation other) {
        if (other == apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance()) return this;
        if (other.hasS()) {
          setS(other.getS());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                s_ = input.readDouble();
                bitField0_ |= 0x00000001;
                break;
              } // case 9
              case 17: {
                width_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double s_ ;
      /**
       * <code>optional double s = 1;</code>
       * @return Whether the s field is set.
       */
      @java.lang.Override
      public boolean hasS() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional double s = 1;</code>
       * @return The s.
       */
      @java.lang.Override
      public double getS() {
        return s_;
      }
      /**
       * <code>optional double s = 1;</code>
       * @param value The s to set.
       * @return This builder for chaining.
       */
      public Builder setS(double value) {

        s_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional double s = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearS() {
        bitField0_ = (bitField0_ & ~0x00000001);
        s_ = 0D;
        onChanged();
        return this;
      }

      private double width_ ;
      /**
       * <code>optional double width = 2;</code>
       * @return Whether the width field is set.
       */
      @java.lang.Override
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional double width = 2;</code>
       * @return The width.
       */
      @java.lang.Override
      public double getWidth() {
        return width_;
      }
      /**
       * <code>optional double width = 2;</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(double value) {

        width_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional double width = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000002);
        width_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:apollo.hdmap.LaneSampleAssociation)
    }

    // @@protoc_insertion_point(class_scope:apollo.hdmap.LaneSampleAssociation)
    private static final apollo.hdmap.MapLane.LaneSampleAssociation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new apollo.hdmap.MapLane.LaneSampleAssociation();
    }

    public static apollo.hdmap.MapLane.LaneSampleAssociation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LaneSampleAssociation>
        PARSER = new com.google.protobuf.AbstractParser<LaneSampleAssociation>() {
      @java.lang.Override
      public LaneSampleAssociation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LaneSampleAssociation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LaneSampleAssociation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LaneOrBuilder extends
      // @@protoc_insertion_point(interface_extends:apollo.hdmap.Lane)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .apollo.hdmap.Id id = 1;</code>
     * @return Whether the id field is set.
     */
    boolean hasId();
    /**
     * <code>optional .apollo.hdmap.Id id = 1;</code>
     * @return The id.
     */
    apollo.hdmap.MapId.Id getId();
    /**
     * <code>optional .apollo.hdmap.Id id = 1;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getIdOrBuilder();

    /**
     * <pre>
     * Central lane as reference trajectory, not necessary to be the geometry
     * central.
     * </pre>
     *
     * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
     * @return Whether the centralCurve field is set.
     */
    boolean hasCentralCurve();
    /**
     * <pre>
     * Central lane as reference trajectory, not necessary to be the geometry
     * central.
     * </pre>
     *
     * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
     * @return The centralCurve.
     */
    apollo.hdmap.MapGeometry.Curve getCentralCurve();
    /**
     * <pre>
     * Central lane as reference trajectory, not necessary to be the geometry
     * central.
     * </pre>
     *
     * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
     */
    apollo.hdmap.MapGeometry.CurveOrBuilder getCentralCurveOrBuilder();

    /**
     * <pre>
     * Lane boundary curve.
     * </pre>
     *
     * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
     * @return Whether the leftBoundary field is set.
     */
    boolean hasLeftBoundary();
    /**
     * <pre>
     * Lane boundary curve.
     * </pre>
     *
     * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
     * @return The leftBoundary.
     */
    apollo.hdmap.MapLane.LaneBoundary getLeftBoundary();
    /**
     * <pre>
     * Lane boundary curve.
     * </pre>
     *
     * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
     */
    apollo.hdmap.MapLane.LaneBoundaryOrBuilder getLeftBoundaryOrBuilder();

    /**
     * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
     * @return Whether the rightBoundary field is set.
     */
    boolean hasRightBoundary();
    /**
     * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
     * @return The rightBoundary.
     */
    apollo.hdmap.MapLane.LaneBoundary getRightBoundary();
    /**
     * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
     */
    apollo.hdmap.MapLane.LaneBoundaryOrBuilder getRightBoundaryOrBuilder();

    /**
     * <pre>
     * in meters.
     * </pre>
     *
     * <code>optional double length = 5;</code>
     * @return Whether the length field is set.
     */
    boolean hasLength();
    /**
     * <pre>
     * in meters.
     * </pre>
     *
     * <code>optional double length = 5;</code>
     * @return The length.
     */
    double getLength();

    /**
     * <pre>
     * Speed limit of the lane, in meters per second.
     * </pre>
     *
     * <code>optional double speed_limit = 6;</code>
     * @return Whether the speedLimit field is set.
     */
    boolean hasSpeedLimit();
    /**
     * <pre>
     * Speed limit of the lane, in meters per second.
     * </pre>
     *
     * <code>optional double speed_limit = 6;</code>
     * @return The speedLimit.
     */
    double getSpeedLimit();

    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    java.util.List<apollo.hdmap.MapId.Id> 
        getOverlapIdList();
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    apollo.hdmap.MapId.Id getOverlapId(int index);
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    int getOverlapIdCount();
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getOverlapIdOrBuilderList();
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getOverlapIdOrBuilder(
        int index);

    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    java.util.List<apollo.hdmap.MapId.Id> 
        getPredecessorIdList();
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    apollo.hdmap.MapId.Id getPredecessorId(int index);
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    int getPredecessorIdCount();
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getPredecessorIdOrBuilderList();
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getPredecessorIdOrBuilder(
        int index);

    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    java.util.List<apollo.hdmap.MapId.Id> 
        getSuccessorIdList();
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    apollo.hdmap.MapId.Id getSuccessorId(int index);
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    int getSuccessorIdCount();
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getSuccessorIdOrBuilderList();
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getSuccessorIdOrBuilder(
        int index);

    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    java.util.List<apollo.hdmap.MapId.Id> 
        getLeftNeighborForwardLaneIdList();
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    apollo.hdmap.MapId.Id getLeftNeighborForwardLaneId(int index);
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    int getLeftNeighborForwardLaneIdCount();
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getLeftNeighborForwardLaneIdOrBuilderList();
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getLeftNeighborForwardLaneIdOrBuilder(
        int index);

    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    java.util.List<apollo.hdmap.MapId.Id> 
        getRightNeighborForwardLaneIdList();
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    apollo.hdmap.MapId.Id getRightNeighborForwardLaneId(int index);
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    int getRightNeighborForwardLaneIdCount();
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getRightNeighborForwardLaneIdOrBuilderList();
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getRightNeighborForwardLaneIdOrBuilder(
        int index);

    /**
     * <code>optional .apollo.hdmap.Lane.LaneType type = 12;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <code>optional .apollo.hdmap.Lane.LaneType type = 12;</code>
     * @return The type.
     */
    apollo.hdmap.MapLane.Lane.LaneType getType();

    /**
     * <code>optional .apollo.hdmap.Lane.LaneTurn turn = 13;</code>
     * @return Whether the turn field is set.
     */
    boolean hasTurn();
    /**
     * <code>optional .apollo.hdmap.Lane.LaneTurn turn = 13;</code>
     * @return The turn.
     */
    apollo.hdmap.MapLane.Lane.LaneTurn getTurn();

    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    java.util.List<apollo.hdmap.MapId.Id> 
        getLeftNeighborReverseLaneIdList();
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    apollo.hdmap.MapId.Id getLeftNeighborReverseLaneId(int index);
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    int getLeftNeighborReverseLaneIdCount();
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getLeftNeighborReverseLaneIdOrBuilderList();
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getLeftNeighborReverseLaneIdOrBuilder(
        int index);

    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    java.util.List<apollo.hdmap.MapId.Id> 
        getRightNeighborReverseLaneIdList();
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    apollo.hdmap.MapId.Id getRightNeighborReverseLaneId(int index);
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    int getRightNeighborReverseLaneIdCount();
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getRightNeighborReverseLaneIdOrBuilderList();
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getRightNeighborReverseLaneIdOrBuilder(
        int index);

    /**
     * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
     * @return Whether the junctionId field is set.
     */
    boolean hasJunctionId();
    /**
     * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
     * @return The junctionId.
     */
    apollo.hdmap.MapId.Id getJunctionId();
    /**
     * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getJunctionIdOrBuilder();

    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> 
        getLeftSampleList();
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    apollo.hdmap.MapLane.LaneSampleAssociation getLeftSample(int index);
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    int getLeftSampleCount();
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
        getLeftSampleOrBuilderList();
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getLeftSampleOrBuilder(
        int index);

    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> 
        getRightSampleList();
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    apollo.hdmap.MapLane.LaneSampleAssociation getRightSample(int index);
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    int getRightSampleCount();
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
        getRightSampleOrBuilderList();
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getRightSampleOrBuilder(
        int index);

    /**
     * <code>optional .apollo.hdmap.Lane.LaneDirection direction = 19;</code>
     * @return Whether the direction field is set.
     */
    boolean hasDirection();
    /**
     * <code>optional .apollo.hdmap.Lane.LaneDirection direction = 19;</code>
     * @return The direction.
     */
    apollo.hdmap.MapLane.Lane.LaneDirection getDirection();

    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> 
        getLeftRoadSampleList();
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    apollo.hdmap.MapLane.LaneSampleAssociation getLeftRoadSample(int index);
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    int getLeftRoadSampleCount();
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
        getLeftRoadSampleOrBuilderList();
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getLeftRoadSampleOrBuilder(
        int index);

    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> 
        getRightRoadSampleList();
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    apollo.hdmap.MapLane.LaneSampleAssociation getRightRoadSample(int index);
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    int getRightRoadSampleCount();
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
        getRightRoadSampleOrBuilderList();
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getRightRoadSampleOrBuilder(
        int index);

    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    java.util.List<apollo.hdmap.MapId.Id> 
        getSelfReverseLaneIdList();
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    apollo.hdmap.MapId.Id getSelfReverseLaneId(int index);
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    int getSelfReverseLaneIdCount();
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getSelfReverseLaneIdOrBuilderList();
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    apollo.hdmap.MapId.IdOrBuilder getSelfReverseLaneIdOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A lane is part of a roadway, that is designated for use by a single line of
   * vehicles.
   * Most public roads (include highways) have more than two lanes.
   * </pre>
   *
   * Protobuf type {@code apollo.hdmap.Lane}
   */
  public static final class Lane extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:apollo.hdmap.Lane)
      LaneOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        Lane.class.getName());
    }
    // Use Lane.newBuilder() to construct.
    private Lane(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private Lane() {
      overlapId_ = java.util.Collections.emptyList();
      predecessorId_ = java.util.Collections.emptyList();
      successorId_ = java.util.Collections.emptyList();
      leftNeighborForwardLaneId_ = java.util.Collections.emptyList();
      rightNeighborForwardLaneId_ = java.util.Collections.emptyList();
      type_ = 1;
      turn_ = 1;
      leftNeighborReverseLaneId_ = java.util.Collections.emptyList();
      rightNeighborReverseLaneId_ = java.util.Collections.emptyList();
      leftSample_ = java.util.Collections.emptyList();
      rightSample_ = java.util.Collections.emptyList();
      direction_ = 1;
      leftRoadSample_ = java.util.Collections.emptyList();
      rightRoadSample_ = java.util.Collections.emptyList();
      selfReverseLaneId_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return apollo.hdmap.MapLane.internal_static_apollo_hdmap_Lane_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return apollo.hdmap.MapLane.internal_static_apollo_hdmap_Lane_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              apollo.hdmap.MapLane.Lane.class, apollo.hdmap.MapLane.Lane.Builder.class);
    }

    /**
     * Protobuf enum {@code apollo.hdmap.Lane.LaneType}
     */
    public enum LaneType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 1;</code>
       */
      NONE(1),
      /**
       * <code>CITY_DRIVING = 2;</code>
       */
      CITY_DRIVING(2),
      /**
       * <code>BIKING = 3;</code>
       */
      BIKING(3),
      /**
       * <code>SIDEWALK = 4;</code>
       */
      SIDEWALK(4),
      /**
       * <code>PARKING = 5;</code>
       */
      PARKING(5),
      /**
       * <code>SHOULDER = 6;</code>
       */
      SHOULDER(6),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 26,
          /* patch= */ 1,
          /* suffix= */ "",
          LaneType.class.getName());
      }
      /**
       * <code>NONE = 1;</code>
       */
      public static final int NONE_VALUE = 1;
      /**
       * <code>CITY_DRIVING = 2;</code>
       */
      public static final int CITY_DRIVING_VALUE = 2;
      /**
       * <code>BIKING = 3;</code>
       */
      public static final int BIKING_VALUE = 3;
      /**
       * <code>SIDEWALK = 4;</code>
       */
      public static final int SIDEWALK_VALUE = 4;
      /**
       * <code>PARKING = 5;</code>
       */
      public static final int PARKING_VALUE = 5;
      /**
       * <code>SHOULDER = 6;</code>
       */
      public static final int SHOULDER_VALUE = 6;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LaneType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LaneType forNumber(int value) {
        switch (value) {
          case 1: return NONE;
          case 2: return CITY_DRIVING;
          case 3: return BIKING;
          case 4: return SIDEWALK;
          case 5: return PARKING;
          case 6: return SHOULDER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LaneType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LaneType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LaneType>() {
              public LaneType findValueByNumber(int number) {
                return LaneType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return apollo.hdmap.MapLane.Lane.getDescriptor().getEnumTypes().get(0);
      }

      private static final LaneType[] VALUES = values();

      public static LaneType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LaneType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:apollo.hdmap.Lane.LaneType)
    }

    /**
     * Protobuf enum {@code apollo.hdmap.Lane.LaneTurn}
     */
    public enum LaneTurn
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NO_TURN = 1;</code>
       */
      NO_TURN(1),
      /**
       * <code>LEFT_TURN = 2;</code>
       */
      LEFT_TURN(2),
      /**
       * <code>RIGHT_TURN = 3;</code>
       */
      RIGHT_TURN(3),
      /**
       * <code>U_TURN = 4;</code>
       */
      U_TURN(4),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 26,
          /* patch= */ 1,
          /* suffix= */ "",
          LaneTurn.class.getName());
      }
      /**
       * <code>NO_TURN = 1;</code>
       */
      public static final int NO_TURN_VALUE = 1;
      /**
       * <code>LEFT_TURN = 2;</code>
       */
      public static final int LEFT_TURN_VALUE = 2;
      /**
       * <code>RIGHT_TURN = 3;</code>
       */
      public static final int RIGHT_TURN_VALUE = 3;
      /**
       * <code>U_TURN = 4;</code>
       */
      public static final int U_TURN_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LaneTurn valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LaneTurn forNumber(int value) {
        switch (value) {
          case 1: return NO_TURN;
          case 2: return LEFT_TURN;
          case 3: return RIGHT_TURN;
          case 4: return U_TURN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LaneTurn>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LaneTurn> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LaneTurn>() {
              public LaneTurn findValueByNumber(int number) {
                return LaneTurn.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return apollo.hdmap.MapLane.Lane.getDescriptor().getEnumTypes().get(1);
      }

      private static final LaneTurn[] VALUES = values();

      public static LaneTurn valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LaneTurn(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:apollo.hdmap.Lane.LaneTurn)
    }

    /**
     * Protobuf enum {@code apollo.hdmap.Lane.LaneDirection}
     */
    public enum LaneDirection
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FORWARD = 1;</code>
       */
      FORWARD(1),
      /**
       * <code>BACKWARD = 2;</code>
       */
      BACKWARD(2),
      /**
       * <code>BIDIRECTION = 3;</code>
       */
      BIDIRECTION(3),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 26,
          /* patch= */ 1,
          /* suffix= */ "",
          LaneDirection.class.getName());
      }
      /**
       * <code>FORWARD = 1;</code>
       */
      public static final int FORWARD_VALUE = 1;
      /**
       * <code>BACKWARD = 2;</code>
       */
      public static final int BACKWARD_VALUE = 2;
      /**
       * <code>BIDIRECTION = 3;</code>
       */
      public static final int BIDIRECTION_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LaneDirection valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static LaneDirection forNumber(int value) {
        switch (value) {
          case 1: return FORWARD;
          case 2: return BACKWARD;
          case 3: return BIDIRECTION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LaneDirection>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          LaneDirection> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LaneDirection>() {
              public LaneDirection findValueByNumber(int number) {
                return LaneDirection.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return apollo.hdmap.MapLane.Lane.getDescriptor().getEnumTypes().get(2);
      }

      private static final LaneDirection[] VALUES = values();

      public static LaneDirection valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private LaneDirection(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:apollo.hdmap.Lane.LaneDirection)
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private apollo.hdmap.MapId.Id id_;
    /**
     * <code>optional .apollo.hdmap.Id id = 1;</code>
     * @return Whether the id field is set.
     */
    @java.lang.Override
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .apollo.hdmap.Id id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getId() {
      return id_ == null ? apollo.hdmap.MapId.Id.getDefaultInstance() : id_;
    }
    /**
     * <code>optional .apollo.hdmap.Id id = 1;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getIdOrBuilder() {
      return id_ == null ? apollo.hdmap.MapId.Id.getDefaultInstance() : id_;
    }

    public static final int CENTRAL_CURVE_FIELD_NUMBER = 2;
    private apollo.hdmap.MapGeometry.Curve centralCurve_;
    /**
     * <pre>
     * Central lane as reference trajectory, not necessary to be the geometry
     * central.
     * </pre>
     *
     * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
     * @return Whether the centralCurve field is set.
     */
    @java.lang.Override
    public boolean hasCentralCurve() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Central lane as reference trajectory, not necessary to be the geometry
     * central.
     * </pre>
     *
     * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
     * @return The centralCurve.
     */
    @java.lang.Override
    public apollo.hdmap.MapGeometry.Curve getCentralCurve() {
      return centralCurve_ == null ? apollo.hdmap.MapGeometry.Curve.getDefaultInstance() : centralCurve_;
    }
    /**
     * <pre>
     * Central lane as reference trajectory, not necessary to be the geometry
     * central.
     * </pre>
     *
     * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapGeometry.CurveOrBuilder getCentralCurveOrBuilder() {
      return centralCurve_ == null ? apollo.hdmap.MapGeometry.Curve.getDefaultInstance() : centralCurve_;
    }

    public static final int LEFT_BOUNDARY_FIELD_NUMBER = 3;
    private apollo.hdmap.MapLane.LaneBoundary leftBoundary_;
    /**
     * <pre>
     * Lane boundary curve.
     * </pre>
     *
     * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
     * @return Whether the leftBoundary field is set.
     */
    @java.lang.Override
    public boolean hasLeftBoundary() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Lane boundary curve.
     * </pre>
     *
     * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
     * @return The leftBoundary.
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundary getLeftBoundary() {
      return leftBoundary_ == null ? apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance() : leftBoundary_;
    }
    /**
     * <pre>
     * Lane boundary curve.
     * </pre>
     *
     * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundaryOrBuilder getLeftBoundaryOrBuilder() {
      return leftBoundary_ == null ? apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance() : leftBoundary_;
    }

    public static final int RIGHT_BOUNDARY_FIELD_NUMBER = 4;
    private apollo.hdmap.MapLane.LaneBoundary rightBoundary_;
    /**
     * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
     * @return Whether the rightBoundary field is set.
     */
    @java.lang.Override
    public boolean hasRightBoundary() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
     * @return The rightBoundary.
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundary getRightBoundary() {
      return rightBoundary_ == null ? apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance() : rightBoundary_;
    }
    /**
     * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneBoundaryOrBuilder getRightBoundaryOrBuilder() {
      return rightBoundary_ == null ? apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance() : rightBoundary_;
    }

    public static final int LENGTH_FIELD_NUMBER = 5;
    private double length_ = 0D;
    /**
     * <pre>
     * in meters.
     * </pre>
     *
     * <code>optional double length = 5;</code>
     * @return Whether the length field is set.
     */
    @java.lang.Override
    public boolean hasLength() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * in meters.
     * </pre>
     *
     * <code>optional double length = 5;</code>
     * @return The length.
     */
    @java.lang.Override
    public double getLength() {
      return length_;
    }

    public static final int SPEED_LIMIT_FIELD_NUMBER = 6;
    private double speedLimit_ = 0D;
    /**
     * <pre>
     * Speed limit of the lane, in meters per second.
     * </pre>
     *
     * <code>optional double speed_limit = 6;</code>
     * @return Whether the speedLimit field is set.
     */
    @java.lang.Override
    public boolean hasSpeedLimit() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Speed limit of the lane, in meters per second.
     * </pre>
     *
     * <code>optional double speed_limit = 6;</code>
     * @return The speedLimit.
     */
    @java.lang.Override
    public double getSpeedLimit() {
      return speedLimit_;
    }

    public static final int OVERLAP_ID_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapId.Id> overlapId_;
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapId.Id> getOverlapIdList() {
      return overlapId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getOverlapIdOrBuilderList() {
      return overlapId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    @java.lang.Override
    public int getOverlapIdCount() {
      return overlapId_.size();
    }
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getOverlapId(int index) {
      return overlapId_.get(index);
    }
    /**
     * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getOverlapIdOrBuilder(
        int index) {
      return overlapId_.get(index);
    }

    public static final int PREDECESSOR_ID_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapId.Id> predecessorId_;
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapId.Id> getPredecessorIdList() {
      return predecessorId_;
    }
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getPredecessorIdOrBuilderList() {
      return predecessorId_;
    }
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    @java.lang.Override
    public int getPredecessorIdCount() {
      return predecessorId_.size();
    }
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getPredecessorId(int index) {
      return predecessorId_.get(index);
    }
    /**
     * <pre>
     * All lanes can be driving into (or from).
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getPredecessorIdOrBuilder(
        int index) {
      return predecessorId_.get(index);
    }

    public static final int SUCCESSOR_ID_FIELD_NUMBER = 9;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapId.Id> successorId_;
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapId.Id> getSuccessorIdList() {
      return successorId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getSuccessorIdOrBuilderList() {
      return successorId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    @java.lang.Override
    public int getSuccessorIdCount() {
      return successorId_.size();
    }
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getSuccessorId(int index) {
      return successorId_.get(index);
    }
    /**
     * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getSuccessorIdOrBuilder(
        int index) {
      return successorId_.get(index);
    }

    public static final int LEFT_NEIGHBOR_FORWARD_LANE_ID_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapId.Id> leftNeighborForwardLaneId_;
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapId.Id> getLeftNeighborForwardLaneIdList() {
      return leftNeighborForwardLaneId_;
    }
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getLeftNeighborForwardLaneIdOrBuilderList() {
      return leftNeighborForwardLaneId_;
    }
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    @java.lang.Override
    public int getLeftNeighborForwardLaneIdCount() {
      return leftNeighborForwardLaneId_.size();
    }
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getLeftNeighborForwardLaneId(int index) {
      return leftNeighborForwardLaneId_.get(index);
    }
    /**
     * <pre>
     * Neighbor lanes on the same direction.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getLeftNeighborForwardLaneIdOrBuilder(
        int index) {
      return leftNeighborForwardLaneId_.get(index);
    }

    public static final int RIGHT_NEIGHBOR_FORWARD_LANE_ID_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapId.Id> rightNeighborForwardLaneId_;
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapId.Id> getRightNeighborForwardLaneIdList() {
      return rightNeighborForwardLaneId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getRightNeighborForwardLaneIdOrBuilderList() {
      return rightNeighborForwardLaneId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    @java.lang.Override
    public int getRightNeighborForwardLaneIdCount() {
      return rightNeighborForwardLaneId_.size();
    }
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getRightNeighborForwardLaneId(int index) {
      return rightNeighborForwardLaneId_.get(index);
    }
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getRightNeighborForwardLaneIdOrBuilder(
        int index) {
      return rightNeighborForwardLaneId_.get(index);
    }

    public static final int TYPE_FIELD_NUMBER = 12;
    private int type_ = 1;
    /**
     * <code>optional .apollo.hdmap.Lane.LaneType type = 12;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional .apollo.hdmap.Lane.LaneType type = 12;</code>
     * @return The type.
     */
    @java.lang.Override public apollo.hdmap.MapLane.Lane.LaneType getType() {
      apollo.hdmap.MapLane.Lane.LaneType result = apollo.hdmap.MapLane.Lane.LaneType.forNumber(type_);
      return result == null ? apollo.hdmap.MapLane.Lane.LaneType.NONE : result;
    }

    public static final int TURN_FIELD_NUMBER = 13;
    private int turn_ = 1;
    /**
     * <code>optional .apollo.hdmap.Lane.LaneTurn turn = 13;</code>
     * @return Whether the turn field is set.
     */
    @java.lang.Override public boolean hasTurn() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional .apollo.hdmap.Lane.LaneTurn turn = 13;</code>
     * @return The turn.
     */
    @java.lang.Override public apollo.hdmap.MapLane.Lane.LaneTurn getTurn() {
      apollo.hdmap.MapLane.Lane.LaneTurn result = apollo.hdmap.MapLane.Lane.LaneTurn.forNumber(turn_);
      return result == null ? apollo.hdmap.MapLane.Lane.LaneTurn.NO_TURN : result;
    }

    public static final int LEFT_NEIGHBOR_REVERSE_LANE_ID_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapId.Id> leftNeighborReverseLaneId_;
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapId.Id> getLeftNeighborReverseLaneIdList() {
      return leftNeighborReverseLaneId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getLeftNeighborReverseLaneIdOrBuilderList() {
      return leftNeighborReverseLaneId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    @java.lang.Override
    public int getLeftNeighborReverseLaneIdCount() {
      return leftNeighborReverseLaneId_.size();
    }
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getLeftNeighborReverseLaneId(int index) {
      return leftNeighborReverseLaneId_.get(index);
    }
    /**
     * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getLeftNeighborReverseLaneIdOrBuilder(
        int index) {
      return leftNeighborReverseLaneId_.get(index);
    }

    public static final int RIGHT_NEIGHBOR_REVERSE_LANE_ID_FIELD_NUMBER = 15;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapId.Id> rightNeighborReverseLaneId_;
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapId.Id> getRightNeighborReverseLaneIdList() {
      return rightNeighborReverseLaneId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getRightNeighborReverseLaneIdOrBuilderList() {
      return rightNeighborReverseLaneId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    @java.lang.Override
    public int getRightNeighborReverseLaneIdCount() {
      return rightNeighborReverseLaneId_.size();
    }
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getRightNeighborReverseLaneId(int index) {
      return rightNeighborReverseLaneId_.get(index);
    }
    /**
     * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getRightNeighborReverseLaneIdOrBuilder(
        int index) {
      return rightNeighborReverseLaneId_.get(index);
    }

    public static final int JUNCTION_ID_FIELD_NUMBER = 16;
    private apollo.hdmap.MapId.Id junctionId_;
    /**
     * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
     * @return Whether the junctionId field is set.
     */
    @java.lang.Override
    public boolean hasJunctionId() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
     * @return The junctionId.
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getJunctionId() {
      return junctionId_ == null ? apollo.hdmap.MapId.Id.getDefaultInstance() : junctionId_;
    }
    /**
     * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getJunctionIdOrBuilder() {
      return junctionId_ == null ? apollo.hdmap.MapId.Id.getDefaultInstance() : junctionId_;
    }

    public static final int LEFT_SAMPLE_FIELD_NUMBER = 17;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> leftSample_;
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> getLeftSampleList() {
      return leftSample_;
    }
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
        getLeftSampleOrBuilderList() {
      return leftSample_;
    }
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    @java.lang.Override
    public int getLeftSampleCount() {
      return leftSample_.size();
    }
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociation getLeftSample(int index) {
      return leftSample_.get(index);
    }
    /**
     * <pre>
     * Association between central point to closest boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getLeftSampleOrBuilder(
        int index) {
      return leftSample_.get(index);
    }

    public static final int RIGHT_SAMPLE_FIELD_NUMBER = 18;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> rightSample_;
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> getRightSampleList() {
      return rightSample_;
    }
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
        getRightSampleOrBuilderList() {
      return rightSample_;
    }
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    @java.lang.Override
    public int getRightSampleCount() {
      return rightSample_.size();
    }
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociation getRightSample(int index) {
      return rightSample_.get(index);
    }
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getRightSampleOrBuilder(
        int index) {
      return rightSample_.get(index);
    }

    public static final int DIRECTION_FIELD_NUMBER = 19;
    private int direction_ = 1;
    /**
     * <code>optional .apollo.hdmap.Lane.LaneDirection direction = 19;</code>
     * @return Whether the direction field is set.
     */
    @java.lang.Override public boolean hasDirection() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional .apollo.hdmap.Lane.LaneDirection direction = 19;</code>
     * @return The direction.
     */
    @java.lang.Override public apollo.hdmap.MapLane.Lane.LaneDirection getDirection() {
      apollo.hdmap.MapLane.Lane.LaneDirection result = apollo.hdmap.MapLane.Lane.LaneDirection.forNumber(direction_);
      return result == null ? apollo.hdmap.MapLane.Lane.LaneDirection.FORWARD : result;
    }

    public static final int LEFT_ROAD_SAMPLE_FIELD_NUMBER = 20;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> leftRoadSample_;
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> getLeftRoadSampleList() {
      return leftRoadSample_;
    }
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
        getLeftRoadSampleOrBuilderList() {
      return leftRoadSample_;
    }
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    @java.lang.Override
    public int getLeftRoadSampleCount() {
      return leftRoadSample_.size();
    }
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociation getLeftRoadSample(int index) {
      return leftRoadSample_.get(index);
    }
    /**
     * <pre>
     * Association between central point to closest road boundary.
     * </pre>
     *
     * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getLeftRoadSampleOrBuilder(
        int index) {
      return leftRoadSample_.get(index);
    }

    public static final int RIGHT_ROAD_SAMPLE_FIELD_NUMBER = 21;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> rightRoadSample_;
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> getRightRoadSampleList() {
      return rightRoadSample_;
    }
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
        getRightRoadSampleOrBuilderList() {
      return rightRoadSample_;
    }
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    @java.lang.Override
    public int getRightRoadSampleCount() {
      return rightRoadSample_.size();
    }
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociation getRightRoadSample(int index) {
      return rightRoadSample_.get(index);
    }
    /**
     * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getRightRoadSampleOrBuilder(
        int index) {
      return rightRoadSample_.get(index);
    }

    public static final int SELF_REVERSE_LANE_ID_FIELD_NUMBER = 22;
    @SuppressWarnings("serial")
    private java.util.List<apollo.hdmap.MapId.Id> selfReverseLaneId_;
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    @java.lang.Override
    public java.util.List<apollo.hdmap.MapId.Id> getSelfReverseLaneIdList() {
      return selfReverseLaneId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    @java.lang.Override
    public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
        getSelfReverseLaneIdOrBuilderList() {
      return selfReverseLaneId_;
    }
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    @java.lang.Override
    public int getSelfReverseLaneIdCount() {
      return selfReverseLaneId_.size();
    }
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.Id getSelfReverseLaneId(int index) {
      return selfReverseLaneId_.get(index);
    }
    /**
     * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
     */
    @java.lang.Override
    public apollo.hdmap.MapId.IdOrBuilder getSelfReverseLaneIdOrBuilder(
        int index) {
      return selfReverseLaneId_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getId());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getCentralCurve());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getLeftBoundary());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getRightBoundary());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeDouble(5, length_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, speedLimit_);
      }
      for (int i = 0; i < overlapId_.size(); i++) {
        output.writeMessage(7, overlapId_.get(i));
      }
      for (int i = 0; i < predecessorId_.size(); i++) {
        output.writeMessage(8, predecessorId_.get(i));
      }
      for (int i = 0; i < successorId_.size(); i++) {
        output.writeMessage(9, successorId_.get(i));
      }
      for (int i = 0; i < leftNeighborForwardLaneId_.size(); i++) {
        output.writeMessage(10, leftNeighborForwardLaneId_.get(i));
      }
      for (int i = 0; i < rightNeighborForwardLaneId_.size(); i++) {
        output.writeMessage(11, rightNeighborForwardLaneId_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeEnum(12, type_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeEnum(13, turn_);
      }
      for (int i = 0; i < leftNeighborReverseLaneId_.size(); i++) {
        output.writeMessage(14, leftNeighborReverseLaneId_.get(i));
      }
      for (int i = 0; i < rightNeighborReverseLaneId_.size(); i++) {
        output.writeMessage(15, rightNeighborReverseLaneId_.get(i));
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeMessage(16, getJunctionId());
      }
      for (int i = 0; i < leftSample_.size(); i++) {
        output.writeMessage(17, leftSample_.get(i));
      }
      for (int i = 0; i < rightSample_.size(); i++) {
        output.writeMessage(18, rightSample_.get(i));
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeEnum(19, direction_);
      }
      for (int i = 0; i < leftRoadSample_.size(); i++) {
        output.writeMessage(20, leftRoadSample_.get(i));
      }
      for (int i = 0; i < rightRoadSample_.size(); i++) {
        output.writeMessage(21, rightRoadSample_.get(i));
      }
      for (int i = 0; i < selfReverseLaneId_.size(); i++) {
        output.writeMessage(22, selfReverseLaneId_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCentralCurve());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLeftBoundary());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getRightBoundary());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, length_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, speedLimit_);
      }
      for (int i = 0; i < overlapId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, overlapId_.get(i));
      }
      for (int i = 0; i < predecessorId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, predecessorId_.get(i));
      }
      for (int i = 0; i < successorId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, successorId_.get(i));
      }
      for (int i = 0; i < leftNeighborForwardLaneId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, leftNeighborForwardLaneId_.get(i));
      }
      for (int i = 0; i < rightNeighborForwardLaneId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, rightNeighborForwardLaneId_.get(i));
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, type_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, turn_);
      }
      for (int i = 0; i < leftNeighborReverseLaneId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, leftNeighborReverseLaneId_.get(i));
      }
      for (int i = 0; i < rightNeighborReverseLaneId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, rightNeighborReverseLaneId_.get(i));
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getJunctionId());
      }
      for (int i = 0; i < leftSample_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, leftSample_.get(i));
      }
      for (int i = 0; i < rightSample_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, rightSample_.get(i));
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(19, direction_);
      }
      for (int i = 0; i < leftRoadSample_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, leftRoadSample_.get(i));
      }
      for (int i = 0; i < rightRoadSample_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, rightRoadSample_.get(i));
      }
      for (int i = 0; i < selfReverseLaneId_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, selfReverseLaneId_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof apollo.hdmap.MapLane.Lane)) {
        return super.equals(obj);
      }
      apollo.hdmap.MapLane.Lane other = (apollo.hdmap.MapLane.Lane) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (hasCentralCurve() != other.hasCentralCurve()) return false;
      if (hasCentralCurve()) {
        if (!getCentralCurve()
            .equals(other.getCentralCurve())) return false;
      }
      if (hasLeftBoundary() != other.hasLeftBoundary()) return false;
      if (hasLeftBoundary()) {
        if (!getLeftBoundary()
            .equals(other.getLeftBoundary())) return false;
      }
      if (hasRightBoundary() != other.hasRightBoundary()) return false;
      if (hasRightBoundary()) {
        if (!getRightBoundary()
            .equals(other.getRightBoundary())) return false;
      }
      if (hasLength() != other.hasLength()) return false;
      if (hasLength()) {
        if (java.lang.Double.doubleToLongBits(getLength())
            != java.lang.Double.doubleToLongBits(
                other.getLength())) return false;
      }
      if (hasSpeedLimit() != other.hasSpeedLimit()) return false;
      if (hasSpeedLimit()) {
        if (java.lang.Double.doubleToLongBits(getSpeedLimit())
            != java.lang.Double.doubleToLongBits(
                other.getSpeedLimit())) return false;
      }
      if (!getOverlapIdList()
          .equals(other.getOverlapIdList())) return false;
      if (!getPredecessorIdList()
          .equals(other.getPredecessorIdList())) return false;
      if (!getSuccessorIdList()
          .equals(other.getSuccessorIdList())) return false;
      if (!getLeftNeighborForwardLaneIdList()
          .equals(other.getLeftNeighborForwardLaneIdList())) return false;
      if (!getRightNeighborForwardLaneIdList()
          .equals(other.getRightNeighborForwardLaneIdList())) return false;
      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (type_ != other.type_) return false;
      }
      if (hasTurn() != other.hasTurn()) return false;
      if (hasTurn()) {
        if (turn_ != other.turn_) return false;
      }
      if (!getLeftNeighborReverseLaneIdList()
          .equals(other.getLeftNeighborReverseLaneIdList())) return false;
      if (!getRightNeighborReverseLaneIdList()
          .equals(other.getRightNeighborReverseLaneIdList())) return false;
      if (hasJunctionId() != other.hasJunctionId()) return false;
      if (hasJunctionId()) {
        if (!getJunctionId()
            .equals(other.getJunctionId())) return false;
      }
      if (!getLeftSampleList()
          .equals(other.getLeftSampleList())) return false;
      if (!getRightSampleList()
          .equals(other.getRightSampleList())) return false;
      if (hasDirection() != other.hasDirection()) return false;
      if (hasDirection()) {
        if (direction_ != other.direction_) return false;
      }
      if (!getLeftRoadSampleList()
          .equals(other.getLeftRoadSampleList())) return false;
      if (!getRightRoadSampleList()
          .equals(other.getRightRoadSampleList())) return false;
      if (!getSelfReverseLaneIdList()
          .equals(other.getSelfReverseLaneIdList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (hasCentralCurve()) {
        hash = (37 * hash) + CENTRAL_CURVE_FIELD_NUMBER;
        hash = (53 * hash) + getCentralCurve().hashCode();
      }
      if (hasLeftBoundary()) {
        hash = (37 * hash) + LEFT_BOUNDARY_FIELD_NUMBER;
        hash = (53 * hash) + getLeftBoundary().hashCode();
      }
      if (hasRightBoundary()) {
        hash = (37 * hash) + RIGHT_BOUNDARY_FIELD_NUMBER;
        hash = (53 * hash) + getRightBoundary().hashCode();
      }
      if (hasLength()) {
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getLength()));
      }
      if (hasSpeedLimit()) {
        hash = (37 * hash) + SPEED_LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getSpeedLimit()));
      }
      if (getOverlapIdCount() > 0) {
        hash = (37 * hash) + OVERLAP_ID_FIELD_NUMBER;
        hash = (53 * hash) + getOverlapIdList().hashCode();
      }
      if (getPredecessorIdCount() > 0) {
        hash = (37 * hash) + PREDECESSOR_ID_FIELD_NUMBER;
        hash = (53 * hash) + getPredecessorIdList().hashCode();
      }
      if (getSuccessorIdCount() > 0) {
        hash = (37 * hash) + SUCCESSOR_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSuccessorIdList().hashCode();
      }
      if (getLeftNeighborForwardLaneIdCount() > 0) {
        hash = (37 * hash) + LEFT_NEIGHBOR_FORWARD_LANE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getLeftNeighborForwardLaneIdList().hashCode();
      }
      if (getRightNeighborForwardLaneIdCount() > 0) {
        hash = (37 * hash) + RIGHT_NEIGHBOR_FORWARD_LANE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRightNeighborForwardLaneIdList().hashCode();
      }
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasTurn()) {
        hash = (37 * hash) + TURN_FIELD_NUMBER;
        hash = (53 * hash) + turn_;
      }
      if (getLeftNeighborReverseLaneIdCount() > 0) {
        hash = (37 * hash) + LEFT_NEIGHBOR_REVERSE_LANE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getLeftNeighborReverseLaneIdList().hashCode();
      }
      if (getRightNeighborReverseLaneIdCount() > 0) {
        hash = (37 * hash) + RIGHT_NEIGHBOR_REVERSE_LANE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getRightNeighborReverseLaneIdList().hashCode();
      }
      if (hasJunctionId()) {
        hash = (37 * hash) + JUNCTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getJunctionId().hashCode();
      }
      if (getLeftSampleCount() > 0) {
        hash = (37 * hash) + LEFT_SAMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getLeftSampleList().hashCode();
      }
      if (getRightSampleCount() > 0) {
        hash = (37 * hash) + RIGHT_SAMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getRightSampleList().hashCode();
      }
      if (hasDirection()) {
        hash = (37 * hash) + DIRECTION_FIELD_NUMBER;
        hash = (53 * hash) + direction_;
      }
      if (getLeftRoadSampleCount() > 0) {
        hash = (37 * hash) + LEFT_ROAD_SAMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getLeftRoadSampleList().hashCode();
      }
      if (getRightRoadSampleCount() > 0) {
        hash = (37 * hash) + RIGHT_ROAD_SAMPLE_FIELD_NUMBER;
        hash = (53 * hash) + getRightRoadSampleList().hashCode();
      }
      if (getSelfReverseLaneIdCount() > 0) {
        hash = (37 * hash) + SELF_REVERSE_LANE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSelfReverseLaneIdList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static apollo.hdmap.MapLane.Lane parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static apollo.hdmap.MapLane.Lane parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static apollo.hdmap.MapLane.Lane parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static apollo.hdmap.MapLane.Lane parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(apollo.hdmap.MapLane.Lane prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A lane is part of a roadway, that is designated for use by a single line of
     * vehicles.
     * Most public roads (include highways) have more than two lanes.
     * </pre>
     *
     * Protobuf type {@code apollo.hdmap.Lane}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:apollo.hdmap.Lane)
        apollo.hdmap.MapLane.LaneOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_Lane_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_Lane_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                apollo.hdmap.MapLane.Lane.class, apollo.hdmap.MapLane.Lane.Builder.class);
      }

      // Construct using apollo.hdmap.MapLane.Lane.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getIdFieldBuilder();
          getCentralCurveFieldBuilder();
          getLeftBoundaryFieldBuilder();
          getRightBoundaryFieldBuilder();
          getOverlapIdFieldBuilder();
          getPredecessorIdFieldBuilder();
          getSuccessorIdFieldBuilder();
          getLeftNeighborForwardLaneIdFieldBuilder();
          getRightNeighborForwardLaneIdFieldBuilder();
          getLeftNeighborReverseLaneIdFieldBuilder();
          getRightNeighborReverseLaneIdFieldBuilder();
          getJunctionIdFieldBuilder();
          getLeftSampleFieldBuilder();
          getRightSampleFieldBuilder();
          getLeftRoadSampleFieldBuilder();
          getRightRoadSampleFieldBuilder();
          getSelfReverseLaneIdFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        id_ = null;
        if (idBuilder_ != null) {
          idBuilder_.dispose();
          idBuilder_ = null;
        }
        centralCurve_ = null;
        if (centralCurveBuilder_ != null) {
          centralCurveBuilder_.dispose();
          centralCurveBuilder_ = null;
        }
        leftBoundary_ = null;
        if (leftBoundaryBuilder_ != null) {
          leftBoundaryBuilder_.dispose();
          leftBoundaryBuilder_ = null;
        }
        rightBoundary_ = null;
        if (rightBoundaryBuilder_ != null) {
          rightBoundaryBuilder_.dispose();
          rightBoundaryBuilder_ = null;
        }
        length_ = 0D;
        speedLimit_ = 0D;
        if (overlapIdBuilder_ == null) {
          overlapId_ = java.util.Collections.emptyList();
        } else {
          overlapId_ = null;
          overlapIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (predecessorIdBuilder_ == null) {
          predecessorId_ = java.util.Collections.emptyList();
        } else {
          predecessorId_ = null;
          predecessorIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (successorIdBuilder_ == null) {
          successorId_ = java.util.Collections.emptyList();
        } else {
          successorId_ = null;
          successorIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          leftNeighborForwardLaneId_ = java.util.Collections.emptyList();
        } else {
          leftNeighborForwardLaneId_ = null;
          leftNeighborForwardLaneIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          rightNeighborForwardLaneId_ = java.util.Collections.emptyList();
        } else {
          rightNeighborForwardLaneId_ = null;
          rightNeighborForwardLaneIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        type_ = 1;
        turn_ = 1;
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          leftNeighborReverseLaneId_ = java.util.Collections.emptyList();
        } else {
          leftNeighborReverseLaneId_ = null;
          leftNeighborReverseLaneIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          rightNeighborReverseLaneId_ = java.util.Collections.emptyList();
        } else {
          rightNeighborReverseLaneId_ = null;
          rightNeighborReverseLaneIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        junctionId_ = null;
        if (junctionIdBuilder_ != null) {
          junctionIdBuilder_.dispose();
          junctionIdBuilder_ = null;
        }
        if (leftSampleBuilder_ == null) {
          leftSample_ = java.util.Collections.emptyList();
        } else {
          leftSample_ = null;
          leftSampleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (rightSampleBuilder_ == null) {
          rightSample_ = java.util.Collections.emptyList();
        } else {
          rightSample_ = null;
          rightSampleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        direction_ = 1;
        if (leftRoadSampleBuilder_ == null) {
          leftRoadSample_ = java.util.Collections.emptyList();
        } else {
          leftRoadSample_ = null;
          leftRoadSampleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (rightRoadSampleBuilder_ == null) {
          rightRoadSample_ = java.util.Collections.emptyList();
        } else {
          rightRoadSample_ = null;
          rightRoadSampleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (selfReverseLaneIdBuilder_ == null) {
          selfReverseLaneId_ = java.util.Collections.emptyList();
        } else {
          selfReverseLaneId_ = null;
          selfReverseLaneIdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return apollo.hdmap.MapLane.internal_static_apollo_hdmap_Lane_descriptor;
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.Lane getDefaultInstanceForType() {
        return apollo.hdmap.MapLane.Lane.getDefaultInstance();
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.Lane build() {
        apollo.hdmap.MapLane.Lane result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public apollo.hdmap.MapLane.Lane buildPartial() {
        apollo.hdmap.MapLane.Lane result = new apollo.hdmap.MapLane.Lane(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(apollo.hdmap.MapLane.Lane result) {
        if (overlapIdBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            overlapId_ = java.util.Collections.unmodifiableList(overlapId_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.overlapId_ = overlapId_;
        } else {
          result.overlapId_ = overlapIdBuilder_.build();
        }
        if (predecessorIdBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            predecessorId_ = java.util.Collections.unmodifiableList(predecessorId_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.predecessorId_ = predecessorId_;
        } else {
          result.predecessorId_ = predecessorIdBuilder_.build();
        }
        if (successorIdBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0)) {
            successorId_ = java.util.Collections.unmodifiableList(successorId_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.successorId_ = successorId_;
        } else {
          result.successorId_ = successorIdBuilder_.build();
        }
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0)) {
            leftNeighborForwardLaneId_ = java.util.Collections.unmodifiableList(leftNeighborForwardLaneId_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.leftNeighborForwardLaneId_ = leftNeighborForwardLaneId_;
        } else {
          result.leftNeighborForwardLaneId_ = leftNeighborForwardLaneIdBuilder_.build();
        }
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0)) {
            rightNeighborForwardLaneId_ = java.util.Collections.unmodifiableList(rightNeighborForwardLaneId_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.rightNeighborForwardLaneId_ = rightNeighborForwardLaneId_;
        } else {
          result.rightNeighborForwardLaneId_ = rightNeighborForwardLaneIdBuilder_.build();
        }
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          if (((bitField0_ & 0x00002000) != 0)) {
            leftNeighborReverseLaneId_ = java.util.Collections.unmodifiableList(leftNeighborReverseLaneId_);
            bitField0_ = (bitField0_ & ~0x00002000);
          }
          result.leftNeighborReverseLaneId_ = leftNeighborReverseLaneId_;
        } else {
          result.leftNeighborReverseLaneId_ = leftNeighborReverseLaneIdBuilder_.build();
        }
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          if (((bitField0_ & 0x00004000) != 0)) {
            rightNeighborReverseLaneId_ = java.util.Collections.unmodifiableList(rightNeighborReverseLaneId_);
            bitField0_ = (bitField0_ & ~0x00004000);
          }
          result.rightNeighborReverseLaneId_ = rightNeighborReverseLaneId_;
        } else {
          result.rightNeighborReverseLaneId_ = rightNeighborReverseLaneIdBuilder_.build();
        }
        if (leftSampleBuilder_ == null) {
          if (((bitField0_ & 0x00010000) != 0)) {
            leftSample_ = java.util.Collections.unmodifiableList(leftSample_);
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.leftSample_ = leftSample_;
        } else {
          result.leftSample_ = leftSampleBuilder_.build();
        }
        if (rightSampleBuilder_ == null) {
          if (((bitField0_ & 0x00020000) != 0)) {
            rightSample_ = java.util.Collections.unmodifiableList(rightSample_);
            bitField0_ = (bitField0_ & ~0x00020000);
          }
          result.rightSample_ = rightSample_;
        } else {
          result.rightSample_ = rightSampleBuilder_.build();
        }
        if (leftRoadSampleBuilder_ == null) {
          if (((bitField0_ & 0x00080000) != 0)) {
            leftRoadSample_ = java.util.Collections.unmodifiableList(leftRoadSample_);
            bitField0_ = (bitField0_ & ~0x00080000);
          }
          result.leftRoadSample_ = leftRoadSample_;
        } else {
          result.leftRoadSample_ = leftRoadSampleBuilder_.build();
        }
        if (rightRoadSampleBuilder_ == null) {
          if (((bitField0_ & 0x00100000) != 0)) {
            rightRoadSample_ = java.util.Collections.unmodifiableList(rightRoadSample_);
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.rightRoadSample_ = rightRoadSample_;
        } else {
          result.rightRoadSample_ = rightRoadSampleBuilder_.build();
        }
        if (selfReverseLaneIdBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0)) {
            selfReverseLaneId_ = java.util.Collections.unmodifiableList(selfReverseLaneId_);
            bitField0_ = (bitField0_ & ~0x00200000);
          }
          result.selfReverseLaneId_ = selfReverseLaneId_;
        } else {
          result.selfReverseLaneId_ = selfReverseLaneIdBuilder_.build();
        }
      }

      private void buildPartial0(apollo.hdmap.MapLane.Lane result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = idBuilder_ == null
              ? id_
              : idBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.centralCurve_ = centralCurveBuilder_ == null
              ? centralCurve_
              : centralCurveBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.leftBoundary_ = leftBoundaryBuilder_ == null
              ? leftBoundary_
              : leftBoundaryBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.rightBoundary_ = rightBoundaryBuilder_ == null
              ? rightBoundary_
              : rightBoundaryBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.length_ = length_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.speedLimit_ = speedLimit_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.type_ = type_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.turn_ = turn_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.junctionId_ = junctionIdBuilder_ == null
              ? junctionId_
              : junctionIdBuilder_.build();
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.direction_ = direction_;
          to_bitField0_ |= 0x00000200;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof apollo.hdmap.MapLane.Lane) {
          return mergeFrom((apollo.hdmap.MapLane.Lane)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(apollo.hdmap.MapLane.Lane other) {
        if (other == apollo.hdmap.MapLane.Lane.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (other.hasCentralCurve()) {
          mergeCentralCurve(other.getCentralCurve());
        }
        if (other.hasLeftBoundary()) {
          mergeLeftBoundary(other.getLeftBoundary());
        }
        if (other.hasRightBoundary()) {
          mergeRightBoundary(other.getRightBoundary());
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        if (other.hasSpeedLimit()) {
          setSpeedLimit(other.getSpeedLimit());
        }
        if (overlapIdBuilder_ == null) {
          if (!other.overlapId_.isEmpty()) {
            if (overlapId_.isEmpty()) {
              overlapId_ = other.overlapId_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureOverlapIdIsMutable();
              overlapId_.addAll(other.overlapId_);
            }
            onChanged();
          }
        } else {
          if (!other.overlapId_.isEmpty()) {
            if (overlapIdBuilder_.isEmpty()) {
              overlapIdBuilder_.dispose();
              overlapIdBuilder_ = null;
              overlapId_ = other.overlapId_;
              bitField0_ = (bitField0_ & ~0x00000040);
              overlapIdBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOverlapIdFieldBuilder() : null;
            } else {
              overlapIdBuilder_.addAllMessages(other.overlapId_);
            }
          }
        }
        if (predecessorIdBuilder_ == null) {
          if (!other.predecessorId_.isEmpty()) {
            if (predecessorId_.isEmpty()) {
              predecessorId_ = other.predecessorId_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensurePredecessorIdIsMutable();
              predecessorId_.addAll(other.predecessorId_);
            }
            onChanged();
          }
        } else {
          if (!other.predecessorId_.isEmpty()) {
            if (predecessorIdBuilder_.isEmpty()) {
              predecessorIdBuilder_.dispose();
              predecessorIdBuilder_ = null;
              predecessorId_ = other.predecessorId_;
              bitField0_ = (bitField0_ & ~0x00000080);
              predecessorIdBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPredecessorIdFieldBuilder() : null;
            } else {
              predecessorIdBuilder_.addAllMessages(other.predecessorId_);
            }
          }
        }
        if (successorIdBuilder_ == null) {
          if (!other.successorId_.isEmpty()) {
            if (successorId_.isEmpty()) {
              successorId_ = other.successorId_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureSuccessorIdIsMutable();
              successorId_.addAll(other.successorId_);
            }
            onChanged();
          }
        } else {
          if (!other.successorId_.isEmpty()) {
            if (successorIdBuilder_.isEmpty()) {
              successorIdBuilder_.dispose();
              successorIdBuilder_ = null;
              successorId_ = other.successorId_;
              bitField0_ = (bitField0_ & ~0x00000100);
              successorIdBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSuccessorIdFieldBuilder() : null;
            } else {
              successorIdBuilder_.addAllMessages(other.successorId_);
            }
          }
        }
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          if (!other.leftNeighborForwardLaneId_.isEmpty()) {
            if (leftNeighborForwardLaneId_.isEmpty()) {
              leftNeighborForwardLaneId_ = other.leftNeighborForwardLaneId_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureLeftNeighborForwardLaneIdIsMutable();
              leftNeighborForwardLaneId_.addAll(other.leftNeighborForwardLaneId_);
            }
            onChanged();
          }
        } else {
          if (!other.leftNeighborForwardLaneId_.isEmpty()) {
            if (leftNeighborForwardLaneIdBuilder_.isEmpty()) {
              leftNeighborForwardLaneIdBuilder_.dispose();
              leftNeighborForwardLaneIdBuilder_ = null;
              leftNeighborForwardLaneId_ = other.leftNeighborForwardLaneId_;
              bitField0_ = (bitField0_ & ~0x00000200);
              leftNeighborForwardLaneIdBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLeftNeighborForwardLaneIdFieldBuilder() : null;
            } else {
              leftNeighborForwardLaneIdBuilder_.addAllMessages(other.leftNeighborForwardLaneId_);
            }
          }
        }
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          if (!other.rightNeighborForwardLaneId_.isEmpty()) {
            if (rightNeighborForwardLaneId_.isEmpty()) {
              rightNeighborForwardLaneId_ = other.rightNeighborForwardLaneId_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureRightNeighborForwardLaneIdIsMutable();
              rightNeighborForwardLaneId_.addAll(other.rightNeighborForwardLaneId_);
            }
            onChanged();
          }
        } else {
          if (!other.rightNeighborForwardLaneId_.isEmpty()) {
            if (rightNeighborForwardLaneIdBuilder_.isEmpty()) {
              rightNeighborForwardLaneIdBuilder_.dispose();
              rightNeighborForwardLaneIdBuilder_ = null;
              rightNeighborForwardLaneId_ = other.rightNeighborForwardLaneId_;
              bitField0_ = (bitField0_ & ~0x00000400);
              rightNeighborForwardLaneIdBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRightNeighborForwardLaneIdFieldBuilder() : null;
            } else {
              rightNeighborForwardLaneIdBuilder_.addAllMessages(other.rightNeighborForwardLaneId_);
            }
          }
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasTurn()) {
          setTurn(other.getTurn());
        }
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          if (!other.leftNeighborReverseLaneId_.isEmpty()) {
            if (leftNeighborReverseLaneId_.isEmpty()) {
              leftNeighborReverseLaneId_ = other.leftNeighborReverseLaneId_;
              bitField0_ = (bitField0_ & ~0x00002000);
            } else {
              ensureLeftNeighborReverseLaneIdIsMutable();
              leftNeighborReverseLaneId_.addAll(other.leftNeighborReverseLaneId_);
            }
            onChanged();
          }
        } else {
          if (!other.leftNeighborReverseLaneId_.isEmpty()) {
            if (leftNeighborReverseLaneIdBuilder_.isEmpty()) {
              leftNeighborReverseLaneIdBuilder_.dispose();
              leftNeighborReverseLaneIdBuilder_ = null;
              leftNeighborReverseLaneId_ = other.leftNeighborReverseLaneId_;
              bitField0_ = (bitField0_ & ~0x00002000);
              leftNeighborReverseLaneIdBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLeftNeighborReverseLaneIdFieldBuilder() : null;
            } else {
              leftNeighborReverseLaneIdBuilder_.addAllMessages(other.leftNeighborReverseLaneId_);
            }
          }
        }
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          if (!other.rightNeighborReverseLaneId_.isEmpty()) {
            if (rightNeighborReverseLaneId_.isEmpty()) {
              rightNeighborReverseLaneId_ = other.rightNeighborReverseLaneId_;
              bitField0_ = (bitField0_ & ~0x00004000);
            } else {
              ensureRightNeighborReverseLaneIdIsMutable();
              rightNeighborReverseLaneId_.addAll(other.rightNeighborReverseLaneId_);
            }
            onChanged();
          }
        } else {
          if (!other.rightNeighborReverseLaneId_.isEmpty()) {
            if (rightNeighborReverseLaneIdBuilder_.isEmpty()) {
              rightNeighborReverseLaneIdBuilder_.dispose();
              rightNeighborReverseLaneIdBuilder_ = null;
              rightNeighborReverseLaneId_ = other.rightNeighborReverseLaneId_;
              bitField0_ = (bitField0_ & ~0x00004000);
              rightNeighborReverseLaneIdBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRightNeighborReverseLaneIdFieldBuilder() : null;
            } else {
              rightNeighborReverseLaneIdBuilder_.addAllMessages(other.rightNeighborReverseLaneId_);
            }
          }
        }
        if (other.hasJunctionId()) {
          mergeJunctionId(other.getJunctionId());
        }
        if (leftSampleBuilder_ == null) {
          if (!other.leftSample_.isEmpty()) {
            if (leftSample_.isEmpty()) {
              leftSample_ = other.leftSample_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureLeftSampleIsMutable();
              leftSample_.addAll(other.leftSample_);
            }
            onChanged();
          }
        } else {
          if (!other.leftSample_.isEmpty()) {
            if (leftSampleBuilder_.isEmpty()) {
              leftSampleBuilder_.dispose();
              leftSampleBuilder_ = null;
              leftSample_ = other.leftSample_;
              bitField0_ = (bitField0_ & ~0x00010000);
              leftSampleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLeftSampleFieldBuilder() : null;
            } else {
              leftSampleBuilder_.addAllMessages(other.leftSample_);
            }
          }
        }
        if (rightSampleBuilder_ == null) {
          if (!other.rightSample_.isEmpty()) {
            if (rightSample_.isEmpty()) {
              rightSample_ = other.rightSample_;
              bitField0_ = (bitField0_ & ~0x00020000);
            } else {
              ensureRightSampleIsMutable();
              rightSample_.addAll(other.rightSample_);
            }
            onChanged();
          }
        } else {
          if (!other.rightSample_.isEmpty()) {
            if (rightSampleBuilder_.isEmpty()) {
              rightSampleBuilder_.dispose();
              rightSampleBuilder_ = null;
              rightSample_ = other.rightSample_;
              bitField0_ = (bitField0_ & ~0x00020000);
              rightSampleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRightSampleFieldBuilder() : null;
            } else {
              rightSampleBuilder_.addAllMessages(other.rightSample_);
            }
          }
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        if (leftRoadSampleBuilder_ == null) {
          if (!other.leftRoadSample_.isEmpty()) {
            if (leftRoadSample_.isEmpty()) {
              leftRoadSample_ = other.leftRoadSample_;
              bitField0_ = (bitField0_ & ~0x00080000);
            } else {
              ensureLeftRoadSampleIsMutable();
              leftRoadSample_.addAll(other.leftRoadSample_);
            }
            onChanged();
          }
        } else {
          if (!other.leftRoadSample_.isEmpty()) {
            if (leftRoadSampleBuilder_.isEmpty()) {
              leftRoadSampleBuilder_.dispose();
              leftRoadSampleBuilder_ = null;
              leftRoadSample_ = other.leftRoadSample_;
              bitField0_ = (bitField0_ & ~0x00080000);
              leftRoadSampleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLeftRoadSampleFieldBuilder() : null;
            } else {
              leftRoadSampleBuilder_.addAllMessages(other.leftRoadSample_);
            }
          }
        }
        if (rightRoadSampleBuilder_ == null) {
          if (!other.rightRoadSample_.isEmpty()) {
            if (rightRoadSample_.isEmpty()) {
              rightRoadSample_ = other.rightRoadSample_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensureRightRoadSampleIsMutable();
              rightRoadSample_.addAll(other.rightRoadSample_);
            }
            onChanged();
          }
        } else {
          if (!other.rightRoadSample_.isEmpty()) {
            if (rightRoadSampleBuilder_.isEmpty()) {
              rightRoadSampleBuilder_.dispose();
              rightRoadSampleBuilder_ = null;
              rightRoadSample_ = other.rightRoadSample_;
              bitField0_ = (bitField0_ & ~0x00100000);
              rightRoadSampleBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRightRoadSampleFieldBuilder() : null;
            } else {
              rightRoadSampleBuilder_.addAllMessages(other.rightRoadSample_);
            }
          }
        }
        if (selfReverseLaneIdBuilder_ == null) {
          if (!other.selfReverseLaneId_.isEmpty()) {
            if (selfReverseLaneId_.isEmpty()) {
              selfReverseLaneId_ = other.selfReverseLaneId_;
              bitField0_ = (bitField0_ & ~0x00200000);
            } else {
              ensureSelfReverseLaneIdIsMutable();
              selfReverseLaneId_.addAll(other.selfReverseLaneId_);
            }
            onChanged();
          }
        } else {
          if (!other.selfReverseLaneId_.isEmpty()) {
            if (selfReverseLaneIdBuilder_.isEmpty()) {
              selfReverseLaneIdBuilder_.dispose();
              selfReverseLaneIdBuilder_ = null;
              selfReverseLaneId_ = other.selfReverseLaneId_;
              bitField0_ = (bitField0_ & ~0x00200000);
              selfReverseLaneIdBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSelfReverseLaneIdFieldBuilder() : null;
            } else {
              selfReverseLaneIdBuilder_.addAllMessages(other.selfReverseLaneId_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getIdFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getCentralCurveFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getLeftBoundaryFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getRightBoundaryFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 41: {
                length_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              case 49: {
                speedLimit_ = input.readDouble();
                bitField0_ |= 0x00000020;
                break;
              } // case 49
              case 58: {
                apollo.hdmap.MapId.Id m =
                    input.readMessage(
                        apollo.hdmap.MapId.Id.parser(),
                        extensionRegistry);
                if (overlapIdBuilder_ == null) {
                  ensureOverlapIdIsMutable();
                  overlapId_.add(m);
                } else {
                  overlapIdBuilder_.addMessage(m);
                }
                break;
              } // case 58
              case 66: {
                apollo.hdmap.MapId.Id m =
                    input.readMessage(
                        apollo.hdmap.MapId.Id.parser(),
                        extensionRegistry);
                if (predecessorIdBuilder_ == null) {
                  ensurePredecessorIdIsMutable();
                  predecessorId_.add(m);
                } else {
                  predecessorIdBuilder_.addMessage(m);
                }
                break;
              } // case 66
              case 74: {
                apollo.hdmap.MapId.Id m =
                    input.readMessage(
                        apollo.hdmap.MapId.Id.parser(),
                        extensionRegistry);
                if (successorIdBuilder_ == null) {
                  ensureSuccessorIdIsMutable();
                  successorId_.add(m);
                } else {
                  successorIdBuilder_.addMessage(m);
                }
                break;
              } // case 74
              case 82: {
                apollo.hdmap.MapId.Id m =
                    input.readMessage(
                        apollo.hdmap.MapId.Id.parser(),
                        extensionRegistry);
                if (leftNeighborForwardLaneIdBuilder_ == null) {
                  ensureLeftNeighborForwardLaneIdIsMutable();
                  leftNeighborForwardLaneId_.add(m);
                } else {
                  leftNeighborForwardLaneIdBuilder_.addMessage(m);
                }
                break;
              } // case 82
              case 90: {
                apollo.hdmap.MapId.Id m =
                    input.readMessage(
                        apollo.hdmap.MapId.Id.parser(),
                        extensionRegistry);
                if (rightNeighborForwardLaneIdBuilder_ == null) {
                  ensureRightNeighborForwardLaneIdIsMutable();
                  rightNeighborForwardLaneId_.add(m);
                } else {
                  rightNeighborForwardLaneIdBuilder_.addMessage(m);
                }
                break;
              } // case 90
              case 96: {
                int tmpRaw = input.readEnum();
                apollo.hdmap.MapLane.Lane.LaneType tmpValue =
                    apollo.hdmap.MapLane.Lane.LaneType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(12, tmpRaw);
                } else {
                  type_ = tmpRaw;
                  bitField0_ |= 0x00000800;
                }
                break;
              } // case 96
              case 104: {
                int tmpRaw = input.readEnum();
                apollo.hdmap.MapLane.Lane.LaneTurn tmpValue =
                    apollo.hdmap.MapLane.Lane.LaneTurn.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(13, tmpRaw);
                } else {
                  turn_ = tmpRaw;
                  bitField0_ |= 0x00001000;
                }
                break;
              } // case 104
              case 114: {
                apollo.hdmap.MapId.Id m =
                    input.readMessage(
                        apollo.hdmap.MapId.Id.parser(),
                        extensionRegistry);
                if (leftNeighborReverseLaneIdBuilder_ == null) {
                  ensureLeftNeighborReverseLaneIdIsMutable();
                  leftNeighborReverseLaneId_.add(m);
                } else {
                  leftNeighborReverseLaneIdBuilder_.addMessage(m);
                }
                break;
              } // case 114
              case 122: {
                apollo.hdmap.MapId.Id m =
                    input.readMessage(
                        apollo.hdmap.MapId.Id.parser(),
                        extensionRegistry);
                if (rightNeighborReverseLaneIdBuilder_ == null) {
                  ensureRightNeighborReverseLaneIdIsMutable();
                  rightNeighborReverseLaneId_.add(m);
                } else {
                  rightNeighborReverseLaneIdBuilder_.addMessage(m);
                }
                break;
              } // case 122
              case 130: {
                input.readMessage(
                    getJunctionIdFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00008000;
                break;
              } // case 130
              case 138: {
                apollo.hdmap.MapLane.LaneSampleAssociation m =
                    input.readMessage(
                        apollo.hdmap.MapLane.LaneSampleAssociation.parser(),
                        extensionRegistry);
                if (leftSampleBuilder_ == null) {
                  ensureLeftSampleIsMutable();
                  leftSample_.add(m);
                } else {
                  leftSampleBuilder_.addMessage(m);
                }
                break;
              } // case 138
              case 146: {
                apollo.hdmap.MapLane.LaneSampleAssociation m =
                    input.readMessage(
                        apollo.hdmap.MapLane.LaneSampleAssociation.parser(),
                        extensionRegistry);
                if (rightSampleBuilder_ == null) {
                  ensureRightSampleIsMutable();
                  rightSample_.add(m);
                } else {
                  rightSampleBuilder_.addMessage(m);
                }
                break;
              } // case 146
              case 152: {
                int tmpRaw = input.readEnum();
                apollo.hdmap.MapLane.Lane.LaneDirection tmpValue =
                    apollo.hdmap.MapLane.Lane.LaneDirection.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(19, tmpRaw);
                } else {
                  direction_ = tmpRaw;
                  bitField0_ |= 0x00040000;
                }
                break;
              } // case 152
              case 162: {
                apollo.hdmap.MapLane.LaneSampleAssociation m =
                    input.readMessage(
                        apollo.hdmap.MapLane.LaneSampleAssociation.parser(),
                        extensionRegistry);
                if (leftRoadSampleBuilder_ == null) {
                  ensureLeftRoadSampleIsMutable();
                  leftRoadSample_.add(m);
                } else {
                  leftRoadSampleBuilder_.addMessage(m);
                }
                break;
              } // case 162
              case 170: {
                apollo.hdmap.MapLane.LaneSampleAssociation m =
                    input.readMessage(
                        apollo.hdmap.MapLane.LaneSampleAssociation.parser(),
                        extensionRegistry);
                if (rightRoadSampleBuilder_ == null) {
                  ensureRightRoadSampleIsMutable();
                  rightRoadSample_.add(m);
                } else {
                  rightRoadSampleBuilder_.addMessage(m);
                }
                break;
              } // case 170
              case 178: {
                apollo.hdmap.MapId.Id m =
                    input.readMessage(
                        apollo.hdmap.MapId.Id.parser(),
                        extensionRegistry);
                if (selfReverseLaneIdBuilder_ == null) {
                  ensureSelfReverseLaneIdIsMutable();
                  selfReverseLaneId_.add(m);
                } else {
                  selfReverseLaneIdBuilder_.addMessage(m);
                }
                break;
              } // case 178
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private apollo.hdmap.MapId.Id id_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> idBuilder_;
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       * @return Whether the id field is set.
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       * @return The id.
       */
      public apollo.hdmap.MapId.Id getId() {
        if (idBuilder_ == null) {
          return id_ == null ? apollo.hdmap.MapId.Id.getDefaultInstance() : id_;
        } else {
          return idBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       */
      public Builder setId(apollo.hdmap.MapId.Id value) {
        if (idBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          id_ = value;
        } else {
          idBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       */
      public Builder setId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (idBuilder_ == null) {
          id_ = builderForValue.build();
        } else {
          idBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       */
      public Builder mergeId(apollo.hdmap.MapId.Id value) {
        if (idBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            id_ != null &&
            id_ != apollo.hdmap.MapId.Id.getDefaultInstance()) {
            getIdBuilder().mergeFrom(value);
          } else {
            id_ = value;
          }
        } else {
          idBuilder_.mergeFrom(value);
        }
        if (id_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = null;
        if (idBuilder_ != null) {
          idBuilder_.dispose();
          idBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getIdBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getIdOrBuilder() {
        if (idBuilder_ != null) {
          return idBuilder_.getMessageOrBuilder();
        } else {
          return id_ == null ?
              apollo.hdmap.MapId.Id.getDefaultInstance() : id_;
        }
      }
      /**
       * <code>optional .apollo.hdmap.Id id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getIdFieldBuilder() {
        if (idBuilder_ == null) {
          idBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  getId(),
                  getParentForChildren(),
                  isClean());
          id_ = null;
        }
        return idBuilder_;
      }

      private apollo.hdmap.MapGeometry.Curve centralCurve_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapGeometry.Curve, apollo.hdmap.MapGeometry.Curve.Builder, apollo.hdmap.MapGeometry.CurveOrBuilder> centralCurveBuilder_;
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       * @return Whether the centralCurve field is set.
       */
      public boolean hasCentralCurve() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       * @return The centralCurve.
       */
      public apollo.hdmap.MapGeometry.Curve getCentralCurve() {
        if (centralCurveBuilder_ == null) {
          return centralCurve_ == null ? apollo.hdmap.MapGeometry.Curve.getDefaultInstance() : centralCurve_;
        } else {
          return centralCurveBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       */
      public Builder setCentralCurve(apollo.hdmap.MapGeometry.Curve value) {
        if (centralCurveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          centralCurve_ = value;
        } else {
          centralCurveBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       */
      public Builder setCentralCurve(
          apollo.hdmap.MapGeometry.Curve.Builder builderForValue) {
        if (centralCurveBuilder_ == null) {
          centralCurve_ = builderForValue.build();
        } else {
          centralCurveBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       */
      public Builder mergeCentralCurve(apollo.hdmap.MapGeometry.Curve value) {
        if (centralCurveBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            centralCurve_ != null &&
            centralCurve_ != apollo.hdmap.MapGeometry.Curve.getDefaultInstance()) {
            getCentralCurveBuilder().mergeFrom(value);
          } else {
            centralCurve_ = value;
          }
        } else {
          centralCurveBuilder_.mergeFrom(value);
        }
        if (centralCurve_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       */
      public Builder clearCentralCurve() {
        bitField0_ = (bitField0_ & ~0x00000002);
        centralCurve_ = null;
        if (centralCurveBuilder_ != null) {
          centralCurveBuilder_.dispose();
          centralCurveBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       */
      public apollo.hdmap.MapGeometry.Curve.Builder getCentralCurveBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCentralCurveFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       */
      public apollo.hdmap.MapGeometry.CurveOrBuilder getCentralCurveOrBuilder() {
        if (centralCurveBuilder_ != null) {
          return centralCurveBuilder_.getMessageOrBuilder();
        } else {
          return centralCurve_ == null ?
              apollo.hdmap.MapGeometry.Curve.getDefaultInstance() : centralCurve_;
        }
      }
      /**
       * <pre>
       * Central lane as reference trajectory, not necessary to be the geometry
       * central.
       * </pre>
       *
       * <code>optional .apollo.hdmap.Curve central_curve = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapGeometry.Curve, apollo.hdmap.MapGeometry.Curve.Builder, apollo.hdmap.MapGeometry.CurveOrBuilder> 
          getCentralCurveFieldBuilder() {
        if (centralCurveBuilder_ == null) {
          centralCurveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.hdmap.MapGeometry.Curve, apollo.hdmap.MapGeometry.Curve.Builder, apollo.hdmap.MapGeometry.CurveOrBuilder>(
                  getCentralCurve(),
                  getParentForChildren(),
                  isClean());
          centralCurve_ = null;
        }
        return centralCurveBuilder_;
      }

      private apollo.hdmap.MapLane.LaneBoundary leftBoundary_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapLane.LaneBoundary, apollo.hdmap.MapLane.LaneBoundary.Builder, apollo.hdmap.MapLane.LaneBoundaryOrBuilder> leftBoundaryBuilder_;
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       * @return Whether the leftBoundary field is set.
       */
      public boolean hasLeftBoundary() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       * @return The leftBoundary.
       */
      public apollo.hdmap.MapLane.LaneBoundary getLeftBoundary() {
        if (leftBoundaryBuilder_ == null) {
          return leftBoundary_ == null ? apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance() : leftBoundary_;
        } else {
          return leftBoundaryBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       */
      public Builder setLeftBoundary(apollo.hdmap.MapLane.LaneBoundary value) {
        if (leftBoundaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          leftBoundary_ = value;
        } else {
          leftBoundaryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       */
      public Builder setLeftBoundary(
          apollo.hdmap.MapLane.LaneBoundary.Builder builderForValue) {
        if (leftBoundaryBuilder_ == null) {
          leftBoundary_ = builderForValue.build();
        } else {
          leftBoundaryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       */
      public Builder mergeLeftBoundary(apollo.hdmap.MapLane.LaneBoundary value) {
        if (leftBoundaryBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            leftBoundary_ != null &&
            leftBoundary_ != apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance()) {
            getLeftBoundaryBuilder().mergeFrom(value);
          } else {
            leftBoundary_ = value;
          }
        } else {
          leftBoundaryBuilder_.mergeFrom(value);
        }
        if (leftBoundary_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       */
      public Builder clearLeftBoundary() {
        bitField0_ = (bitField0_ & ~0x00000004);
        leftBoundary_ = null;
        if (leftBoundaryBuilder_ != null) {
          leftBoundaryBuilder_.dispose();
          leftBoundaryBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundary.Builder getLeftBoundaryBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getLeftBoundaryFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundaryOrBuilder getLeftBoundaryOrBuilder() {
        if (leftBoundaryBuilder_ != null) {
          return leftBoundaryBuilder_.getMessageOrBuilder();
        } else {
          return leftBoundary_ == null ?
              apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance() : leftBoundary_;
        }
      }
      /**
       * <pre>
       * Lane boundary curve.
       * </pre>
       *
       * <code>optional .apollo.hdmap.LaneBoundary left_boundary = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapLane.LaneBoundary, apollo.hdmap.MapLane.LaneBoundary.Builder, apollo.hdmap.MapLane.LaneBoundaryOrBuilder> 
          getLeftBoundaryFieldBuilder() {
        if (leftBoundaryBuilder_ == null) {
          leftBoundaryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.hdmap.MapLane.LaneBoundary, apollo.hdmap.MapLane.LaneBoundary.Builder, apollo.hdmap.MapLane.LaneBoundaryOrBuilder>(
                  getLeftBoundary(),
                  getParentForChildren(),
                  isClean());
          leftBoundary_ = null;
        }
        return leftBoundaryBuilder_;
      }

      private apollo.hdmap.MapLane.LaneBoundary rightBoundary_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapLane.LaneBoundary, apollo.hdmap.MapLane.LaneBoundary.Builder, apollo.hdmap.MapLane.LaneBoundaryOrBuilder> rightBoundaryBuilder_;
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       * @return Whether the rightBoundary field is set.
       */
      public boolean hasRightBoundary() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       * @return The rightBoundary.
       */
      public apollo.hdmap.MapLane.LaneBoundary getRightBoundary() {
        if (rightBoundaryBuilder_ == null) {
          return rightBoundary_ == null ? apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance() : rightBoundary_;
        } else {
          return rightBoundaryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       */
      public Builder setRightBoundary(apollo.hdmap.MapLane.LaneBoundary value) {
        if (rightBoundaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rightBoundary_ = value;
        } else {
          rightBoundaryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       */
      public Builder setRightBoundary(
          apollo.hdmap.MapLane.LaneBoundary.Builder builderForValue) {
        if (rightBoundaryBuilder_ == null) {
          rightBoundary_ = builderForValue.build();
        } else {
          rightBoundaryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       */
      public Builder mergeRightBoundary(apollo.hdmap.MapLane.LaneBoundary value) {
        if (rightBoundaryBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            rightBoundary_ != null &&
            rightBoundary_ != apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance()) {
            getRightBoundaryBuilder().mergeFrom(value);
          } else {
            rightBoundary_ = value;
          }
        } else {
          rightBoundaryBuilder_.mergeFrom(value);
        }
        if (rightBoundary_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       */
      public Builder clearRightBoundary() {
        bitField0_ = (bitField0_ & ~0x00000008);
        rightBoundary_ = null;
        if (rightBoundaryBuilder_ != null) {
          rightBoundaryBuilder_.dispose();
          rightBoundaryBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundary.Builder getRightBoundaryBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getRightBoundaryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       */
      public apollo.hdmap.MapLane.LaneBoundaryOrBuilder getRightBoundaryOrBuilder() {
        if (rightBoundaryBuilder_ != null) {
          return rightBoundaryBuilder_.getMessageOrBuilder();
        } else {
          return rightBoundary_ == null ?
              apollo.hdmap.MapLane.LaneBoundary.getDefaultInstance() : rightBoundary_;
        }
      }
      /**
       * <code>optional .apollo.hdmap.LaneBoundary right_boundary = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapLane.LaneBoundary, apollo.hdmap.MapLane.LaneBoundary.Builder, apollo.hdmap.MapLane.LaneBoundaryOrBuilder> 
          getRightBoundaryFieldBuilder() {
        if (rightBoundaryBuilder_ == null) {
          rightBoundaryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.hdmap.MapLane.LaneBoundary, apollo.hdmap.MapLane.LaneBoundary.Builder, apollo.hdmap.MapLane.LaneBoundaryOrBuilder>(
                  getRightBoundary(),
                  getParentForChildren(),
                  isClean());
          rightBoundary_ = null;
        }
        return rightBoundaryBuilder_;
      }

      private double length_ ;
      /**
       * <pre>
       * in meters.
       * </pre>
       *
       * <code>optional double length = 5;</code>
       * @return Whether the length field is set.
       */
      @java.lang.Override
      public boolean hasLength() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * in meters.
       * </pre>
       *
       * <code>optional double length = 5;</code>
       * @return The length.
       */
      @java.lang.Override
      public double getLength() {
        return length_;
      }
      /**
       * <pre>
       * in meters.
       * </pre>
       *
       * <code>optional double length = 5;</code>
       * @param value The length to set.
       * @return This builder for chaining.
       */
      public Builder setLength(double value) {

        length_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * in meters.
       * </pre>
       *
       * <code>optional double length = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000010);
        length_ = 0D;
        onChanged();
        return this;
      }

      private double speedLimit_ ;
      /**
       * <pre>
       * Speed limit of the lane, in meters per second.
       * </pre>
       *
       * <code>optional double speed_limit = 6;</code>
       * @return Whether the speedLimit field is set.
       */
      @java.lang.Override
      public boolean hasSpeedLimit() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Speed limit of the lane, in meters per second.
       * </pre>
       *
       * <code>optional double speed_limit = 6;</code>
       * @return The speedLimit.
       */
      @java.lang.Override
      public double getSpeedLimit() {
        return speedLimit_;
      }
      /**
       * <pre>
       * Speed limit of the lane, in meters per second.
       * </pre>
       *
       * <code>optional double speed_limit = 6;</code>
       * @param value The speedLimit to set.
       * @return This builder for chaining.
       */
      public Builder setSpeedLimit(double value) {

        speedLimit_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Speed limit of the lane, in meters per second.
       * </pre>
       *
       * <code>optional double speed_limit = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpeedLimit() {
        bitField0_ = (bitField0_ & ~0x00000020);
        speedLimit_ = 0D;
        onChanged();
        return this;
      }

      private java.util.List<apollo.hdmap.MapId.Id> overlapId_ =
        java.util.Collections.emptyList();
      private void ensureOverlapIdIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          overlapId_ = new java.util.ArrayList<apollo.hdmap.MapId.Id>(overlapId_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> overlapIdBuilder_;

      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id> getOverlapIdList() {
        if (overlapIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(overlapId_);
        } else {
          return overlapIdBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public int getOverlapIdCount() {
        if (overlapIdBuilder_ == null) {
          return overlapId_.size();
        } else {
          return overlapIdBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public apollo.hdmap.MapId.Id getOverlapId(int index) {
        if (overlapIdBuilder_ == null) {
          return overlapId_.get(index);
        } else {
          return overlapIdBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder setOverlapId(
          int index, apollo.hdmap.MapId.Id value) {
        if (overlapIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOverlapIdIsMutable();
          overlapId_.set(index, value);
          onChanged();
        } else {
          overlapIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder setOverlapId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (overlapIdBuilder_ == null) {
          ensureOverlapIdIsMutable();
          overlapId_.set(index, builderForValue.build());
          onChanged();
        } else {
          overlapIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder addOverlapId(apollo.hdmap.MapId.Id value) {
        if (overlapIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOverlapIdIsMutable();
          overlapId_.add(value);
          onChanged();
        } else {
          overlapIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder addOverlapId(
          int index, apollo.hdmap.MapId.Id value) {
        if (overlapIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOverlapIdIsMutable();
          overlapId_.add(index, value);
          onChanged();
        } else {
          overlapIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder addOverlapId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (overlapIdBuilder_ == null) {
          ensureOverlapIdIsMutable();
          overlapId_.add(builderForValue.build());
          onChanged();
        } else {
          overlapIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder addOverlapId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (overlapIdBuilder_ == null) {
          ensureOverlapIdIsMutable();
          overlapId_.add(index, builderForValue.build());
          onChanged();
        } else {
          overlapIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder addAllOverlapId(
          java.lang.Iterable<? extends apollo.hdmap.MapId.Id> values) {
        if (overlapIdBuilder_ == null) {
          ensureOverlapIdIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, overlapId_);
          onChanged();
        } else {
          overlapIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder clearOverlapId() {
        if (overlapIdBuilder_ == null) {
          overlapId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          overlapIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public Builder removeOverlapId(int index) {
        if (overlapIdBuilder_ == null) {
          ensureOverlapIdIsMutable();
          overlapId_.remove(index);
          onChanged();
        } else {
          overlapIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getOverlapIdBuilder(
          int index) {
        return getOverlapIdFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getOverlapIdOrBuilder(
          int index) {
        if (overlapIdBuilder_ == null) {
          return overlapId_.get(index);  } else {
          return overlapIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
           getOverlapIdOrBuilderList() {
        if (overlapIdBuilder_ != null) {
          return overlapIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(overlapId_);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addOverlapIdBuilder() {
        return getOverlapIdFieldBuilder().addBuilder(
            apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addOverlapIdBuilder(
          int index) {
        return getOverlapIdFieldBuilder().addBuilder(
            index, apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id overlap_id = 7;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id.Builder> 
           getOverlapIdBuilderList() {
        return getOverlapIdFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getOverlapIdFieldBuilder() {
        if (overlapIdBuilder_ == null) {
          overlapIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  overlapId_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          overlapId_ = null;
        }
        return overlapIdBuilder_;
      }

      private java.util.List<apollo.hdmap.MapId.Id> predecessorId_ =
        java.util.Collections.emptyList();
      private void ensurePredecessorIdIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          predecessorId_ = new java.util.ArrayList<apollo.hdmap.MapId.Id>(predecessorId_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> predecessorIdBuilder_;

      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id> getPredecessorIdList() {
        if (predecessorIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(predecessorId_);
        } else {
          return predecessorIdBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public int getPredecessorIdCount() {
        if (predecessorIdBuilder_ == null) {
          return predecessorId_.size();
        } else {
          return predecessorIdBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public apollo.hdmap.MapId.Id getPredecessorId(int index) {
        if (predecessorIdBuilder_ == null) {
          return predecessorId_.get(index);
        } else {
          return predecessorIdBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder setPredecessorId(
          int index, apollo.hdmap.MapId.Id value) {
        if (predecessorIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePredecessorIdIsMutable();
          predecessorId_.set(index, value);
          onChanged();
        } else {
          predecessorIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder setPredecessorId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (predecessorIdBuilder_ == null) {
          ensurePredecessorIdIsMutable();
          predecessorId_.set(index, builderForValue.build());
          onChanged();
        } else {
          predecessorIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder addPredecessorId(apollo.hdmap.MapId.Id value) {
        if (predecessorIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePredecessorIdIsMutable();
          predecessorId_.add(value);
          onChanged();
        } else {
          predecessorIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder addPredecessorId(
          int index, apollo.hdmap.MapId.Id value) {
        if (predecessorIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePredecessorIdIsMutable();
          predecessorId_.add(index, value);
          onChanged();
        } else {
          predecessorIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder addPredecessorId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (predecessorIdBuilder_ == null) {
          ensurePredecessorIdIsMutable();
          predecessorId_.add(builderForValue.build());
          onChanged();
        } else {
          predecessorIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder addPredecessorId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (predecessorIdBuilder_ == null) {
          ensurePredecessorIdIsMutable();
          predecessorId_.add(index, builderForValue.build());
          onChanged();
        } else {
          predecessorIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder addAllPredecessorId(
          java.lang.Iterable<? extends apollo.hdmap.MapId.Id> values) {
        if (predecessorIdBuilder_ == null) {
          ensurePredecessorIdIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, predecessorId_);
          onChanged();
        } else {
          predecessorIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder clearPredecessorId() {
        if (predecessorIdBuilder_ == null) {
          predecessorId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          predecessorIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public Builder removePredecessorId(int index) {
        if (predecessorIdBuilder_ == null) {
          ensurePredecessorIdIsMutable();
          predecessorId_.remove(index);
          onChanged();
        } else {
          predecessorIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getPredecessorIdBuilder(
          int index) {
        return getPredecessorIdFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getPredecessorIdOrBuilder(
          int index) {
        if (predecessorIdBuilder_ == null) {
          return predecessorId_.get(index);  } else {
          return predecessorIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
           getPredecessorIdOrBuilderList() {
        if (predecessorIdBuilder_ != null) {
          return predecessorIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(predecessorId_);
        }
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addPredecessorIdBuilder() {
        return getPredecessorIdFieldBuilder().addBuilder(
            apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addPredecessorIdBuilder(
          int index) {
        return getPredecessorIdFieldBuilder().addBuilder(
            index, apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <pre>
       * All lanes can be driving into (or from).
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id predecessor_id = 8;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id.Builder> 
           getPredecessorIdBuilderList() {
        return getPredecessorIdFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getPredecessorIdFieldBuilder() {
        if (predecessorIdBuilder_ == null) {
          predecessorIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  predecessorId_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          predecessorId_ = null;
        }
        return predecessorIdBuilder_;
      }

      private java.util.List<apollo.hdmap.MapId.Id> successorId_ =
        java.util.Collections.emptyList();
      private void ensureSuccessorIdIsMutable() {
        if (!((bitField0_ & 0x00000100) != 0)) {
          successorId_ = new java.util.ArrayList<apollo.hdmap.MapId.Id>(successorId_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> successorIdBuilder_;

      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id> getSuccessorIdList() {
        if (successorIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(successorId_);
        } else {
          return successorIdBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public int getSuccessorIdCount() {
        if (successorIdBuilder_ == null) {
          return successorId_.size();
        } else {
          return successorIdBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public apollo.hdmap.MapId.Id getSuccessorId(int index) {
        if (successorIdBuilder_ == null) {
          return successorId_.get(index);
        } else {
          return successorIdBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder setSuccessorId(
          int index, apollo.hdmap.MapId.Id value) {
        if (successorIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuccessorIdIsMutable();
          successorId_.set(index, value);
          onChanged();
        } else {
          successorIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder setSuccessorId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (successorIdBuilder_ == null) {
          ensureSuccessorIdIsMutable();
          successorId_.set(index, builderForValue.build());
          onChanged();
        } else {
          successorIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder addSuccessorId(apollo.hdmap.MapId.Id value) {
        if (successorIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuccessorIdIsMutable();
          successorId_.add(value);
          onChanged();
        } else {
          successorIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder addSuccessorId(
          int index, apollo.hdmap.MapId.Id value) {
        if (successorIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSuccessorIdIsMutable();
          successorId_.add(index, value);
          onChanged();
        } else {
          successorIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder addSuccessorId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (successorIdBuilder_ == null) {
          ensureSuccessorIdIsMutable();
          successorId_.add(builderForValue.build());
          onChanged();
        } else {
          successorIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder addSuccessorId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (successorIdBuilder_ == null) {
          ensureSuccessorIdIsMutable();
          successorId_.add(index, builderForValue.build());
          onChanged();
        } else {
          successorIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder addAllSuccessorId(
          java.lang.Iterable<? extends apollo.hdmap.MapId.Id> values) {
        if (successorIdBuilder_ == null) {
          ensureSuccessorIdIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, successorId_);
          onChanged();
        } else {
          successorIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder clearSuccessorId() {
        if (successorIdBuilder_ == null) {
          successorId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          successorIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public Builder removeSuccessorId(int index) {
        if (successorIdBuilder_ == null) {
          ensureSuccessorIdIsMutable();
          successorId_.remove(index);
          onChanged();
        } else {
          successorIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getSuccessorIdBuilder(
          int index) {
        return getSuccessorIdFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getSuccessorIdOrBuilder(
          int index) {
        if (successorIdBuilder_ == null) {
          return successorId_.get(index);  } else {
          return successorIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
           getSuccessorIdOrBuilderList() {
        if (successorIdBuilder_ != null) {
          return successorIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(successorId_);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addSuccessorIdBuilder() {
        return getSuccessorIdFieldBuilder().addBuilder(
            apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addSuccessorIdBuilder(
          int index) {
        return getSuccessorIdFieldBuilder().addBuilder(
            index, apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id successor_id = 9;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id.Builder> 
           getSuccessorIdBuilderList() {
        return getSuccessorIdFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getSuccessorIdFieldBuilder() {
        if (successorIdBuilder_ == null) {
          successorIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  successorId_,
                  ((bitField0_ & 0x00000100) != 0),
                  getParentForChildren(),
                  isClean());
          successorId_ = null;
        }
        return successorIdBuilder_;
      }

      private java.util.List<apollo.hdmap.MapId.Id> leftNeighborForwardLaneId_ =
        java.util.Collections.emptyList();
      private void ensureLeftNeighborForwardLaneIdIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          leftNeighborForwardLaneId_ = new java.util.ArrayList<apollo.hdmap.MapId.Id>(leftNeighborForwardLaneId_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> leftNeighborForwardLaneIdBuilder_;

      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id> getLeftNeighborForwardLaneIdList() {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(leftNeighborForwardLaneId_);
        } else {
          return leftNeighborForwardLaneIdBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public int getLeftNeighborForwardLaneIdCount() {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          return leftNeighborForwardLaneId_.size();
        } else {
          return leftNeighborForwardLaneIdBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public apollo.hdmap.MapId.Id getLeftNeighborForwardLaneId(int index) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          return leftNeighborForwardLaneId_.get(index);
        } else {
          return leftNeighborForwardLaneIdBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder setLeftNeighborForwardLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftNeighborForwardLaneIdIsMutable();
          leftNeighborForwardLaneId_.set(index, value);
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder setLeftNeighborForwardLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          ensureLeftNeighborForwardLaneIdIsMutable();
          leftNeighborForwardLaneId_.set(index, builderForValue.build());
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder addLeftNeighborForwardLaneId(apollo.hdmap.MapId.Id value) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftNeighborForwardLaneIdIsMutable();
          leftNeighborForwardLaneId_.add(value);
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder addLeftNeighborForwardLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftNeighborForwardLaneIdIsMutable();
          leftNeighborForwardLaneId_.add(index, value);
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder addLeftNeighborForwardLaneId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          ensureLeftNeighborForwardLaneIdIsMutable();
          leftNeighborForwardLaneId_.add(builderForValue.build());
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder addLeftNeighborForwardLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          ensureLeftNeighborForwardLaneIdIsMutable();
          leftNeighborForwardLaneId_.add(index, builderForValue.build());
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder addAllLeftNeighborForwardLaneId(
          java.lang.Iterable<? extends apollo.hdmap.MapId.Id> values) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          ensureLeftNeighborForwardLaneIdIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, leftNeighborForwardLaneId_);
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder clearLeftNeighborForwardLaneId() {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          leftNeighborForwardLaneId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public Builder removeLeftNeighborForwardLaneId(int index) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          ensureLeftNeighborForwardLaneIdIsMutable();
          leftNeighborForwardLaneId_.remove(index);
          onChanged();
        } else {
          leftNeighborForwardLaneIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getLeftNeighborForwardLaneIdBuilder(
          int index) {
        return getLeftNeighborForwardLaneIdFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getLeftNeighborForwardLaneIdOrBuilder(
          int index) {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          return leftNeighborForwardLaneId_.get(index);  } else {
          return leftNeighborForwardLaneIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
           getLeftNeighborForwardLaneIdOrBuilderList() {
        if (leftNeighborForwardLaneIdBuilder_ != null) {
          return leftNeighborForwardLaneIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(leftNeighborForwardLaneId_);
        }
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addLeftNeighborForwardLaneIdBuilder() {
        return getLeftNeighborForwardLaneIdFieldBuilder().addBuilder(
            apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addLeftNeighborForwardLaneIdBuilder(
          int index) {
        return getLeftNeighborForwardLaneIdFieldBuilder().addBuilder(
            index, apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <pre>
       * Neighbor lanes on the same direction.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id.Builder> 
           getLeftNeighborForwardLaneIdBuilderList() {
        return getLeftNeighborForwardLaneIdFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getLeftNeighborForwardLaneIdFieldBuilder() {
        if (leftNeighborForwardLaneIdBuilder_ == null) {
          leftNeighborForwardLaneIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  leftNeighborForwardLaneId_,
                  ((bitField0_ & 0x00000200) != 0),
                  getParentForChildren(),
                  isClean());
          leftNeighborForwardLaneId_ = null;
        }
        return leftNeighborForwardLaneIdBuilder_;
      }

      private java.util.List<apollo.hdmap.MapId.Id> rightNeighborForwardLaneId_ =
        java.util.Collections.emptyList();
      private void ensureRightNeighborForwardLaneIdIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          rightNeighborForwardLaneId_ = new java.util.ArrayList<apollo.hdmap.MapId.Id>(rightNeighborForwardLaneId_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> rightNeighborForwardLaneIdBuilder_;

      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id> getRightNeighborForwardLaneIdList() {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rightNeighborForwardLaneId_);
        } else {
          return rightNeighborForwardLaneIdBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public int getRightNeighborForwardLaneIdCount() {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          return rightNeighborForwardLaneId_.size();
        } else {
          return rightNeighborForwardLaneIdBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public apollo.hdmap.MapId.Id getRightNeighborForwardLaneId(int index) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          return rightNeighborForwardLaneId_.get(index);
        } else {
          return rightNeighborForwardLaneIdBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder setRightNeighborForwardLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightNeighborForwardLaneIdIsMutable();
          rightNeighborForwardLaneId_.set(index, value);
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder setRightNeighborForwardLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          ensureRightNeighborForwardLaneIdIsMutable();
          rightNeighborForwardLaneId_.set(index, builderForValue.build());
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder addRightNeighborForwardLaneId(apollo.hdmap.MapId.Id value) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightNeighborForwardLaneIdIsMutable();
          rightNeighborForwardLaneId_.add(value);
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder addRightNeighborForwardLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightNeighborForwardLaneIdIsMutable();
          rightNeighborForwardLaneId_.add(index, value);
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder addRightNeighborForwardLaneId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          ensureRightNeighborForwardLaneIdIsMutable();
          rightNeighborForwardLaneId_.add(builderForValue.build());
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder addRightNeighborForwardLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          ensureRightNeighborForwardLaneIdIsMutable();
          rightNeighborForwardLaneId_.add(index, builderForValue.build());
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder addAllRightNeighborForwardLaneId(
          java.lang.Iterable<? extends apollo.hdmap.MapId.Id> values) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          ensureRightNeighborForwardLaneIdIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rightNeighborForwardLaneId_);
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder clearRightNeighborForwardLaneId() {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          rightNeighborForwardLaneId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public Builder removeRightNeighborForwardLaneId(int index) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          ensureRightNeighborForwardLaneIdIsMutable();
          rightNeighborForwardLaneId_.remove(index);
          onChanged();
        } else {
          rightNeighborForwardLaneIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getRightNeighborForwardLaneIdBuilder(
          int index) {
        return getRightNeighborForwardLaneIdFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getRightNeighborForwardLaneIdOrBuilder(
          int index) {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          return rightNeighborForwardLaneId_.get(index);  } else {
          return rightNeighborForwardLaneIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
           getRightNeighborForwardLaneIdOrBuilderList() {
        if (rightNeighborForwardLaneIdBuilder_ != null) {
          return rightNeighborForwardLaneIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rightNeighborForwardLaneId_);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addRightNeighborForwardLaneIdBuilder() {
        return getRightNeighborForwardLaneIdFieldBuilder().addBuilder(
            apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addRightNeighborForwardLaneIdBuilder(
          int index) {
        return getRightNeighborForwardLaneIdFieldBuilder().addBuilder(
            index, apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id.Builder> 
           getRightNeighborForwardLaneIdBuilderList() {
        return getRightNeighborForwardLaneIdFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getRightNeighborForwardLaneIdFieldBuilder() {
        if (rightNeighborForwardLaneIdBuilder_ == null) {
          rightNeighborForwardLaneIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  rightNeighborForwardLaneId_,
                  ((bitField0_ & 0x00000400) != 0),
                  getParentForChildren(),
                  isClean());
          rightNeighborForwardLaneId_ = null;
        }
        return rightNeighborForwardLaneIdBuilder_;
      }

      private int type_ = 1;
      /**
       * <code>optional .apollo.hdmap.Lane.LaneType type = 12;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override public boolean hasType() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneType type = 12;</code>
       * @return The type.
       */
      @java.lang.Override
      public apollo.hdmap.MapLane.Lane.LaneType getType() {
        apollo.hdmap.MapLane.Lane.LaneType result = apollo.hdmap.MapLane.Lane.LaneType.forNumber(type_);
        return result == null ? apollo.hdmap.MapLane.Lane.LaneType.NONE : result;
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneType type = 12;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(apollo.hdmap.MapLane.Lane.LaneType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000800;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneType type = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000800);
        type_ = 1;
        onChanged();
        return this;
      }

      private int turn_ = 1;
      /**
       * <code>optional .apollo.hdmap.Lane.LaneTurn turn = 13;</code>
       * @return Whether the turn field is set.
       */
      @java.lang.Override public boolean hasTurn() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneTurn turn = 13;</code>
       * @return The turn.
       */
      @java.lang.Override
      public apollo.hdmap.MapLane.Lane.LaneTurn getTurn() {
        apollo.hdmap.MapLane.Lane.LaneTurn result = apollo.hdmap.MapLane.Lane.LaneTurn.forNumber(turn_);
        return result == null ? apollo.hdmap.MapLane.Lane.LaneTurn.NO_TURN : result;
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneTurn turn = 13;</code>
       * @param value The turn to set.
       * @return This builder for chaining.
       */
      public Builder setTurn(apollo.hdmap.MapLane.Lane.LaneTurn value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        turn_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneTurn turn = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearTurn() {
        bitField0_ = (bitField0_ & ~0x00001000);
        turn_ = 1;
        onChanged();
        return this;
      }

      private java.util.List<apollo.hdmap.MapId.Id> leftNeighborReverseLaneId_ =
        java.util.Collections.emptyList();
      private void ensureLeftNeighborReverseLaneIdIsMutable() {
        if (!((bitField0_ & 0x00002000) != 0)) {
          leftNeighborReverseLaneId_ = new java.util.ArrayList<apollo.hdmap.MapId.Id>(leftNeighborReverseLaneId_);
          bitField0_ |= 0x00002000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> leftNeighborReverseLaneIdBuilder_;

      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id> getLeftNeighborReverseLaneIdList() {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(leftNeighborReverseLaneId_);
        } else {
          return leftNeighborReverseLaneIdBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public int getLeftNeighborReverseLaneIdCount() {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          return leftNeighborReverseLaneId_.size();
        } else {
          return leftNeighborReverseLaneIdBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public apollo.hdmap.MapId.Id getLeftNeighborReverseLaneId(int index) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          return leftNeighborReverseLaneId_.get(index);
        } else {
          return leftNeighborReverseLaneIdBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder setLeftNeighborReverseLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftNeighborReverseLaneIdIsMutable();
          leftNeighborReverseLaneId_.set(index, value);
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder setLeftNeighborReverseLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          ensureLeftNeighborReverseLaneIdIsMutable();
          leftNeighborReverseLaneId_.set(index, builderForValue.build());
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder addLeftNeighborReverseLaneId(apollo.hdmap.MapId.Id value) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftNeighborReverseLaneIdIsMutable();
          leftNeighborReverseLaneId_.add(value);
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder addLeftNeighborReverseLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftNeighborReverseLaneIdIsMutable();
          leftNeighborReverseLaneId_.add(index, value);
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder addLeftNeighborReverseLaneId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          ensureLeftNeighborReverseLaneIdIsMutable();
          leftNeighborReverseLaneId_.add(builderForValue.build());
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder addLeftNeighborReverseLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          ensureLeftNeighborReverseLaneIdIsMutable();
          leftNeighborReverseLaneId_.add(index, builderForValue.build());
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder addAllLeftNeighborReverseLaneId(
          java.lang.Iterable<? extends apollo.hdmap.MapId.Id> values) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          ensureLeftNeighborReverseLaneIdIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, leftNeighborReverseLaneId_);
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder clearLeftNeighborReverseLaneId() {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          leftNeighborReverseLaneId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00002000);
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public Builder removeLeftNeighborReverseLaneId(int index) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          ensureLeftNeighborReverseLaneIdIsMutable();
          leftNeighborReverseLaneId_.remove(index);
          onChanged();
        } else {
          leftNeighborReverseLaneIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getLeftNeighborReverseLaneIdBuilder(
          int index) {
        return getLeftNeighborReverseLaneIdFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getLeftNeighborReverseLaneIdOrBuilder(
          int index) {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          return leftNeighborReverseLaneId_.get(index);  } else {
          return leftNeighborReverseLaneIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
           getLeftNeighborReverseLaneIdOrBuilderList() {
        if (leftNeighborReverseLaneIdBuilder_ != null) {
          return leftNeighborReverseLaneIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(leftNeighborReverseLaneId_);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addLeftNeighborReverseLaneIdBuilder() {
        return getLeftNeighborReverseLaneIdFieldBuilder().addBuilder(
            apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addLeftNeighborReverseLaneIdBuilder(
          int index) {
        return getLeftNeighborReverseLaneIdFieldBuilder().addBuilder(
            index, apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id.Builder> 
           getLeftNeighborReverseLaneIdBuilderList() {
        return getLeftNeighborReverseLaneIdFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getLeftNeighborReverseLaneIdFieldBuilder() {
        if (leftNeighborReverseLaneIdBuilder_ == null) {
          leftNeighborReverseLaneIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  leftNeighborReverseLaneId_,
                  ((bitField0_ & 0x00002000) != 0),
                  getParentForChildren(),
                  isClean());
          leftNeighborReverseLaneId_ = null;
        }
        return leftNeighborReverseLaneIdBuilder_;
      }

      private java.util.List<apollo.hdmap.MapId.Id> rightNeighborReverseLaneId_ =
        java.util.Collections.emptyList();
      private void ensureRightNeighborReverseLaneIdIsMutable() {
        if (!((bitField0_ & 0x00004000) != 0)) {
          rightNeighborReverseLaneId_ = new java.util.ArrayList<apollo.hdmap.MapId.Id>(rightNeighborReverseLaneId_);
          bitField0_ |= 0x00004000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> rightNeighborReverseLaneIdBuilder_;

      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id> getRightNeighborReverseLaneIdList() {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rightNeighborReverseLaneId_);
        } else {
          return rightNeighborReverseLaneIdBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public int getRightNeighborReverseLaneIdCount() {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          return rightNeighborReverseLaneId_.size();
        } else {
          return rightNeighborReverseLaneIdBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public apollo.hdmap.MapId.Id getRightNeighborReverseLaneId(int index) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          return rightNeighborReverseLaneId_.get(index);
        } else {
          return rightNeighborReverseLaneIdBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder setRightNeighborReverseLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightNeighborReverseLaneIdIsMutable();
          rightNeighborReverseLaneId_.set(index, value);
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder setRightNeighborReverseLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          ensureRightNeighborReverseLaneIdIsMutable();
          rightNeighborReverseLaneId_.set(index, builderForValue.build());
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder addRightNeighborReverseLaneId(apollo.hdmap.MapId.Id value) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightNeighborReverseLaneIdIsMutable();
          rightNeighborReverseLaneId_.add(value);
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder addRightNeighborReverseLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightNeighborReverseLaneIdIsMutable();
          rightNeighborReverseLaneId_.add(index, value);
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder addRightNeighborReverseLaneId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          ensureRightNeighborReverseLaneIdIsMutable();
          rightNeighborReverseLaneId_.add(builderForValue.build());
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder addRightNeighborReverseLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          ensureRightNeighborReverseLaneIdIsMutable();
          rightNeighborReverseLaneId_.add(index, builderForValue.build());
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder addAllRightNeighborReverseLaneId(
          java.lang.Iterable<? extends apollo.hdmap.MapId.Id> values) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          ensureRightNeighborReverseLaneIdIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rightNeighborReverseLaneId_);
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder clearRightNeighborReverseLaneId() {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          rightNeighborReverseLaneId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00004000);
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public Builder removeRightNeighborReverseLaneId(int index) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          ensureRightNeighborReverseLaneIdIsMutable();
          rightNeighborReverseLaneId_.remove(index);
          onChanged();
        } else {
          rightNeighborReverseLaneIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getRightNeighborReverseLaneIdBuilder(
          int index) {
        return getRightNeighborReverseLaneIdFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getRightNeighborReverseLaneIdOrBuilder(
          int index) {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          return rightNeighborReverseLaneId_.get(index);  } else {
          return rightNeighborReverseLaneIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
           getRightNeighborReverseLaneIdOrBuilderList() {
        if (rightNeighborReverseLaneIdBuilder_ != null) {
          return rightNeighborReverseLaneIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rightNeighborReverseLaneId_);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addRightNeighborReverseLaneIdBuilder() {
        return getRightNeighborReverseLaneIdFieldBuilder().addBuilder(
            apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addRightNeighborReverseLaneIdBuilder(
          int index) {
        return getRightNeighborReverseLaneIdFieldBuilder().addBuilder(
            index, apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id.Builder> 
           getRightNeighborReverseLaneIdBuilderList() {
        return getRightNeighborReverseLaneIdFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getRightNeighborReverseLaneIdFieldBuilder() {
        if (rightNeighborReverseLaneIdBuilder_ == null) {
          rightNeighborReverseLaneIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  rightNeighborReverseLaneId_,
                  ((bitField0_ & 0x00004000) != 0),
                  getParentForChildren(),
                  isClean());
          rightNeighborReverseLaneId_ = null;
        }
        return rightNeighborReverseLaneIdBuilder_;
      }

      private apollo.hdmap.MapId.Id junctionId_;
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> junctionIdBuilder_;
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       * @return Whether the junctionId field is set.
       */
      public boolean hasJunctionId() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       * @return The junctionId.
       */
      public apollo.hdmap.MapId.Id getJunctionId() {
        if (junctionIdBuilder_ == null) {
          return junctionId_ == null ? apollo.hdmap.MapId.Id.getDefaultInstance() : junctionId_;
        } else {
          return junctionIdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       */
      public Builder setJunctionId(apollo.hdmap.MapId.Id value) {
        if (junctionIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          junctionId_ = value;
        } else {
          junctionIdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       */
      public Builder setJunctionId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (junctionIdBuilder_ == null) {
          junctionId_ = builderForValue.build();
        } else {
          junctionIdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       */
      public Builder mergeJunctionId(apollo.hdmap.MapId.Id value) {
        if (junctionIdBuilder_ == null) {
          if (((bitField0_ & 0x00008000) != 0) &&
            junctionId_ != null &&
            junctionId_ != apollo.hdmap.MapId.Id.getDefaultInstance()) {
            getJunctionIdBuilder().mergeFrom(value);
          } else {
            junctionId_ = value;
          }
        } else {
          junctionIdBuilder_.mergeFrom(value);
        }
        if (junctionId_ != null) {
          bitField0_ |= 0x00008000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       */
      public Builder clearJunctionId() {
        bitField0_ = (bitField0_ & ~0x00008000);
        junctionId_ = null;
        if (junctionIdBuilder_ != null) {
          junctionIdBuilder_.dispose();
          junctionIdBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getJunctionIdBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getJunctionIdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getJunctionIdOrBuilder() {
        if (junctionIdBuilder_ != null) {
          return junctionIdBuilder_.getMessageOrBuilder();
        } else {
          return junctionId_ == null ?
              apollo.hdmap.MapId.Id.getDefaultInstance() : junctionId_;
        }
      }
      /**
       * <code>optional .apollo.hdmap.Id junction_id = 16;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getJunctionIdFieldBuilder() {
        if (junctionIdBuilder_ == null) {
          junctionIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  getJunctionId(),
                  getParentForChildren(),
                  isClean());
          junctionId_ = null;
        }
        return junctionIdBuilder_;
      }

      private java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> leftSample_ =
        java.util.Collections.emptyList();
      private void ensureLeftSampleIsMutable() {
        if (!((bitField0_ & 0x00010000) != 0)) {
          leftSample_ = new java.util.ArrayList<apollo.hdmap.MapLane.LaneSampleAssociation>(leftSample_);
          bitField0_ |= 0x00010000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> leftSampleBuilder_;

      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> getLeftSampleList() {
        if (leftSampleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(leftSample_);
        } else {
          return leftSampleBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public int getLeftSampleCount() {
        if (leftSampleBuilder_ == null) {
          return leftSample_.size();
        } else {
          return leftSampleBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation getLeftSample(int index) {
        if (leftSampleBuilder_ == null) {
          return leftSample_.get(index);
        } else {
          return leftSampleBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder setLeftSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (leftSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftSampleIsMutable();
          leftSample_.set(index, value);
          onChanged();
        } else {
          leftSampleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder setLeftSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (leftSampleBuilder_ == null) {
          ensureLeftSampleIsMutable();
          leftSample_.set(index, builderForValue.build());
          onChanged();
        } else {
          leftSampleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder addLeftSample(apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (leftSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftSampleIsMutable();
          leftSample_.add(value);
          onChanged();
        } else {
          leftSampleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder addLeftSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (leftSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftSampleIsMutable();
          leftSample_.add(index, value);
          onChanged();
        } else {
          leftSampleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder addLeftSample(
          apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (leftSampleBuilder_ == null) {
          ensureLeftSampleIsMutable();
          leftSample_.add(builderForValue.build());
          onChanged();
        } else {
          leftSampleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder addLeftSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (leftSampleBuilder_ == null) {
          ensureLeftSampleIsMutable();
          leftSample_.add(index, builderForValue.build());
          onChanged();
        } else {
          leftSampleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder addAllLeftSample(
          java.lang.Iterable<? extends apollo.hdmap.MapLane.LaneSampleAssociation> values) {
        if (leftSampleBuilder_ == null) {
          ensureLeftSampleIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, leftSample_);
          onChanged();
        } else {
          leftSampleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder clearLeftSample() {
        if (leftSampleBuilder_ == null) {
          leftSample_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
        } else {
          leftSampleBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public Builder removeLeftSample(int index) {
        if (leftSampleBuilder_ == null) {
          ensureLeftSampleIsMutable();
          leftSample_.remove(index);
          onChanged();
        } else {
          leftSampleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder getLeftSampleBuilder(
          int index) {
        return getLeftSampleFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getLeftSampleOrBuilder(
          int index) {
        if (leftSampleBuilder_ == null) {
          return leftSample_.get(index);  } else {
          return leftSampleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
           getLeftSampleOrBuilderList() {
        if (leftSampleBuilder_ != null) {
          return leftSampleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(leftSample_);
        }
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder addLeftSampleBuilder() {
        return getLeftSampleFieldBuilder().addBuilder(
            apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance());
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder addLeftSampleBuilder(
          int index) {
        return getLeftSampleFieldBuilder().addBuilder(
            index, apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance());
      }
      /**
       * <pre>
       * Association between central point to closest boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation.Builder> 
           getLeftSampleBuilderList() {
        return getLeftSampleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
          getLeftSampleFieldBuilder() {
        if (leftSampleBuilder_ == null) {
          leftSampleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder>(
                  leftSample_,
                  ((bitField0_ & 0x00010000) != 0),
                  getParentForChildren(),
                  isClean());
          leftSample_ = null;
        }
        return leftSampleBuilder_;
      }

      private java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> rightSample_ =
        java.util.Collections.emptyList();
      private void ensureRightSampleIsMutable() {
        if (!((bitField0_ & 0x00020000) != 0)) {
          rightSample_ = new java.util.ArrayList<apollo.hdmap.MapLane.LaneSampleAssociation>(rightSample_);
          bitField0_ |= 0x00020000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> rightSampleBuilder_;

      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> getRightSampleList() {
        if (rightSampleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rightSample_);
        } else {
          return rightSampleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public int getRightSampleCount() {
        if (rightSampleBuilder_ == null) {
          return rightSample_.size();
        } else {
          return rightSampleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation getRightSample(int index) {
        if (rightSampleBuilder_ == null) {
          return rightSample_.get(index);
        } else {
          return rightSampleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder setRightSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (rightSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightSampleIsMutable();
          rightSample_.set(index, value);
          onChanged();
        } else {
          rightSampleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder setRightSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (rightSampleBuilder_ == null) {
          ensureRightSampleIsMutable();
          rightSample_.set(index, builderForValue.build());
          onChanged();
        } else {
          rightSampleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder addRightSample(apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (rightSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightSampleIsMutable();
          rightSample_.add(value);
          onChanged();
        } else {
          rightSampleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder addRightSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (rightSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightSampleIsMutable();
          rightSample_.add(index, value);
          onChanged();
        } else {
          rightSampleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder addRightSample(
          apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (rightSampleBuilder_ == null) {
          ensureRightSampleIsMutable();
          rightSample_.add(builderForValue.build());
          onChanged();
        } else {
          rightSampleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder addRightSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (rightSampleBuilder_ == null) {
          ensureRightSampleIsMutable();
          rightSample_.add(index, builderForValue.build());
          onChanged();
        } else {
          rightSampleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder addAllRightSample(
          java.lang.Iterable<? extends apollo.hdmap.MapLane.LaneSampleAssociation> values) {
        if (rightSampleBuilder_ == null) {
          ensureRightSampleIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rightSample_);
          onChanged();
        } else {
          rightSampleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder clearRightSample() {
        if (rightSampleBuilder_ == null) {
          rightSample_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00020000);
          onChanged();
        } else {
          rightSampleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public Builder removeRightSample(int index) {
        if (rightSampleBuilder_ == null) {
          ensureRightSampleIsMutable();
          rightSample_.remove(index);
          onChanged();
        } else {
          rightSampleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder getRightSampleBuilder(
          int index) {
        return getRightSampleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getRightSampleOrBuilder(
          int index) {
        if (rightSampleBuilder_ == null) {
          return rightSample_.get(index);  } else {
          return rightSampleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
           getRightSampleOrBuilderList() {
        if (rightSampleBuilder_ != null) {
          return rightSampleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rightSample_);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder addRightSampleBuilder() {
        return getRightSampleFieldBuilder().addBuilder(
            apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder addRightSampleBuilder(
          int index) {
        return getRightSampleFieldBuilder().addBuilder(
            index, apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation.Builder> 
           getRightSampleBuilderList() {
        return getRightSampleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
          getRightSampleFieldBuilder() {
        if (rightSampleBuilder_ == null) {
          rightSampleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder>(
                  rightSample_,
                  ((bitField0_ & 0x00020000) != 0),
                  getParentForChildren(),
                  isClean());
          rightSample_ = null;
        }
        return rightSampleBuilder_;
      }

      private int direction_ = 1;
      /**
       * <code>optional .apollo.hdmap.Lane.LaneDirection direction = 19;</code>
       * @return Whether the direction field is set.
       */
      @java.lang.Override public boolean hasDirection() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneDirection direction = 19;</code>
       * @return The direction.
       */
      @java.lang.Override
      public apollo.hdmap.MapLane.Lane.LaneDirection getDirection() {
        apollo.hdmap.MapLane.Lane.LaneDirection result = apollo.hdmap.MapLane.Lane.LaneDirection.forNumber(direction_);
        return result == null ? apollo.hdmap.MapLane.Lane.LaneDirection.FORWARD : result;
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneDirection direction = 19;</code>
       * @param value The direction to set.
       * @return This builder for chaining.
       */
      public Builder setDirection(apollo.hdmap.MapLane.Lane.LaneDirection value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00040000;
        direction_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .apollo.hdmap.Lane.LaneDirection direction = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00040000);
        direction_ = 1;
        onChanged();
        return this;
      }

      private java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> leftRoadSample_ =
        java.util.Collections.emptyList();
      private void ensureLeftRoadSampleIsMutable() {
        if (!((bitField0_ & 0x00080000) != 0)) {
          leftRoadSample_ = new java.util.ArrayList<apollo.hdmap.MapLane.LaneSampleAssociation>(leftRoadSample_);
          bitField0_ |= 0x00080000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> leftRoadSampleBuilder_;

      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> getLeftRoadSampleList() {
        if (leftRoadSampleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(leftRoadSample_);
        } else {
          return leftRoadSampleBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public int getLeftRoadSampleCount() {
        if (leftRoadSampleBuilder_ == null) {
          return leftRoadSample_.size();
        } else {
          return leftRoadSampleBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation getLeftRoadSample(int index) {
        if (leftRoadSampleBuilder_ == null) {
          return leftRoadSample_.get(index);
        } else {
          return leftRoadSampleBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder setLeftRoadSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (leftRoadSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftRoadSampleIsMutable();
          leftRoadSample_.set(index, value);
          onChanged();
        } else {
          leftRoadSampleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder setLeftRoadSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (leftRoadSampleBuilder_ == null) {
          ensureLeftRoadSampleIsMutable();
          leftRoadSample_.set(index, builderForValue.build());
          onChanged();
        } else {
          leftRoadSampleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder addLeftRoadSample(apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (leftRoadSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftRoadSampleIsMutable();
          leftRoadSample_.add(value);
          onChanged();
        } else {
          leftRoadSampleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder addLeftRoadSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (leftRoadSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLeftRoadSampleIsMutable();
          leftRoadSample_.add(index, value);
          onChanged();
        } else {
          leftRoadSampleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder addLeftRoadSample(
          apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (leftRoadSampleBuilder_ == null) {
          ensureLeftRoadSampleIsMutable();
          leftRoadSample_.add(builderForValue.build());
          onChanged();
        } else {
          leftRoadSampleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder addLeftRoadSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (leftRoadSampleBuilder_ == null) {
          ensureLeftRoadSampleIsMutable();
          leftRoadSample_.add(index, builderForValue.build());
          onChanged();
        } else {
          leftRoadSampleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder addAllLeftRoadSample(
          java.lang.Iterable<? extends apollo.hdmap.MapLane.LaneSampleAssociation> values) {
        if (leftRoadSampleBuilder_ == null) {
          ensureLeftRoadSampleIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, leftRoadSample_);
          onChanged();
        } else {
          leftRoadSampleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder clearLeftRoadSample() {
        if (leftRoadSampleBuilder_ == null) {
          leftRoadSample_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00080000);
          onChanged();
        } else {
          leftRoadSampleBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public Builder removeLeftRoadSample(int index) {
        if (leftRoadSampleBuilder_ == null) {
          ensureLeftRoadSampleIsMutable();
          leftRoadSample_.remove(index);
          onChanged();
        } else {
          leftRoadSampleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder getLeftRoadSampleBuilder(
          int index) {
        return getLeftRoadSampleFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getLeftRoadSampleOrBuilder(
          int index) {
        if (leftRoadSampleBuilder_ == null) {
          return leftRoadSample_.get(index);  } else {
          return leftRoadSampleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
           getLeftRoadSampleOrBuilderList() {
        if (leftRoadSampleBuilder_ != null) {
          return leftRoadSampleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(leftRoadSample_);
        }
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder addLeftRoadSampleBuilder() {
        return getLeftRoadSampleFieldBuilder().addBuilder(
            apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance());
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder addLeftRoadSampleBuilder(
          int index) {
        return getLeftRoadSampleFieldBuilder().addBuilder(
            index, apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance());
      }
      /**
       * <pre>
       * Association between central point to closest road boundary.
       * </pre>
       *
       * <code>repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation.Builder> 
           getLeftRoadSampleBuilderList() {
        return getLeftRoadSampleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
          getLeftRoadSampleFieldBuilder() {
        if (leftRoadSampleBuilder_ == null) {
          leftRoadSampleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder>(
                  leftRoadSample_,
                  ((bitField0_ & 0x00080000) != 0),
                  getParentForChildren(),
                  isClean());
          leftRoadSample_ = null;
        }
        return leftRoadSampleBuilder_;
      }

      private java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> rightRoadSample_ =
        java.util.Collections.emptyList();
      private void ensureRightRoadSampleIsMutable() {
        if (!((bitField0_ & 0x00100000) != 0)) {
          rightRoadSample_ = new java.util.ArrayList<apollo.hdmap.MapLane.LaneSampleAssociation>(rightRoadSample_);
          bitField0_ |= 0x00100000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> rightRoadSampleBuilder_;

      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation> getRightRoadSampleList() {
        if (rightRoadSampleBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rightRoadSample_);
        } else {
          return rightRoadSampleBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public int getRightRoadSampleCount() {
        if (rightRoadSampleBuilder_ == null) {
          return rightRoadSample_.size();
        } else {
          return rightRoadSampleBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation getRightRoadSample(int index) {
        if (rightRoadSampleBuilder_ == null) {
          return rightRoadSample_.get(index);
        } else {
          return rightRoadSampleBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder setRightRoadSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (rightRoadSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightRoadSampleIsMutable();
          rightRoadSample_.set(index, value);
          onChanged();
        } else {
          rightRoadSampleBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder setRightRoadSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (rightRoadSampleBuilder_ == null) {
          ensureRightRoadSampleIsMutable();
          rightRoadSample_.set(index, builderForValue.build());
          onChanged();
        } else {
          rightRoadSampleBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder addRightRoadSample(apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (rightRoadSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightRoadSampleIsMutable();
          rightRoadSample_.add(value);
          onChanged();
        } else {
          rightRoadSampleBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder addRightRoadSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation value) {
        if (rightRoadSampleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRightRoadSampleIsMutable();
          rightRoadSample_.add(index, value);
          onChanged();
        } else {
          rightRoadSampleBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder addRightRoadSample(
          apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (rightRoadSampleBuilder_ == null) {
          ensureRightRoadSampleIsMutable();
          rightRoadSample_.add(builderForValue.build());
          onChanged();
        } else {
          rightRoadSampleBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder addRightRoadSample(
          int index, apollo.hdmap.MapLane.LaneSampleAssociation.Builder builderForValue) {
        if (rightRoadSampleBuilder_ == null) {
          ensureRightRoadSampleIsMutable();
          rightRoadSample_.add(index, builderForValue.build());
          onChanged();
        } else {
          rightRoadSampleBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder addAllRightRoadSample(
          java.lang.Iterable<? extends apollo.hdmap.MapLane.LaneSampleAssociation> values) {
        if (rightRoadSampleBuilder_ == null) {
          ensureRightRoadSampleIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rightRoadSample_);
          onChanged();
        } else {
          rightRoadSampleBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder clearRightRoadSample() {
        if (rightRoadSampleBuilder_ == null) {
          rightRoadSample_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
        } else {
          rightRoadSampleBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public Builder removeRightRoadSample(int index) {
        if (rightRoadSampleBuilder_ == null) {
          ensureRightRoadSampleIsMutable();
          rightRoadSample_.remove(index);
          onChanged();
        } else {
          rightRoadSampleBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder getRightRoadSampleBuilder(
          int index) {
        return getRightRoadSampleFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder getRightRoadSampleOrBuilder(
          int index) {
        if (rightRoadSampleBuilder_ == null) {
          return rightRoadSample_.get(index);  } else {
          return rightRoadSampleBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
           getRightRoadSampleOrBuilderList() {
        if (rightRoadSampleBuilder_ != null) {
          return rightRoadSampleBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rightRoadSample_);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder addRightRoadSampleBuilder() {
        return getRightRoadSampleFieldBuilder().addBuilder(
            apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public apollo.hdmap.MapLane.LaneSampleAssociation.Builder addRightRoadSampleBuilder(
          int index) {
        return getRightRoadSampleFieldBuilder().addBuilder(
            index, apollo.hdmap.MapLane.LaneSampleAssociation.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;</code>
       */
      public java.util.List<apollo.hdmap.MapLane.LaneSampleAssociation.Builder> 
           getRightRoadSampleBuilderList() {
        return getRightRoadSampleFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder> 
          getRightRoadSampleFieldBuilder() {
        if (rightRoadSampleBuilder_ == null) {
          rightRoadSampleBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapLane.LaneSampleAssociation, apollo.hdmap.MapLane.LaneSampleAssociation.Builder, apollo.hdmap.MapLane.LaneSampleAssociationOrBuilder>(
                  rightRoadSample_,
                  ((bitField0_ & 0x00100000) != 0),
                  getParentForChildren(),
                  isClean());
          rightRoadSample_ = null;
        }
        return rightRoadSampleBuilder_;
      }

      private java.util.List<apollo.hdmap.MapId.Id> selfReverseLaneId_ =
        java.util.Collections.emptyList();
      private void ensureSelfReverseLaneIdIsMutable() {
        if (!((bitField0_ & 0x00200000) != 0)) {
          selfReverseLaneId_ = new java.util.ArrayList<apollo.hdmap.MapId.Id>(selfReverseLaneId_);
          bitField0_ |= 0x00200000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> selfReverseLaneIdBuilder_;

      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id> getSelfReverseLaneIdList() {
        if (selfReverseLaneIdBuilder_ == null) {
          return java.util.Collections.unmodifiableList(selfReverseLaneId_);
        } else {
          return selfReverseLaneIdBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public int getSelfReverseLaneIdCount() {
        if (selfReverseLaneIdBuilder_ == null) {
          return selfReverseLaneId_.size();
        } else {
          return selfReverseLaneIdBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public apollo.hdmap.MapId.Id getSelfReverseLaneId(int index) {
        if (selfReverseLaneIdBuilder_ == null) {
          return selfReverseLaneId_.get(index);
        } else {
          return selfReverseLaneIdBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder setSelfReverseLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (selfReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelfReverseLaneIdIsMutable();
          selfReverseLaneId_.set(index, value);
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder setSelfReverseLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (selfReverseLaneIdBuilder_ == null) {
          ensureSelfReverseLaneIdIsMutable();
          selfReverseLaneId_.set(index, builderForValue.build());
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder addSelfReverseLaneId(apollo.hdmap.MapId.Id value) {
        if (selfReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelfReverseLaneIdIsMutable();
          selfReverseLaneId_.add(value);
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder addSelfReverseLaneId(
          int index, apollo.hdmap.MapId.Id value) {
        if (selfReverseLaneIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSelfReverseLaneIdIsMutable();
          selfReverseLaneId_.add(index, value);
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder addSelfReverseLaneId(
          apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (selfReverseLaneIdBuilder_ == null) {
          ensureSelfReverseLaneIdIsMutable();
          selfReverseLaneId_.add(builderForValue.build());
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder addSelfReverseLaneId(
          int index, apollo.hdmap.MapId.Id.Builder builderForValue) {
        if (selfReverseLaneIdBuilder_ == null) {
          ensureSelfReverseLaneIdIsMutable();
          selfReverseLaneId_.add(index, builderForValue.build());
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder addAllSelfReverseLaneId(
          java.lang.Iterable<? extends apollo.hdmap.MapId.Id> values) {
        if (selfReverseLaneIdBuilder_ == null) {
          ensureSelfReverseLaneIdIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, selfReverseLaneId_);
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder clearSelfReverseLaneId() {
        if (selfReverseLaneIdBuilder_ == null) {
          selfReverseLaneId_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public Builder removeSelfReverseLaneId(int index) {
        if (selfReverseLaneIdBuilder_ == null) {
          ensureSelfReverseLaneIdIsMutable();
          selfReverseLaneId_.remove(index);
          onChanged();
        } else {
          selfReverseLaneIdBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public apollo.hdmap.MapId.Id.Builder getSelfReverseLaneIdBuilder(
          int index) {
        return getSelfReverseLaneIdFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public apollo.hdmap.MapId.IdOrBuilder getSelfReverseLaneIdOrBuilder(
          int index) {
        if (selfReverseLaneIdBuilder_ == null) {
          return selfReverseLaneId_.get(index);  } else {
          return selfReverseLaneIdBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public java.util.List<? extends apollo.hdmap.MapId.IdOrBuilder> 
           getSelfReverseLaneIdOrBuilderList() {
        if (selfReverseLaneIdBuilder_ != null) {
          return selfReverseLaneIdBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(selfReverseLaneId_);
        }
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addSelfReverseLaneIdBuilder() {
        return getSelfReverseLaneIdFieldBuilder().addBuilder(
            apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public apollo.hdmap.MapId.Id.Builder addSelfReverseLaneIdBuilder(
          int index) {
        return getSelfReverseLaneIdFieldBuilder().addBuilder(
            index, apollo.hdmap.MapId.Id.getDefaultInstance());
      }
      /**
       * <code>repeated .apollo.hdmap.Id self_reverse_lane_id = 22;</code>
       */
      public java.util.List<apollo.hdmap.MapId.Id.Builder> 
           getSelfReverseLaneIdBuilderList() {
        return getSelfReverseLaneIdFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder> 
          getSelfReverseLaneIdFieldBuilder() {
        if (selfReverseLaneIdBuilder_ == null) {
          selfReverseLaneIdBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              apollo.hdmap.MapId.Id, apollo.hdmap.MapId.Id.Builder, apollo.hdmap.MapId.IdOrBuilder>(
                  selfReverseLaneId_,
                  ((bitField0_ & 0x00200000) != 0),
                  getParentForChildren(),
                  isClean());
          selfReverseLaneId_ = null;
        }
        return selfReverseLaneIdBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:apollo.hdmap.Lane)
    }

    // @@protoc_insertion_point(class_scope:apollo.hdmap.Lane)
    private static final apollo.hdmap.MapLane.Lane DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new apollo.hdmap.MapLane.Lane();
    }

    public static apollo.hdmap.MapLane.Lane getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Lane>
        PARSER = new com.google.protobuf.AbstractParser<Lane>() {
      @java.lang.Override
      public Lane parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Lane> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Lane> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public apollo.hdmap.MapLane.Lane getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_apollo_hdmap_LaneBoundaryType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_apollo_hdmap_LaneBoundaryType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_apollo_hdmap_LaneBoundary_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_apollo_hdmap_LaneBoundary_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_apollo_hdmap_LaneSampleAssociation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_apollo_hdmap_LaneSampleAssociation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_apollo_hdmap_Lane_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_apollo_hdmap_Lane_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n modules/map/proto/map_lane.proto\022\014apol" +
      "lo.hdmap\032\036modules/map/proto/map_id.proto" +
      "\032$modules/map/proto/map_geometry.proto\"\313" +
      "\001\n\020LaneBoundaryType\022\t\n\001s\030\001 \001(\001\0222\n\005types\030" +
      "\002 \003(\0162#.apollo.hdmap.LaneBoundaryType.Ty" +
      "pe\"x\n\004Type\022\013\n\007UNKNOWN\020\000\022\021\n\rDOTTED_YELLOW" +
      "\020\001\022\020\n\014DOTTED_WHITE\020\002\022\020\n\014SOLID_YELLOW\020\003\022\017" +
      "\n\013SOLID_WHITE\020\004\022\021\n\rDOUBLE_YELLOW\020\005\022\010\n\004CU" +
      "RB\020\006\"\212\001\n\014LaneBoundary\022\"\n\005curve\030\001 \001(\0132\023.a" +
      "pollo.hdmap.Curve\022\016\n\006length\030\002 \001(\001\022\017\n\007vir" +
      "tual\030\003 \001(\010\0225\n\rboundary_type\030\004 \003(\0132\036.apol" +
      "lo.hdmap.LaneBoundaryType\"1\n\025LaneSampleA" +
      "ssociation\022\t\n\001s\030\001 \001(\001\022\r\n\005width\030\002 \001(\001\"\356\t\n" +
      "\004Lane\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\022*\n\rc" +
      "entral_curve\030\002 \001(\0132\023.apollo.hdmap.Curve\022" +
      "1\n\rleft_boundary\030\003 \001(\0132\032.apollo.hdmap.La" +
      "neBoundary\0222\n\016right_boundary\030\004 \001(\0132\032.apo" +
      "llo.hdmap.LaneBoundary\022\016\n\006length\030\005 \001(\001\022\023" +
      "\n\013speed_limit\030\006 \001(\001\022$\n\noverlap_id\030\007 \003(\0132" +
      "\020.apollo.hdmap.Id\022(\n\016predecessor_id\030\010 \003(" +
      "\0132\020.apollo.hdmap.Id\022&\n\014successor_id\030\t \003(" +
      "\0132\020.apollo.hdmap.Id\0227\n\035left_neighbor_for" +
      "ward_lane_id\030\n \003(\0132\020.apollo.hdmap.Id\0228\n\036" +
      "right_neighbor_forward_lane_id\030\013 \003(\0132\020.a" +
      "pollo.hdmap.Id\022)\n\004type\030\014 \001(\0162\033.apollo.hd" +
      "map.Lane.LaneType\022)\n\004turn\030\r \001(\0162\033.apollo" +
      ".hdmap.Lane.LaneTurn\0227\n\035left_neighbor_re" +
      "verse_lane_id\030\016 \003(\0132\020.apollo.hdmap.Id\0228\n" +
      "\036right_neighbor_reverse_lane_id\030\017 \003(\0132\020." +
      "apollo.hdmap.Id\022%\n\013junction_id\030\020 \001(\0132\020.a" +
      "pollo.hdmap.Id\0228\n\013left_sample\030\021 \003(\0132#.ap" +
      "ollo.hdmap.LaneSampleAssociation\0229\n\014righ" +
      "t_sample\030\022 \003(\0132#.apollo.hdmap.LaneSample" +
      "Association\0223\n\tdirection\030\023 \001(\0162 .apollo." +
      "hdmap.Lane.LaneDirection\022=\n\020left_road_sa" +
      "mple\030\024 \003(\0132#.apollo.hdmap.LaneSampleAsso" +
      "ciation\022>\n\021right_road_sample\030\025 \003(\0132#.apo" +
      "llo.hdmap.LaneSampleAssociation\022.\n\024self_" +
      "reverse_lane_id\030\026 \003(\0132\020.apollo.hdmap.Id\"" +
      "[\n\010LaneType\022\010\n\004NONE\020\001\022\020\n\014CITY_DRIVING\020\002\022" +
      "\n\n\006BIKING\020\003\022\014\n\010SIDEWALK\020\004\022\013\n\007PARKING\020\005\022\014" +
      "\n\010SHOULDER\020\006\"B\n\010LaneTurn\022\013\n\007NO_TURN\020\001\022\r\n" +
      "\tLEFT_TURN\020\002\022\016\n\nRIGHT_TURN\020\003\022\n\n\006U_TURN\020\004" +
      "\";\n\rLaneDirection\022\013\n\007FORWARD\020\001\022\014\n\010BACKWA" +
      "RD\020\002\022\017\n\013BIDIRECTION\020\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          apollo.hdmap.MapId.getDescriptor(),
          apollo.hdmap.MapGeometry.getDescriptor(),
        });
    internal_static_apollo_hdmap_LaneBoundaryType_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_apollo_hdmap_LaneBoundaryType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_apollo_hdmap_LaneBoundaryType_descriptor,
        new java.lang.String[] { "S", "Types", });
    internal_static_apollo_hdmap_LaneBoundary_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_apollo_hdmap_LaneBoundary_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_apollo_hdmap_LaneBoundary_descriptor,
        new java.lang.String[] { "Curve", "Length", "Virtual", "BoundaryType", });
    internal_static_apollo_hdmap_LaneSampleAssociation_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_apollo_hdmap_LaneSampleAssociation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_apollo_hdmap_LaneSampleAssociation_descriptor,
        new java.lang.String[] { "S", "Width", });
    internal_static_apollo_hdmap_Lane_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_apollo_hdmap_Lane_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_apollo_hdmap_Lane_descriptor,
        new java.lang.String[] { "Id", "CentralCurve", "LeftBoundary", "RightBoundary", "Length", "SpeedLimit", "OverlapId", "PredecessorId", "SuccessorId", "LeftNeighborForwardLaneId", "RightNeighborForwardLaneId", "Type", "Turn", "LeftNeighborReverseLaneId", "RightNeighborReverseLaneId", "JunctionId", "LeftSample", "RightSample", "Direction", "LeftRoadSample", "RightRoadSample", "SelfReverseLaneId", });
    descriptor.resolveAllFeaturesImmutable();
    apollo.hdmap.MapId.getDescriptor();
    apollo.hdmap.MapGeometry.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
